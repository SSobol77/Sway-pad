#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Sway-Pad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

import curses
import locale
import toml
import os
import re
import queue
import shlex
import sys
import time
import pyperclip
import logging
import chardet
import unicodedata
import codecs
import traceback
import subprocess
import tempfile
import threading

from pygments import lex
from pygments.lexers import get_lexer_by_name, guess_lexer, TextLexer
from pygments.token import Token
from wcwidth import wcwidth, wcswidth 


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def _set_default_encoding():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Python 3.8 –∏ –≤—ã—à–µ."""
    os.environ.setdefault("PYTHONIOENCODING", "utf-8")
    os.environ.setdefault("PYTHONLEGACYWINDOWSSTDIO", "1")

_set_default_encoding()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é Flake8
def run_flake8_on_code(code_string, filename="<buffer>"):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Flake8 –Ω–∞ code_string —á–µ—Ä–µ–∑ subprocess, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    """
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    if len(code_string) > 100_000:
        return ["File is too large for flake8 analysis"]

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å .py
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as tmp:
        tmp_name = tmp.name
        tmp.write(code_string)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º flake8 –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.
        # --max-line-length=88 –∑–¥–µ—Å—å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä;
        # –¥–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º –æ–ø—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ .flake8
        cmd = ["flake8", "--max-line-length=88", tmp_name]

        process = subprocess.run(
            cmd,
            capture_output=True,  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout/err, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å curses
            text=True
        )
        
        # –ü–∞—Ä—Å–∏–º stdout
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–æ–∫, flake8 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        # (–∏–ª–∏ –¥–∞–∂–µ –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ 0 –∏–ª–∏ 1, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç warning)
        output = process.stdout.strip()
        if not output:
            return ["Flake8: No issues found."]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        return output.split("\n")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(tmp_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
def deep_merge(base: dict, override: dict) -> dict:
    """
    Recursively merges 'override' dict into 'base' dict, returning a new dict.
    """
    result = dict(base)
    for k, v in override.items():
        if (
            k in result
            and isinstance(result[k], dict)
            and isinstance(v, dict)
        ):
            result[k] = deep_merge(result[k], v)
        else:
            result[k] = v
    return result

# --- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ---------------------------------------
def safe_run(cmd: list[str]) -> subprocess.CompletedProcess:
    """
    –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ subprocess.run –±–µ–∑ shell=True, —Å –∑–∞—Ö–≤–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞.
    –ù–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–Ω—É–ª–µ–≤–æ–º –∫–æ–¥–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ (check=False).
    """
    return subprocess.run(cmd, capture_output=True, text=True, check=False)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ñ–∞–π–ª–∞
def get_file_icon(filename: str, config: dict) -> str:
    """
    Returns the icon for a file based on its extension.
    """
    file_lower = filename.lower()
    if "file_icons" not in config or "supported_formats" not in config:
        return "üìù"  # Fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    for key, icon in config["file_icons"].items():
        extensions = config["supported_formats"].get(key, [])
        if file_lower.endswith(tuple(ext.lower() for ext in extensions)):
            return icon

    return config["file_icons"].get("text", "üìù")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Git (–≤–µ—Ç–∫–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤)
def get_git_info(file_path: str) -> tuple[str, str, str]:
    repo_dir = os.path.dirname(os.path.abspath(file_path)) if file_path else os.getcwd()
    if not os.path.isdir(os.path.join(repo_dir, ".git")):
        logging.debug(f"No .git directory found in {repo_dir}")
        return "", "", "0"

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É
    try:
        branch = subprocess.run(
            ["git", "branch", "--show-current"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
    except FileNotFoundError:
        logging.warning("Git executable not found")
        return "", "", "0"
    except subprocess.CalledProcessError:
        # fallback: git symbolic-ref
        try:
            branch = subprocess.run(
                ["git", "symbolic-ref", "--short", "HEAD"],
                capture_output=True, text=True, check=True, cwd=repo_dir
            ).stdout.strip()
        except (subprocess.CalledProcessError, FileNotFoundError):
            branch = "main"

    # 2. –ì—Ä—è–∑–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ?
    try:
        dirty = subprocess.run(
            ["git", "status", "--short"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
        if dirty:
            branch += "*"
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        logging.warning(f"Git status failed: {e}")

    # 3. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_name = subprocess.run(
            ["git", "config", "user.name"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        user_name = ""

    # 4. –ö–æ–ª-–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
    try:
        commits = subprocess.run(
            ["git", "rev-list", "--count", "HEAD"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        commits = "0"

    return branch, user_name, commits


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config() -> dict:
    """
    Loads configuration from 'config.toml', falling back to minimal defaults if not found or invalid.
    """
    minimal_default = {
        "colors": {
            "error": "red",
            "status": "bright_white",
            "green": "green"  # –î–ª—è Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        },
        "fonts": {"font_family": "monospace", "font_size": 12},
        "keybindings": {
            "delete": "del",
            "paste": "ctrl+v",
            "copy": "ctrl+c",
            "cut": "ctrl+x",
            "undo": "ctrl+z",
            "open_file": "ctrl+o",
            "save_file": "ctrl+s",
            "select_all": "ctrl+a",
            "quit": "ctrl+q",
            "redo": "ctrl+shift+z",
        },
        "editor": {
            "use_system_clipboard": True,
            "default_new_filename": "new_file.py"          
        },
        "file_icons": {
            "python": "üêç",
            "javascript": "üìú",
            "text": "üìù",
            "html": "üåê",
            "css": "üé®"
        },
        "supported_formats": {
            "python": ["py", "pyw"],
            "javascript": ["js", "mjs", "cjs", "jsx"],
            "text": ["txt"],
            "html": ["html", "htm"],
            "css": ["css"]
        }
    }

    try:
        with open("config.toml", "r", encoding="utf-8") as f:
            file_content = f.read()
            user_config = toml.loads(file_content)
            final_config = deep_merge(minimal_default, user_config)
            return final_config
    except FileNotFoundError:
        logging.warning("Config file 'config.toml' not found. Using minimal defaults.")
        return minimal_default
    except toml.TomlDecodeError as e:
        logging.error(f"TOML parse error: {str(e)}")
        logging.error("Falling back to minimal defaults.")
        return minimal_default

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:
logging.basicConfig(
    filename="editor.log",
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)",
    force=True,
)

logger = logging.getLogger(__name__)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
KEY_LOGGER = logging.getLogger("sway2.keyevents")
KEY_LOGGER.propagate = False
KEY_LOGGER.setLevel(logging.DEBUG)
KEY_LOGGER.addHandler(logging.NullHandler())

if os.environ.get("SWAY2_KEYTRACE", "").lower() in {"1", "true", "yes"}:
    from logging.handlers import RotatingFileHandler
    handler = RotatingFileHandler("keytrace.log", maxBytes=1_000_000, backupCount=3)
    handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
    KEY_LOGGER.addHandler(handler)
    KEY_LOGGER.propagate = True
else:
    KEY_LOGGER.disabled = True


class SwayEditor:
    """Main class for the Sway editor."""
    def __init__(self, stdscr):
        # ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è curses ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.stdscr = stdscr
        self.stdscr.keypad(True)
        curses.raw(); curses.nonl(); curses.noecho()


        # ‚îÄ‚îÄ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ù–£–ñ–ù–´ –î–ê–õ–¨–®–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.insert_mode = True
        self.status_message = ""
        self._msg_q = queue.Queue() 
        self.action_history, self.undone_actions = [], []

        # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥ –æ–±–æ–ª–æ—á–∫–∏
        self._shell_cmd_q = queue.Queue()
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self._git_q = queue.Queue() 

        # ‚îÄ‚îÄ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.search_term = ""           # –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
        self.search_matches = []        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: [(row, col_start_idx, col_end_idx), ...]
        self.current_match_idx = -1     # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è F3/–ø–µ—Ä–µ—Ö–æ–¥–∞
        self.highlighted_matches = []   # –°–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ü–û–î–°–í–ï–¢–ö–ò –Ω–∞ —ç–∫—Ä–∞–Ω–µ

        # ‚îÄ‚îÄ –ø—Ä–æ—á–∏–µ –ø–æ–ª—è/–∑–∞–≥–ª—É—à–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.config   = load_config()
        self.filename = ""  
        self.text     = [""]
        self.cursor_x = self.cursor_y = 0
        self.scroll_top = self.scroll_left = 0
        self.modified = False
        self.encoding = "UTF-8"
        self.selection_start = self.selection_end = None
        self.is_selecting = False
        self.git_info = None
        self._lexer, self._token_cache = None, {}
        self.visible_lines, self.last_window_size = 0, (0, 0)
        self.colors = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤
        
        # ‚îÄ‚îÄ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.stdscr.nodelay(False)
        locale.setlocale(locale.LC_ALL, "")
        curses.start_color(); curses.use_default_colors(); curses.curs_set(1)

        # ‚îÄ‚îÄ clipboard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.use_system_clipboard = self.config.get("editor", {}).get("use_system_clipboard", True)
        self.pyclip_available = self._check_pyclip_availability()

        # ‚îÄ‚îÄ keybindings (–≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.keybindings = {
            # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            "delete":      self.parse_key(self.config["keybindings"].get("delete", "del")),
            "paste":       self.parse_key(self.config["keybindings"].get("paste",  "ctrl+v")),
            "copy":        self.parse_key(self.config["keybindings"].get("copy",   "ctrl+c")),
            "cut":         self.parse_key(self.config["keybindings"].get("cut",    "ctrl+x")),
            "undo":        self.parse_key(self.config["keybindings"].get("undo",   "ctrl+z")),
            "new_file":    self.parse_key(self.config["keybindings"].get("new_file", "f4")),
            "open_file":   self.parse_key(self.config["keybindings"].get("open_file", "ctrl+o")),
            "save_file":   self.parse_key(self.config["keybindings"].get("save_file", "ctrl+s")),
            "save_as": self.parse_key(self.config["keybindings"].get("save_as", "f5")),
            "select_all":  self.parse_key(self.config["keybindings"].get("select_all","ctrl+a")),
            "quit":        self.parse_key(self.config["keybindings"].get("quit",   "ctrl+q")),
            "redo":        self.parse_key(self.config["keybindings"].get("redo",   "ctrl+shift+z")),
            "goto_line": self.parse_key(self.config["keybindings"].get("goto_line", "ctrl+g")),
            # –∫—É—Ä—Å–æ—Ä / –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            "extend_selection_right": curses.KEY_SRIGHT,
            "extend_selection_left":  curses.KEY_SLEFT,
            "select_to_home":         curses.KEY_SHOME,
            "select_to_end":          curses.KEY_SEND,
            "extend_selection_up":    curses.KEY_SR,
            "extend_selection_down":  curses.KEY_SF,
            # Git-–º–µ–Ω—é
            "git_menu": self.parse_key(self.config["keybindings"].get("git_menu", "f2")),
            # ‚òÖ Esc-–æ—Ç–º–µ–Ω–∞
            "cancel_operation": self.parse_key(self.config["keybindings"].get("cancel_operation", "esc")),
            # –ü–æ–∏—Å–∫
            "find":       self.parse_key(self.config["keybindings"].get("find", "ctrl+f")),
            "find_next":  self.parse_key(self.config["keybindings"].get("find_next", "f3")),
            "help": self.parse_key(self.config["keybindings"].get("help", "f1")),
        }

        # ‚îÄ‚îÄ action_map ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.action_map = {
            "copy": self.copy, "paste": self.paste, "cut": self.cut,
            "undo": self.undo, "redo": self.redo, "select_all": self.select_all,
            "extend_selection_right": self.extend_selection_right,
            "extend_selection_left":  self.extend_selection_left,
            "select_to_home": self.select_to_home, "select_to_end": self.select_to_end,
            "extend_selection_up": self.extend_selection_up,
            "extend_selection_down": self.extend_selection_down,
            "new_file": self.new_file,
            "open_file": lambda: print("Open file"),
            "save_file": lambda: print("Save file"),
            "save_as": self.save_file_as,
            "delete": lambda: print("Delete"),
            "quit":   lambda: print("Quit"),
            "git_menu": self.integrate_git,
            # ‚òÖ Esc-–æ—Ç–º–µ–Ω–∞
            "cancel_operation": self.cancel_operation,
            "help": self.show_help,
            "goto_line": self.goto_line,
        }

        # ‚îÄ‚îÄ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.init_colors()
        #self.load_syntax_highlighting()
        self.set_initial_cursor_position()
        
        self.update_git_info()
        

    def _check_pyclip_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pyperclip –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
        try:
            pyperclip.copy("")
            pyperclip.paste()
            return True
        except pyperclip.PyperclipException as e:
            logging.warning(f"System clipboard unavailable: {str(e)}")
            return False


    def get_selected_text(self):
        if not self.is_selecting or self.selection_start is None or self.selection_end is None:
            return ""
        start_row, start_col = self.selection_start
        end_row, end_col = self.selection_end
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –Ω–∞—á–∞–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞
        if start_row > end_row or (start_row == end_row and start_col > end_col):
            start_row, start_col, end_row, end_col = end_row, end_col, start_row, start_col
        
        selected_lines = []
        if start_row == end_row:
            line = self.text[start_row]
            selected_lines.append(line[start_col:end_col])
        else:
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            selected_lines.append(self.text[start_row][start_col:])
            # –°—Ä–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            for row in range(start_row + 1, end_row):
                selected_lines.append(self.text[row])
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            selected_lines.append(self.text[end_row][:end_col])
        
        return "\n".join(selected_lines)


    def delete_selected_text(self):
        if not self.is_selecting or self.selection_start is None or self.selection_end is None:
            return
        start_row, start_col = self.selection_start
        end_row, end_col = self.selection_end
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        if start_row > end_row or (start_row == end_row and start_col > end_col):
            start_row, start_col, end_row, end_col = end_row, end_col, start_row, start_col
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è undo
        deleted_text = self.get_selected_text()
        self.action_history.append({
            "type": "delete",
            "text": deleted_text,
            "start": start_row,
            "start_col": start_col,
            "end": end_row,
            "end_col": end_col
        })
        
        if start_row == end_row:
            self.text[start_row] = self.text[start_row][:start_col] + self.text[start_row][end_col:]
            self.cursor_x = start_col
        else:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫–∏
            self.text[start_row] = self.text[start_row][:start_col] + self.text[end_row][end_col:]
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            del self.text[start_row + 1:end_row + 1]
            self.cursor_y = start_row
            self.cursor_x = start_col
        
        self.selection_start = None
        self.selection_end = None
        self.is_selecting = False
        self.modified = True
        self.undone_actions.clear()


    def copy(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        selected_text = self.get_selected_text()
        if not selected_text:
            self.status_message = "Nothing to copy"
            return
        self.internal_clipboard = selected_text
        if self.use_system_clipboard and self.pyclip_available:
            try:
                pyperclip.copy(selected_text)
                self.status_message = "Copied to system clipboard"
            except pyperclip.PyperclipException as e:
                logging.error(f"Failed to copy to system clipboard: {str(e)}")
                self.status_message = "Copied to internal clipboard (system clipboard error)"
        else:
            self.status_message = "Copied to internal clipboard"


    def cut(self):
        """–í—ã—Ä–µ–∑–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        selected_text = self.get_selected_text()
        if not selected_text:
            self.status_message = "Nothing to cut"
            return
        self.internal_clipboard = selected_text
        if self.use_system_clipboard and self.pyclip_available:
            try:
                pyperclip.copy(selected_text)
                self.status_message = "Cut to system clipboard"
            except pyperclip.PyperclipException as e:
                logging.error(f"Failed to cut to system clipboard: {str(e)}")
                self.status_message = "Cut to internal clipboard (system clipboard error)"
        self.delete_selected_text()


    def paste(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
        if self.use_system_clipboard and self.pyclip_available:
            try:
                text = pyperclip.paste()
                if not text:
                    text = self.internal_clipboard
                    self.status_message = "Pasted from internal clipboard (system clipboard empty)"
                else:
                    self.status_message = "Pasted from system clipboard"
            except pyperclip.PyperclipException as e:
                logging.error(f"Failed to paste from system clipboard: {str(e)}")
                text = self.internal_clipboard
                self.status_message = "Pasted from internal clipboard (system clipboard error)"
        else:
            text = self.internal_clipboard
            self.status_message = "Pasted from internal clipboard"

        if not text:
            self.status_message = "Clipboard is empty"
            return

        if self.is_selecting:
            self.delete_selected_text()
        self.insert_text(text)


    def extend_selection_right(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_x < len(self.text[self.cursor_y]):
            self.cursor_x += 1
        self.selection_end = (self.cursor_y, self.cursor_x)

    def extend_selection_left(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_x > 0:
            self.cursor_x -= 1
        self.selection_end = (self.cursor_y, self.cursor_x)


    def select_to_home(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        self.cursor_x = 0
        self.selection_end = (self.cursor_y, self.cursor_x)

    def select_to_end(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        self.cursor_x = len(self.text[self.cursor_y])
        self.selection_end = (self.cursor_y, self.cursor_x)

    def select_all(self):
        self.selection_start = (0, 0)
        self.selection_end = (len(self.text) - 1, len(self.text[-1]))
        self.is_selecting = True


    def undo(self):
        if not self.action_history:
            self.status_message = "Nothing to undo"
            return
        last_action = self.action_history.pop()
        
        if last_action["type"] == "insert":
            text = last_action["text"]
            row, col = last_action["position"]
            lines = text.split('\n')
            end_row = row + len(lines) - 1
            end_col = col + len(lines[-1]) if len(lines) == 1 else len(lines[-1])
            self.delete_text(row, col, end_row, end_col)
            self.cursor_y = row
            self.cursor_x = col
        elif last_action["type"] == "delete":
            text = last_action["text"]
            start_row = last_action["start"]
            start_col = last_action["start_col"]
            self.insert_text_at_position(text, start_row, start_col)
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            lines = text.split('\n')
            self.cursor_y = start_row + len(lines) - 1
            self.cursor_x = start_col + len(lines[-1]) if len(lines) == 1 else len(lines[-1])
        
        self.undone_actions.append(last_action)
        self.modified = True
        self.is_selecting = False
        self.selection_start = None
        self.selection_end = None
        self.status_message = "Undo performed"


    def extend_selection_up(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        self.selection_end = (self.cursor_y, self.cursor_x)

    def extend_selection_down(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        self.selection_end = (self.cursor_y, self.cursor_x)

    
    def redo(self):
        if not self.undone_actions:
            self.status_message = "Nothing to redo"
            return
        last_undone = self.undone_actions.pop()
        
        if last_undone["type"] == "insert":
            text = last_undone["text"]
            row, col = last_undone["position"]
            self.insert_text_at_position(text, row, col)
        elif last_undone["type"] == "delete":
            start_row = last_undone["start"]
            start_col = last_undone["start_col"]
            end_row = last_undone["end"]
            end_col = last_undone["end_col"]
            self.delete_text(start_row, start_col, end_row, end_col)
        
        self.action_history.append(last_undone)
        self.modified = True
        self.status_message = "Redo performed"
    

    def insert_text_at_position(self, text, row, col):
        lines = text.split('\n')
        if row < len(self.text):
            self.text[row] = self.text[row][:col] + lines[0] + self.text[row][col:]
        else:
            while len(self.text) <= row:
                self.text.append("")
            self.text[row] = lines[0]
        for i in range(1, len(lines)):
            new_row = row + i
            if new_row < len(self.text):
                self.text[new_row] = lines[i]
            else:
                self.text.append(lines[i])
        if lines:
            last_row = row + len(lines) - 1
            if len(lines) == 1:
                self.cursor_y = row
                self.cursor_x = col + len(lines[0])
            else:
                self.cursor_y = last_row
                self.cursor_x = len(lines[-1])
        else:
            self.cursor_y = row
            self.cursor_x = col


    def delete_text(self, start_row, start_col, end_row, end_col):
        if start_row == end_row:
            line = self.text[start_row]
            self.text[start_row] = line[:start_col] + line[end_col:]
        else:
            self.text[start_row] = self.text[start_row][:start_col] + self.text[end_row][end_col:]
            del self.text[start_row + 1:end_row + 1]
        self.modified = True


    def insert_text(self, text):
        if self.is_selecting:
            self.delete_selected_text()
        lines = text.split('\n')
        current_line = self.text[self.cursor_y]
        start_x = self.cursor_x  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        start_y = self.cursor_y
        self.text[self.cursor_y] = current_line[:self.cursor_x] + lines[0] + current_line[self.cursor_x:]
        self.cursor_x += len(lines[0])
        for i in range(1, len(lines)):
            self.cursor_y += 1
            self.text.insert(self.cursor_y, lines[i])
            self.cursor_x = len(lines[i])
        self.modified = True
        self.action_history.append({
            "type": "insert",
            "text": text,
            "position": (start_y, start_x)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        })
        self.status_message = "Text inserted"    


    def apply_syntax_highlighting_with_pygments(self, line):
        """
        Uses Pygments for automatic language detection and tokenization.
        The resulting tokens are mapped to curses color pairs for syntax highlighting.
        """
        if self._lexer is None:
            try:
                if self.filename and self.filename != "noname":
                    self._lexer = get_lexer_by_name(self.detect_language())
                else:
                    self._lexer = guess_lexer(line)
            except Exception:
                self._lexer = TextLexer()

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        line_hash = hash(line)
        cache_key = (line_hash, id(self._lexer))
        if cache_key in self._token_cache:
            return self._token_cache[cache_key]

        tokens = list(lex(line, self._lexer))

        token_color_map = {
            Token.Keyword: curses.color_pair(2),
            Token.Keyword.Constant: curses.color_pair(2),
            Token.Keyword.Declaration: curses.color_pair(2),
            Token.Keyword.Namespace: curses.color_pair(2),
            Token.Keyword.Pseudo: curses.color_pair(2),
            Token.Keyword.Reserved: curses.color_pair(2),
            Token.Keyword.Type: curses.color_pair(2),
            Token.Name.Builtin: curses.color_pair(2),
            Token.Name.Function: curses.color_pair(3),
            Token.Name.Class: curses.color_pair(3),
            Token.Name.Decorator: curses.color_pair(5),
            Token.Name.Exception: curses.color_pair(4),
            Token.Name.Variable: curses.color_pair(7),
            Token.Name.Namespace: curses.color_pair(2),
            Token.Name.Attribute: curses.color_pair(7),
            Token.Name.Tag: curses.color_pair(5),
            Token.Literal.String: curses.color_pair(3),
            Token.Literal.String.Doc: curses.color_pair(3),
            Token.Literal.String.Interpol: curses.color_pair(3),
            Token.Literal.String.Escape: curses.color_pair(3),
            Token.Literal.String.Backtick: curses.color_pair(3),
            Token.Literal.String.Delimiter: curses.color_pair(3),
            Token.Literal.Number: curses.color_pair(4),
            Token.Literal.Number.Float: curses.color_pair(4),
            Token.Literal.Number.Hex: curses.color_pair(4),
            Token.Literal.Number.Integer: curses.color_pair(4),
            Token.Literal.Number.Oct: curses.color_pair(4),
            Token.Comment: curses.color_pair(1),
            Token.Comment.Multiline: curses.color_pair(1),
            Token.Comment.Preproc: curses.color_pair(1),
            Token.Comment.Special: curses.color_pair(1),
            Token.Operator: curses.color_pair(6),
            Token.Operator.Word: curses.color_pair(6),
            Token.Punctuation: curses.color_pair(6),
            Token.Text: curses.color_pair(0),
            Token.Text.Whitespace: curses.color_pair(0),
            Token.Error: curses.color_pair(8),
            Token.Generic.Heading: curses.color_pair(5) | curses.A_BOLD,
            Token.Generic.Subheading: curses.color_pair(5),
            Token.Generic.Deleted: curses.color_pair(8),
            Token.Generic.Inserted: curses.color_pair(4),
            Token.Generic.Emph: curses.color_pair(3) | curses.A_BOLD,
            Token.Generic.Strong: curses.color_pair(2) | curses.A_BOLD,
            Token.Generic.Prompt: curses.color_pair(7),
        }
        default_color = curses.color_pair(0)
        highlighted = []

        for token, text_val in tokens:
            color = default_color
            for token_type, curses_color in token_color_map.items():
                if token in token_type:
                    color = curses_color
                    break
            highlighted.append((text_val, color))

        self._token_cache[cache_key] = highlighted
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 —Å—Ç—Ä–æ–∫)
        if len(self._token_cache) > 1000:
            self._token_cache.pop(next(iter(self._token_cache)))
        
        return highlighted


    def run_lint_async(self, code):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç Flake8 –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        –≤ –æ—á–µ—Ä–µ–¥—å self._msg_q, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ curses –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
        """
        lint_results = run_flake8_on_code(code, self.filename)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        if (not lint_results or
            (len(lint_results) == 1 and
            lint_results[0].startswith("Flake8: No issues"))):
            message = f"No issues found in {self.filename}"
        else:
            # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á—ë—Ç–∞
            message = " | ".join(lint_results[:2])

        # –ö–ª–∞–¥—ë–º –µ–≥–æ –≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–µ—Ä–µ–¥—å;
        # –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏ –ø–æ–∫–∞–∂–µ—Ç.
        self._msg_q.put(message)




    def set_initial_cursor_position(self):
        """Sets the initial cursor position and scrolling offsets."""
        self.cursor_x = 0
        self.cursor_y = 0
        self.scroll_top = 0
        self.scroll_left = 0


    def init_colors(self):
        """Initializes curses color pairs for syntax highlighting and search."""
        bg_color = -1 # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        curses.start_color()
        curses.use_default_colors()

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–ø—Ä–∏–º–µ—Ä—ã)
        curses.init_pair(1, curses.COLOR_BLUE, bg_color)    # Comment
        curses.init_pair(2, curses.COLOR_GREEN, bg_color)   # Keyword
        curses.init_pair(3, curses.COLOR_MAGENTA, bg_color) # String
        curses.init_pair(4, curses.COLOR_YELLOW, bg_color)  # Literal / Type
        curses.init_pair(5, curses.COLOR_CYAN, bg_color)    # Decorator / Tag
        curses.init_pair(6, curses.COLOR_WHITE, bg_color)   # Operator / Punctuation / Variable
        curses.init_pair(7, curses.COLOR_YELLOW, bg_color)  # Line number / Builtins
        curses.init_pair(8, curses.COLOR_BLACK, curses.COLOR_RED) # Error background

        # *** —Ü–≤–µ—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ ***
        # –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç–æ–º —Ñ–æ–Ω–µ
        curses.init_pair(9, curses.COLOR_BLACK, curses.COLOR_YELLOW) # Search Highlight

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å self.colors
        self.colors = {
            "error": curses.color_pair(8) | curses.A_BOLD, # –¥–µ–ª–∞–µ–º –æ—à–∏–±–∫—É –∂–∏—Ä–Ω–æ–π
            "line_number": curses.color_pair(7),
            "status": curses.color_pair(6) | curses.A_BOLD, # –°—Ç–∞—Ç—É—Å –∂–∏—Ä–Ω—ã–º
            "comment": curses.color_pair(1),
            "keyword": curses.color_pair(2),
            "string": curses.color_pair(3),
            "variable": curses.color_pair(6),
            "punctuation": curses.color_pair(6),
            "literal": curses.color_pair(4),
            "decorator": curses.color_pair(5),
            "type": curses.color_pair(4),
            "tag": curses.color_pair(5),
            "attribute": curses.color_pair(3),
            "builtins": curses.color_pair(7),
            "escape": curses.color_pair(5),
            "magic": curses.color_pair(3),
            "exception": curses.color_pair(8),
            "function": curses.color_pair(2),
            "class": curses.color_pair(4),
            "number": curses.color_pair(3),
            "operator": curses.color_pair(6),
            "green": curses.color_pair(2), # –î–ª—è Git
            # *** –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å ***
            "search_highlight": curses.color_pair(9),
        }

    def apply_syntax_highlighting(self, line, lang):
        """
        Applies syntax highlighting using Pygments. Language is auto-detected by filename or content.
        """
        return self.apply_syntax_highlighting_with_pygments(line)

    def load_syntax_highlighting(self):
        """Loads and compiles syntax highlighting rules from the configuration."""
        self.syntax_highlighting = {}
        try:
            syntax_cfg = self.config.get("syntax_highlighting", {})
            for lang, rules in syntax_cfg.items():
                patterns = rules.get("patterns", [])
                for rule in patterns:
                    try:
                        compiled = re.compile(rule["pattern"])
                        color_pair = self.colors.get(
                            rule["color"], curses.color_pair(0)
                        )
                        self.syntax_highlighting.setdefault(lang, []).append(
                            (compiled, color_pair)
                        )
                    except Exception as e:
                        logging.exception(
                            f"Error in syntax highlighting rule for {lang}: {rule}"
                        )
        except Exception as e:
            logging.exception("Error loading syntax highlighting")


    def draw_screen(self):
        """
        Renders the editor screen, including text lines, line numbers, status bar, cursor,
        selection, and search result highlighting.
        Uses wcwidth for correct character width calculation.
        """
        # --- –ù–∞—á–∞–ª–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ---
        self.stdscr.erase()
        height, width = self.stdscr.getmaxyx()

        if self.last_window_size != (height, width):
            self.visible_lines = height - 2
            self.last_window_size = (height, width)

        if height < 5 or width < 20:
            # –ï—Å–ª–∏ –æ–∫–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                error_color = self.colors.get("error", curses.A_NORMAL)
                self.stdscr.addstr(0, 0, "Window too small", error_color)
                self.stdscr.noutrefresh()
                curses.doupdate()
                return
            except curses.error as e:
                logging.error(f"Curses error during small window display: {e}")
                return

        max_line_num_digits = len(str(len(self.text)))
        line_num_width = max_line_num_digits + 1
        text_width = width - line_num_width

        # --- –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
        if self.cursor_y < self.scroll_top:
            self.scroll_top = self.cursor_y
        elif self.cursor_y >= self.scroll_top + self.visible_lines:
            self.scroll_top = self.cursor_y - self.visible_lines + 1

        # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
        for screen_row in range(self.visible_lines):
            text_line_index = self.scroll_top + screen_row
            if text_line_index >= len(self.text): break

            # –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
            line_num_str = f"{text_line_index + 1:<{max_line_num_digits}} "
            try: self.stdscr.addstr(screen_row, 0, line_num_str, self.colors["line_number"])
            except curses.error as e:
                logging.error(f"Curses error drawing line number at ({screen_row}, 0): {e}")
                pass # –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫—É –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ

            # –¢–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            line = self.text[text_line_index]
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ apply_syntax_highlighting —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(text, color), ...]
            syntax_line = self.apply_syntax_highlighting(line, self.detect_language())

            current_screen_x = line_num_width
            char_col_index = 0

            for text_part, color in syntax_line:
                if current_screen_x >= width: break
                part_buffer = ""
                accumulated_width = 0
                for char in text_part:
                    char_width = self.get_char_width(char)
                    if char_col_index < self.scroll_left:
                        char_col_index += 1
                        continue
                    if current_screen_x + char_width > width:
                        if part_buffer:
                            try: self.stdscr.addstr(screen_row, current_screen_x - accumulated_width, part_buffer, color)
                            except curses.error as e: 
                                logging.error(f"Curses error drawing status bar: {e}") 
                                pass
                        part_buffer = ""
                        current_screen_x = width
                        break
                    part_buffer += char
                    accumulated_width += char_width
                    char_col_index += 1
                if part_buffer:
                    try:
                        draw_pos_x = current_screen_x
                        self.stdscr.addstr(screen_row, draw_pos_x, part_buffer, color)
                        current_screen_x += accumulated_width
                    except curses.error as e:
                        logging.error(f"Curses error drawing text part at ({screen_row}, {draw_pos_x}): {e}")
                        current_screen_x = width # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                    
                if current_screen_x >= width: break

        # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ ---
        if self.highlighted_matches:
            search_highlight_color = self.colors.get("search_highlight", curses.A_REVERSE) # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç

            for match_row, match_start_idx, match_end_idx in self.highlighted_matches:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏–º–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                if match_row < self.scroll_top or match_row >= self.scroll_top + self.visible_lines:
                    continue

                screen_y = match_row - self.scroll_top # –≠–∫—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ Y
                line = self.text[match_row]

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é X –∏ —à–∏—Ä–∏–Ω—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ –≠–ö–†–ê–ù–ï
                highlight_screen_start_x = -1
                highlight_screen_width = 0
                current_screen_x = line_num_width # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏

                for char_idx, char in enumerate(line):
                    char_width = self.get_char_width(char)

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–æ scroll_left
                    if char_idx < self.scroll_left:
                        current_screen_x += char_width # –ù—É–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏
                        continue

                    # –ú—ã –≤ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Å–∏–º–≤–æ–ª –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    is_highlighted = match_start_idx <= char_idx < match_end_idx

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                    effective_screen_x = current_screen_x
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ scroll_left
                    if char_idx >= self.scroll_left:
                         scroll_w = self.get_string_width(line[self.scroll_left:char_idx])
                         effective_screen_x = line_num_width + scroll_w


                    if effective_screen_x >= width: # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_screen_x –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–Ω–∏—Ü—ã
                        break # –î–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è

                    if is_highlighted:
                        if highlight_screen_start_x == -1:
                            # –ù–∞—á–∞–ª–æ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                            highlight_screen_start_x = effective_screen_x
                        highlight_screen_width += char_width

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ (–Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. —Å—á–∏—Ç–∞–µ–º effective_screen_x –∑–∞–Ω–æ–≤–æ)
                    # current_screen_x += char_width # –£–±—Ä–∞–Ω–æ, —Å—á–∏—Ç–∞–µ–º effective_screen_x

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ chgat, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∏–¥–∏–º–∞
                if highlight_screen_start_x != -1 and highlight_screen_width > 0:
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —à–∏—Ä–∏–Ω–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
                    actual_width = min(highlight_screen_width, width - highlight_screen_start_x)
                    if actual_width > 0:
                        try:
                            self.stdscr.chgat(
                                screen_y,
                                highlight_screen_start_x,
                                actual_width, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
                                search_highlight_color
                            )
                        except curses.error as e:
                            logging.error(f"Curses error applying search highlight at ({screen_y}, {highlight_screen_start_x}) width {actual_width}: {e}")
                            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ chgat, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö

        # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è (–∫–∞–∫ —Ä–∞–Ω—å—à–µ, –ø–æ–≤–µ—Ä—Ö –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞) ---
        if self.is_selecting and self.selection_start and self.selection_end:
            start_y, start_x_idx = self.selection_start
            end_y, end_x_idx = self.selection_end
            if (start_y > end_y) or (start_y == end_y and start_x_idx > end_x_idx):
                start_y, start_x_idx, end_y, end_x_idx = end_y, end_x_idx, start_y, start_x_idx

            for y in range(start_y, end_y + 1):
                if y < self.scroll_top or y >= self.scroll_top + self.visible_lines: continue
                screen_y = y - self.scroll_top
                line = self.text[y]
                line_len_idx = len(line)
                current_start_idx = start_x_idx if y == start_y else 0
                current_end_idx = end_x_idx if y == end_y else line_len_idx
                if current_start_idx >= current_end_idx and not (line_len_idx == 0 and y == start_y == end_y): continue

                sel_screen_start_x, sel_screen_width = -1, 0
                current_screen_x = line_num_width
                for char_idx, char in enumerate(line):
                    char_width = self.get_char_width(char)
                    if char_idx < self.scroll_left:
                        current_screen_x += char_width
                        continue
                    is_selected = current_start_idx <= char_idx < current_end_idx
                    effective_screen_x = line_num_width + self.get_string_width(line[self.scroll_left:char_idx])
                    if effective_screen_x >= width: break
                    if is_selected:
                        if sel_screen_start_x == -1: sel_screen_start_x = effective_screen_x
                        sel_screen_width += char_width
                if sel_screen_start_x != -1 and sel_screen_width > 0:
                    actual_width = min(sel_screen_width, width - sel_screen_start_x)
                    if actual_width > 0:
                        try: self.stdscr.chgat(screen_y, sel_screen_start_x, actual_width, curses.A_REVERSE)
                        except curses.error as e:
                            logging.error(f"Curses error applying selection highlight at ({screen_y}, {sel_screen_start_x}) width {actual_width}: {e}")
                            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ chgat, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö

                elif line_len_idx == 0 and current_start_idx == 0 and current_end_idx == 0 and y >= start_y and y <= end_y:
                    if line_num_width < width:
                        try: self.stdscr.chgat(screen_y, line_num_width, 1, curses.A_REVERSE)
                        except curses.error as e:
                            logging.error(f"Curses error applying selection highlight for empty line at ({screen_y}, {line_num_width}): {e}")
                            pass

        # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
        try:
            status_y = height - 1
            # ... (–∫–æ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            file_type = self.detect_language()
            file_icon = get_file_icon(self.filename or "untitled", self.config)
            git_branch, git_user, git_commits = self.git_info or ("", "", "0")
            left_status = (f"{file_icon} {os.path.basename(self.filename) if self.filename else '[No Name]'}{'*' if self.modified else ''} | "
                           f"{file_type} | {self.encoding} | "
                           f"Ln {self.cursor_y + 1}/{len(self.text)}, Col {self.cursor_x + 1} | "
                           f"{'INS' if self.insert_mode else 'OVR'}")
            if git_branch or git_user: right_status = f"Git: {git_branch} ({git_commits})"
            else: right_status = ""
            status_color = self.colors.get("status", curses.A_NORMAL)
            self.stdscr.addstr(status_y, 0, " " * (width -1), status_color)
            left_width = self.get_string_width(left_status)
            max_left_width = width - self.get_string_width(right_status) - 2
            if left_width > max_left_width: left_status = left_status[:max_left_width - 3] + "..."
            self.stdscr.addstr(status_y, 0, left_status, status_color)
            if right_status:
                git_color = self.colors.get("green", status_color)
                right_start_col = width - self.get_string_width(right_status) -1
                if right_start_col < self.get_string_width(left_status) + 1: right_start_col = self.get_string_width(left_status) + 1
                if right_start_col < width: self.stdscr.addstr(status_y, right_start_col, right_status, git_color)
            if self.status_message:
                msg_width = self.get_string_width(self.status_message)
                msg_start_col = (width - msg_width) // 2
                if msg_start_col > self.get_string_width(left_status) and msg_start_col + msg_width < (width - self.get_string_width(right_status) -1) :
                    self.stdscr.addstr(status_y, msg_start_col, self.status_message, status_color | curses.A_BOLD)
                self.status_message = ""
        except curses.error: pass


        # --- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
        cursor_screen_y = self.cursor_y - self.scroll_top
        cursor_line_text = self.text[self.cursor_y]
        processed_width_before_cursor = self.get_string_width(cursor_line_text[:self.cursor_x])
        scroll_left_width = self.get_string_width(cursor_line_text[:self.scroll_left])
        final_cursor_screen_x = line_num_width + processed_width_before_cursor - scroll_left_width

        if 0 <= cursor_screen_y < self.visible_lines and line_num_width <= final_cursor_screen_x < width:
            try:
                self.stdscr.move(cursor_screen_y, final_cursor_screen_x)
            except curses.error as e:
                logging.error(f"Curses error moving cursor to ({cursor_screen_y}, {final_cursor_screen_x}): {e}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä —Ö–æ—Ç—è –±—ã –≤ –Ω–∞—á–∞–ª–æ –≤–∏–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
                try:
                    self.stdscr.move(cursor_screen_y, line_num_width)
                except curses.error as e_fallback:
                    logging.error(f"Curses fallback error moving cursor to ({cursor_screen_y}, {line_num_width}): {e_fallback}")
                    pass
                
        elif 0 <= cursor_screen_y < self.visible_lines:
            try: self.stdscr.move(cursor_screen_y, line_num_width)
            except curses.error: pass

        # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ ---
        self.stdscr.noutrefresh()
        curses.doupdate()


    def detect_language(self):
        """Detects the file's language based on its extension."""
        ext = os.path.splitext(self.filename)[1].lstrip('.').lower()
        logging.debug(f"Detecting language for extension: {ext}")
        for lang, exts in self.config.get("supported_formats", {}).items():
            if ext in exts:
                logging.debug(f"Detected language: {lang}")
                return lang
        logging.debug("No language detected, defaulting to 'text'")
        return "text"


    def handle_input(self, key):
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            logging.debug(f"Key pressed: {key}")

            # === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à ===
            if key in (curses.KEY_ENTER, 10, 13):     # Enter
                self.handle_enter()
            elif key in (curses.KEY_UP, 259, 450):     # Up Arrow  
                self.handle_up()
            elif key in (curses.KEY_DOWN, 258, 456):   # Down Arrow
                self.handle_down()
            elif key in (curses.KEY_LEFT, 260, 452):   # Left Arrow
                self.handle_left()
            elif key in (curses.KEY_RIGHT, 261, 454):   # Right Arrow
                self.handle_right()
            elif key in (curses.KEY_BACKSPACE, 127, 8):   # Backspace
                self.handle_backspace()
            elif key in (curses.KEY_DC, 330, 462):    # Delete
                self.handle_delete()
            elif key in (curses.KEY_HOME, 262, 449):   # Home
                self.handle_home()
            elif key in (curses.KEY_END, 360, 455):    # End
                self.handle_end()
            elif key in (curses.KEY_PPAGE, 339, 451):  # Page Up
                self.handle_page_up()
            elif key in (curses.KEY_NPAGE, 338, 457):  # Page Down
                self.handle_page_down()
            elif key == ord('\t'):                                        # Tab
                self.handle_smart_tab()                                
            elif key == self.keybindings["help"]:                       # F1
                self.show_help()
            elif key == self.keybindings["new_file"]:                   # F4
                self.new_file()
            elif key == self.keybindings["save_file"]:     # Ctrl+S
                self.save_file()
            elif key == self.keybindings["save_as"]:       # F5
                self.save_file_as()
            elif key == self.keybindings["open_file"]:     # Ctrl+O
                self.open_file()
            elif key == self.keybindings["copy"]:          # Ctrl+C
                self.copy()
            elif key == self.keybindings["cut"]:           # Ctrl+X
                self.cut()
            elif key == self.keybindings["paste"]:         # Ctrl+V
                self.paste()
            elif key == self.keybindings["redo"]:          # Ctrl+Y
                self.redo()
            elif key == self.keybindings["undo"]:          # Ctrl+Z
                self.undo()
            elif key == self.keybindings["find"]:          # Ctrl+F
                self.find_prompt()
            elif key == self.keybindings["find_next"]:     # F3
                self.find_next()
            elif key == self.keybindings["goto_line"]:  # Ctrl+G   
                self.goto_line()
                
            elif key >= 32 and key <= 255:                 # Printable characters
                self.handle_char_input(key)
            elif key == self.keybindings["select_all"]:    # Ctrl+A
                self.select_all()
            elif key == curses.KEY_SRIGHT:                 # Shift+Right Arrow
                self.extend_selection_right()
            elif key == curses.KEY_SLEFT:                  # Shift+Left Arrow
                self.extend_selection_left()
            elif key == curses.KEY_SHOME:                  # Shift+Home
                self.select_to_home()
            elif key == curses.KEY_SEND:                   # Shift+End
                self.select_to_end()
            elif key in (self.keybindings["extend_selection_up"], curses.KEY_SR, 337):
                self.extend_selection_up()
            elif key in (self.keybindings["extend_selection_down"], curses.KEY_SF, 336):
                self.extend_selection_down()         
            elif key == self.keybindings["quit"]:          # Ctrl+Q
                self.exit_editor()
            elif key == self.keybindings["cancel_operation"]:  # Esc
                self.cancel_operation()
            elif key == self.keybindings["git_menu"]:      #  F2 Git menu
                self.integrate_git()
            
        
        except Exception as e:
                self.status_message = f"Error: {str(e)}"
                logging.error(f"Input handling error: {str(e)}")
                logging.error(traceback.format_exc())


    def handle_up(self):
        """Moves the cursor up by one line."""
        if self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))


    def handle_down(self):
        """Moves the cursor down by one line."""
        if self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))


    def handle_left(self):
        """Moves the cursor left by one character or to the previous line end."""
        if self.cursor_x > 0:
            self.cursor_x -= 1
        elif self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = len(self.text[self.cursor_y])


    def handle_right(self):
        """Moves the cursor right by one character or to the beginning of the next line."""
        if self.cursor_x < len(self.text[self.cursor_y]):
            self.cursor_x += 1
        elif self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = 0


    def handle_home(self):
        """Moves the cursor to the beginning of the current line."""
        self.cursor_x = 0


    def handle_end(self):
        """Moves the cursor to the end of the current line."""
        self.cursor_x = len(self.text[self.cursor_y])


    def handle_page_up(self):
        """Moves the cursor up by one screen height."""
        height = self.stdscr.getmaxyx()[0]
        self.cursor_y = max(0, self.cursor_y - height)
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        self.scroll_top = max(0, self.scroll_top - height)


    def handle_page_down(self):
        """Moves the cursor down by one screen height."""
        height = self.stdscr.getmaxyx()[0]
        self.cursor_y = min(len(self.text) - 1, self.cursor_y + height)
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        if self.cursor_y >= self.scroll_top + height:
            self.scroll_top = max(0, min(len(self.text) - height, self.scroll_top + height))


    def handle_backspace(self):
        if self.is_selecting and self.selection_start and self.selection_end:
            self.delete_selected_text()
        else:
            if self.cursor_x > 0:
                line = self.text[self.cursor_y]
                deleted_char = line[self.cursor_x - 1]
                self.text[self.cursor_y] = line[:self.cursor_x - 1] + line[self.cursor_x:]
                self.cursor_x -= 1
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": deleted_char,
                    "start": self.cursor_y,
                    "start_col": self.cursor_x,
                    "end": self.cursor_y,
                    "end_col": self.cursor_x + 1
                })
            elif self.cursor_y > 0:
                deleted_line = self.text.pop(self.cursor_y)
                self.cursor_y -= 1
                self.cursor_x = len(self.text[self.cursor_y])
                self.text[self.cursor_y] += deleted_line
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": "\n" + deleted_line,
                    "start": self.cursor_y,
                    "start_col": self.cursor_x,
                    "end": self.cursor_y + 1,
                    "end_col": 0
                })
        self.undone_actions.clear()


    def handle_delete(self):
        if self.is_selecting and self.selection_start and self.selection_end:
            self.delete_selected_text()
        else:
            if self.cursor_x < len(self.text[self.cursor_y]):
                line = self.text[self.cursor_y]
                deleted_char = line[self.cursor_x]
                self.text[self.cursor_y] = line[:self.cursor_x] + line[self.cursor_x + 1:]
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": deleted_char,
                    "start": self.cursor_y,
                    "start_col": self.cursor_x,
                    "end": self.cursor_y,
                    "end_col": self.cursor_x + 1
                })
            elif self.cursor_y < len(self.text) - 1:
                deleted_line = self.text.pop(self.cursor_y + 1)
                self.text[self.cursor_y] += deleted_line
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": "\n" + deleted_line,
                    "start": self.cursor_y,
                    "start_col": len(self.text[self.cursor_y]) - len(deleted_line),
                    "end": self.cursor_y + 1,
                    "end_col": 0
                })
        self.undone_actions.clear()


    def handle_tab(self):
        """Inserts spaces or a tab character depending on configuration."""
        tab_size = self.config.get("editor", {}).get("tab_size", 4)
        use_spaces = self.config.get("editor", {}).get("use_spaces", True)
        current_line = self.text[self.cursor_y]

        if use_spaces:
            spaces = " " * tab_size
            self.text[self.cursor_y] = (
                current_line[: self.cursor_x] + spaces + current_line[self.cursor_x :]
            )
            self.cursor_x += tab_size
        else:
            self.text[self.cursor_y] = (
                current_line[: self.cursor_x] + "\t" + current_line[self.cursor_x :]
            )
            self.cursor_x += 1

        self.modified = True


    def handle_smart_tab(self):
        """
        –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (cursor_x == 0),
        –∫–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—Å—Ç—É–ø (–ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±) –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏.
        –ò–Ω–∞—á–µ ‚Äì –ø–∞–¥–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ handle_tab().
        """
        if self.cursor_y > 0:
            prev_line = self.text[self.cursor_y - 1]
            m = re.match(r"^(\s*)", prev_line)
            if m and self.cursor_x == 0:
                # –∫–æ–ø–∏—Ä—É–µ–º leading_spaces –∏–∑ prev_line
                self.text[self.cursor_y] = m.group(1) + self.text[self.cursor_y]
                self.cursor_x = len(m.group(1))
                self.modified = True
                return
        # –∏–Ω–∞—á–µ ‚Äì –æ–±—ã—á–Ω—ã–π —Ç–∞–±
        self.handle_tab()



    def handle_char_input(self, key):
        """Handles regular character input and supports undo."""

        try:
            char = chr(key)
            current_line = self.text[self.cursor_y]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è undo
            start_y, start_x = self.cursor_y, self.cursor_x

            if self.insert_mode:
                self.text[self.cursor_y] = (
                    current_line[:self.cursor_x] + char + current_line[self.cursor_x:]
                )
            else:
                self.text[self.cursor_y] = (
                    current_line[:self.cursor_x]
                    + char
                    + (
                        current_line[self.cursor_x + 1:]
                        if self.cursor_x < len(current_line)
                        else ""
                    )
                )

            self.cursor_x += 1
            self.modified = True

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
            self.action_history.append({
                "type": "insert",
                "text": char,
                "position": (start_y, start_x)
            })
            self.undone_actions.clear()  # –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

            logging.debug(f"Inserted char '{char}' at ({start_y}, {start_x})")

        except (ValueError, UnicodeEncodeError):
            logging.error(f"Cannot encode character: {key}")
        except Exception as e:
            logging.exception(f"Error handling character input: {str(e)}")
            self.status_message = f"Input error: {str(e)}"



    def handle_enter(self):
        """Handles the Enter key, creating a new line at the cursor position."""
        self.text.insert(self.cursor_y + 1, "")
        content = self.text[self.cursor_y][self.cursor_x :]
        self.text[self.cursor_y] = self.text[self.cursor_y][: self.cursor_x]
        self.text[self.cursor_y + 1] = content
        self.cursor_y += 1
        self.cursor_x = 0
        self.modified = True


    def parse_key(self, key_str: str) -> int:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É-–æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏ –≤ curses-–∫–æ–¥.

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:
        ‚Ä¢ F1‚ÄìF12, —Å—Ç—Ä–µ–ª–∫–∏, Home/End, PgUp/PgDn, Insert/Delete, Backspace
        ‚Ä¢ Ctrl+<–±—É–∫–≤–∞>, Ctrl+Shift+<–±—É–∫–≤–∞>
        ‚Ä¢ Alt+<‚Ä¶> (–±—É–∫–≤–∞, —Ü–∏—Ñ—Ä–∞, —Å–∏–º–≤–æ–ª, F-–∫–ª–∞–≤–∏—à–∞, –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è), –ø–æ–º–µ—á–∞–µ—Ç—Å—è –±–∏—Ç–æ–º 0x200
        –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ‚Äî –≤–æ–∑–±—É–∂–¥–∞–µ—Ç ValueError.
        """
        if not key_str:
            raise ValueError("empty hotkey")

        key_str = key_str.strip().lower()

        # ---------- —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ ----------
        named = {
            "del":        curses.KEY_DC,
            "delete":     curses.KEY_DC,
            "backspace":  curses.KEY_BACKSPACE,
            "tab":        ord("\t"),
            "enter":      ord("\n"),
            "return":     ord("\n"),
            "space":      ord(" "),
            "esc":        27,
            "escape":     27,
            "up":         curses.KEY_UP,
            "down":       curses.KEY_DOWN,
            "left":       curses.KEY_LEFT,
            "right":      curses.KEY_RIGHT,
            "home":       curses.KEY_HOME,
            "end":        curses.KEY_END,
            "pageup":     curses.KEY_PPAGE,
            "pgup":       curses.KEY_PPAGE,
            "pagedown":   curses.KEY_NPAGE,
            "pgdn":       curses.KEY_NPAGE,
            "insert":     curses.KEY_IC,
        }
        # –î–æ–±–∞–≤–ª—è–µ–º F1‚ÄìF12
        named.update({f"f{i}": getattr(curses, f"KEY_F{i}") for i in range(1, 13)})

        # ---------- Alt-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä ----------
        if key_str.startswith("alt+"):
            base = self.parse_key(key_str[4:])      # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º ¬´—Ö–≤–æ—Å—Ç¬ª
            return base | 0x200                     # –∑–∞–¥–∞—ë–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏—Ç Alt

        parts = key_str.split("+")

        # ---------- Ctrl –∏ Ctrl+Shift ----------
        if len(parts) == 2 and parts[0] == "ctrl":
            ch = parts[1]
            if len(ch) == 1 and ch.isalpha():
                return ord(ch) - ord("a") + 1       # —Å—Ç–∞–Ω–¥–∞—Ä—Ç ASCII Ctrl
            raise ValueError(f"unsupported Ctrl combination: {key_str}")

        if len(parts) == 3 and parts[:2] == ["ctrl", "shift"]:
            ch = parts[2]
            if len(ch) == 1 and ch.isalpha():
                return (ord(ch) - ord("a") + 1) | 0x100   # —Å–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            raise ValueError(f"unsupported Ctrl+Shift combination: {key_str}")

        # ---------- –ø—Ä–æ—Å—Ç–æ –∏–º—è ----------
        if key_str in named:
            return named[key_str]

        # ---------- –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª ----------
        if len(key_str) == 1:
            return ord(key_str)

        raise ValueError(f"cannot parse hotkey: {key_str}")


    def get_char_width(self, char):
        """
        Calculates the display width of a character using wcwidth.
        Returns 1 for control characters or characters with ambiguous width (-1).
        """
        width = wcwidth(char)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –¥–ª—è –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã, –∏–Ω–∞—á–µ —à–∏—Ä–∏–Ω—É
        return width if width > 0 else 1


    def get_string_width(self, text):
        """
        Calculates the display width of a string using wcswidth.
        Handles potential errors by summing individual character widths.
        """
        try:
            width = wcswidth(text)
            if width >= 0:
                return width
        except Exception:
            pass # Fallback

        total_width = 0
        for char in text:
            total_width += self.get_char_width(char)
        return total_width


    def open_file(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ (chardet),
        —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–µ–∫—Å–µ—Ä –∏ Git-–∏–Ω—Ñ–æ.
        """
        # —Å–ø—Ä–æ—Å–∏—Ç—å –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if self.modified:
            if (ans := self.prompt("Save changes? (y/n): ")).lower().startswith("y"):
                self.save_file()

        filename = self.prompt("Open file: ")
        if not filename:                       # Esc –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            self.status_message = "Open cancelled"
            return
        if not self.validate_filename(filename):
            self.status_message = "Invalid filename"
            return

        try:
            # ‚îÄ‚îÄ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            with open(filename, "rb") as f:
                enc_guess = chardet.detect(f.read())["encoding"]
            self.encoding = enc_guess or "UTF-8"

            # ‚îÄ‚îÄ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            with open(filename, "r", encoding=self.encoding, errors="replace") as f:
                self.text = f.read().splitlines() or [""]

            # ‚îÄ‚îÄ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            self.filename  = filename
            self._lexer    = None        # ‚ú® –∑–∞—Å—Ç–∞–≤–ª—è–µ–º Pygments –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –ª–µ–∫—Å–µ—Ä
            self.modified  = False
            self.set_initial_cursor_position()
            self.status_message = f"Opened {filename}  (enc: {self.encoding})"
            self.update_git_info()
            curses.flushinp()

        except FileNotFoundError:
            self.status_message = f"File not found: {filename}"
        except Exception as e:
            self.status_message = f"Error opening file: {e}"
            logging.exception(f"Error opening file: {filename}")


    def save_file(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.
        –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç ¬´Save as:¬ª.
        """
        # ‚îÄ‚îÄ 1. –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if not self.filename:
            new_name = self.prompt("Save as: ")
            if not new_name:
                self.status_message = "Save cancelled"
                return
            if not self.validate_filename(new_name):
                self.status_message = "Invalid filename"
                return
            self.filename = new_name
            self._lexer   = None          # ‚ú® –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ –Ω–æ–≤–æ–º—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é

        # ‚îÄ‚îÄ 2. —Å–∞–Ω–∫-–ø—Ä–æ–≤–µ—Ä–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if os.path.isdir(self.filename):
            self.status_message = f"Cannot save: {self.filename} is a directory"
            return
        if os.path.exists(self.filename) and not os.access(self.filename, os.W_OK):
            self.status_message = f"No write permissions: {self.filename}"
            return

        # ‚îÄ‚îÄ 3. –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            with open(self.filename, "w", encoding=self.encoding, errors="replace") as f:
                f.write(os.linesep.join(self.text))

            self.modified = False
            self.status_message = f"Saved to {self.filename}"

            code = os.linesep.join(self.text)
            threading.Thread(target=self.run_lint_async,
                            args=(code,), daemon=True).start()
            self.update_git_info()

        except Exception as e:
            self.status_message = f"Error saving file: {e}"
            logging.exception(f"Error saving file: {self.filename}")


    def save_file_as(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–µ–∫—Å–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
        """
        new_filename = self.prompt("Save file as: ")
        if not new_filename:
            self.status_message = "Save cancelled"
            return
        if not self.validate_filename(new_filename):
            self.status_message = "Invalid filename"
            return
        if os.path.isdir(new_filename):
            self.status_message = f"Cannot save: {new_filename} is a directory"
            return
        if os.path.exists(new_filename) and not os.access(new_filename, os.W_OK):
            self.status_message = f"No write permissions: {new_filename}"
            return

        try:
            with open(new_filename, "w", encoding=self.encoding, errors="replace") as f:
                f.write(os.linesep.join(self.text))

            self.filename = new_filename
            self._lexer   = None          # ‚ú® –≤—ã–±—Ä–∞—Ç—å –ª–µ–∫—Å–µ—Ä –ø–æ –Ω–æ–≤–æ–º—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            self.modified = False
            self.status_message = f"Saved as {new_filename}"

            code = os.linesep.join(self.text)
            threading.Thread(target=self.run_lint_async,
                            args=(code,), daemon=True).start()

        except Exception as e:
            self.status_message = f"Error saving file: {e}"
            logging.exception(f"Error saving file: {new_filename}")


    def revert_changes(self):
        """
        Reverts unsaved changes by reloading from the last saved version.
        """
        if self.filename == "noname":
            self.status_message = "Cannot revert: file has not been saved yet"
            return

        if not os.path.exists(self.filename):
            self.status_message = f"Cannot revert: file {self.filename} does not exist"
            return

        confirmation = self.prompt("Revert to last saved version? (y/n): ")
        if not confirmation or confirmation.lower() != "y":
            self.status_message = "Revert cancelled"
            return

        try:
            with open(self.filename, "r", encoding=self.encoding, errors="replace") as f:
                self.text = f.read().splitlines()
                if not self.text:
                    self.text = [""]

            self.modified = False
            self.set_initial_cursor_position()
            self.status_message = f"Reverted to last saved version of {self.filename}"
        except OSError as e:
            self.status_message = f"Error reverting file: {e}"
            logging.exception(f"Error reverting file: {self.filename}")
        except Exception as e:
            self.status_message = f"Unexpected error: {e}"
            logging.exception(f"Unexpected error reverting file: {self.filename}")


    def new_file(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.
        –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞, –ª–µ–∫—Å–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞.
        """
        # ‚îÄ‚îÄ 1. –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if self.modified:
            if (ans := self.prompt("Save changes? (y/n): ")).lower().startswith("y"):
                self.save_file()

        # ‚îÄ‚îÄ 2. –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ¬´—á–∏—Å—Ç—ã–π¬ª –±—É—Ñ–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            self.text       = [""]
            self.filename   = ""       # –∏–º—è –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ
            self._lexer     = None     # ‚ú® Pygments –≤—ã–±–µ—Ä–µ—Ç –ª–µ–∫—Å–µ—Ä –ø–æ–∑–∂–µ
            self.modified   = False
            self.encoding   = "UTF-8"  # —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            self.set_initial_cursor_position()
            self.status_message = "New file created"

        except Exception as e:
            self.status_message = f"Error creating new file: {e}"
            logging.exception("Error creating new file")


    def cancel_operation(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´Esc-–æ—Ç–º–µ–Ω—ã¬ª, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handle_input()
        –∏ —á–µ—Ä–µ–∑ action_map/–≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É.

        ‚Ä¢ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äí —Å–Ω–∏–º–∞–µ—Ç –µ–≥–æ;  
        ‚Ä¢ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç prompt (–Ω–∞–∂–∞—Ç–∏–µ Esc —É–∂–µ –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É) ‚Äì
        –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç —Å—Ç–∞—Ç—É—Å ¬´Cancelled¬ª;  
        ‚Ä¢ –∏–Ω–∞—á–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞.
        """
        if self.is_selecting:
            self.is_selecting = False
            self.selection_start = self.selection_end = None
            self.status_message = "Selection cancelled"
        elif self.highlighted_matches: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
            self.highlighted_matches = [] # –û—á–∏—â–∞–µ–º –µ–µ
            self.search_matches = []      # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è F3
            self.search_term = ""
            self.current_match_idx = -1
            self.status_message = "Search highlighting cancelled"
        else:
            # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –Ω–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.status_message = "Operation cancelled"
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ


    def handle_escape(self):
            """
            –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Esc.

            ‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äí –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –µ–≥–æ.  
            ‚Ä¢ –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è Esc –±—ã–ª–∞ –º–µ–Ω–µ–µ —á–µ–º 1.5 —Å –Ω–∞–∑–∞–¥,
            —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –≤—ã–π—Ç–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è.  
            ‚Ä¢ –ò–Ω–∞—á–µ  ‚Äí –ª–∏—à—å —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å ¬´Cancelled¬ª.
            """
            now = time.monotonic()
            last = getattr(self, "_last_esc_time", 0)

            # 1) –∏–¥—ë—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            if self.is_selecting:
                self.is_selecting = False
                self.selection_start = self.selection_end = None
                self.status_message = "Selection cancelled"

            # 2) –¥–≤–æ–π–Ω–æ–π Esc (–±—ã—Å—Ç—Ä–µ–µ 1.5 c) ‚Üí –≤—ã—Ö–æ–¥
            elif now - last < 1.5:
                if self.modified:
                    choice = self.prompt("Save changes before exit? (y/n): ")
                    if choice and choice.lower().startswith("y"):
                        self.save_file()
                self.exit_editor()

            # 3) –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí –ø—Ä–æ—Å—Ç–æ ¬´Cancelled¬ª
            else:
                self.status_message = "Cancelled"

            # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è Esc
            self._last_esc_time = now


    def exit_editor(self):
        """
        Exits the editor with a prompt to save any unsaved changes.
        """
        if self.modified:
            choice = self.prompt("Save changes? (y/n): ")
            if choice and choice.lower().startswith("y"):
                self.save_file()
        
        self._auto_save_enabled = False # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if hasattr(self, "_auto_save_thread") and self._auto_save_thread and self._auto_save_thread.is_alive():
            self._auto_save_thread.join(timeout=5) # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        curses.endwin()
        sys.exit(0)


    def prompt(self, message: str, max_len: int = 1024) -> str:
        """
        –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å-—Å—Ç—Ä–æ–∫–µ.

        ‚ñ∏ Esc      ‚Äî –æ—Ç–º–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ""  
        ‚ñ∏ Enter    ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ  
        ‚ñ∏ Backspace, ‚Üê/‚Üí, Home/End —Ä–∞–±–æ—Ç–∞—é—Ç ¬´–∫–∞–∫ –ø—Ä–∏–≤—ã—á–Ω–æ¬ª  
        """
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º curses –≤ ¬´–æ–±—ã—á–Ω—ã–π¬ª —Ä–µ–∂–∏–º
        self.stdscr.nodelay(False)
        curses.echo(False)

        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞
        row = curses.LINES - 1
        col = 0
        try:
            # —Ä–∏—Å—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            self.stdscr.move(row, col)
            self.stdscr.clrtoeol()
            self.stdscr.addstr(row, col, message)
            self.stdscr.refresh()

            # –±—É—Ñ–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
            buf: list[str] = []
            pos = 0

            while True:
                ch = self.stdscr.get_wch()   # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç UTF-8

                # ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏—à–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if ch in ("\n", "\r"):                    # Enter
                    break
                elif ch == "\x1b":                       # Esc (0x1B)
                    buf = []          # –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç = –æ—Ç–º–µ–Ω–∞
                    break
                elif ch in ("\x08", "\x7f", curses.KEY_BACKSPACE):
                    if pos > 0:
                        pos -= 1
                        buf.pop(pos)
                elif ch in (curses.KEY_LEFT,):
                    pos = max(0, pos - 1)
                elif ch in (curses.KEY_RIGHT,):
                    pos = min(len(buf), pos + 1)
                elif ch in (curses.KEY_HOME,):
                    pos = 0
                elif ch in (curses.KEY_END,):
                    pos = len(buf)

                # ‚îÄ‚îÄ‚îÄ –ø–µ—á–∞—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                elif isinstance(ch, str) and ch.isprintable():
                    if len(buf) < max_len:
                        buf.insert(pos, ch)
                        pos += 1

                # ‚îÄ‚îÄ‚îÄ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                # –æ—á–∏—â–∞–µ–º —Ö–≤–æ—Å—Ç, —á—Ç–æ–±—ã —Å—Ç–∏—Ä–∞–ª–∏—Å—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                self.stdscr.move(row, len(message))
                self.stdscr.clrtoeol()
                self.stdscr.addstr(row, len(message), "".join(buf))
                # –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä
                self.stdscr.move(row, len(message) + pos)
                self.stdscr.refresh()
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        except Exception as e:
            logging.exception(f"Prompt error: {e}")
            buf = []          # —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º

        finally:
            try:
                curses.flushinp()          # —á–∏—Å—Ç–∏–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞
                curses.noecho()            # –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ö–æ
                self.stdscr.nodelay(False) # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ ¬´–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π¬ª —Ä–µ–∂–∏–º
                self.stdscr.move(row, 0)   # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
                self.stdscr.clrtoeol()     # –æ—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞
                self.stdscr.refresh()      # –æ—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            except curses.error as e_finally:
                logging.error(f"Curses error in prompt cleanup: {e_finally}")
                # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ —Å–±—Ä–æ—Å
                print(f"Critical Curses error during prompt cleanup: {e_finally}")
                sys.exit(1) # –ò–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –≤—ã—Ö–æ–¥–∞

        return "".join(buf).strip()


    # === –ü–û–ò–°–ö ====================================================================

    def _collect_matches(self, term):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è term (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞) –≤ self.text.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: [(row_idx, col_start_idx, col_end_idx), ...].
        """
        matches = []
        if not term:
            return matches
        low = term.lower() # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        for row_idx, line in enumerate(self.text):
            start_col_idx = 0
            line_lower = line.lower() # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∏–∂–Ω–µ–π –≤–µ—Ä—Å–∏–µ–π —Å—Ç—Ä–æ–∫–∏
            while True:
                # –ò—â–µ–º –≤ line_lower, –Ω–æ –∏–Ω–¥–µ–∫—Å—ã –±–µ—Ä–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π line
                found_idx = line_lower.find(low, start_col_idx)
                if found_idx == -1:
                    break
                match_end_idx = found_idx + len(term)
                matches.append((row_idx, found_idx, match_end_idx))
                # –°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                start_col_idx = match_end_idx
        return matches


    def find_prompt(self):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è,
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–º—É.
        """
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.highlighted_matches = []
        self.current_match_idx = -1

        term = self.prompt("Find: ")
        if term == "":
            self.status_message = "Search cancelled"
            # –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
            # self.draw_screen() # –ù–µ—è–≤–Ω–æ –≤—ã–∑–æ–≤–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ
            return

        self.search_term = term
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        self.search_matches = self._collect_matches(term)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∂–µ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.highlighted_matches = self.search_matches

        if not self.search_matches:
            self.status_message = f"'{term}' not found"
            self.current_match_idx = -1
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            self.current_match_idx = 0
            self._goto_match(self.current_match_idx) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
            self.status_message = f"Found {len(self.search_matches)} match(es). Press F3 for next."

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫—É


    def find_next(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ø–æ —Ü–∏–∫–ª—É).
        –ù–µ –º–µ–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ highlighted_matches.
        """
        if not self.search_matches:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª F3 –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.status_message = "No search results to cycle through. Use Ctrl+F first."
            # –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            self.highlighted_matches = []
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –ø–æ –∫—Ä—É–≥—É
        self.current_match_idx = (self.current_match_idx + 1) % len(self.search_matches)
        self._goto_match(self.current_match_idx) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        self.status_message = (
            f"Match {self.current_match_idx + 1}/{len(self.search_matches)}"
        )
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ


    def _goto_match(self, idx):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∫—É—Ä—Å–æ—Ä/–ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ‚Ññ idx –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ."""
        row, col_start, col_end = self.search_matches[idx]
        self.cursor_y, self.cursor_x = row, col_start
        height = self.stdscr.getmaxyx()[0]
        # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        if self.cursor_y < self.scroll_top:
            self.scroll_top = max(0, self.cursor_y - height // 2)
        elif self.cursor_y >= self.scroll_top + self.visible_lines:
            self.scroll_top = min(
                len(self.text) - self.visible_lines,
                self.cursor_y - height // 2,
            )
        # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        width = self.stdscr.getmaxyx()[1]
        ln_width = len(str(len(self.text))) + 1   # —à–∏—Ä–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ + –ø—Ä–æ–±–µ–ª
        text_width = width - ln_width
        if self.cursor_x < self.scroll_left:
            self.scroll_left = self.cursor_x
        elif self.cursor_x >= self.scroll_left + text_width:
            self.scroll_left = max(0, self.cursor_x - text_width + 1)


    def search_text(self, search_term):
        """
        Searches for all occurrences of the specified term across all lines
        of the document and returns a list of matches.
        """
        matches = []
        for line_num, line in enumerate(self.text):
            for match in re.finditer(re.escape(search_term), line):
                matches.append((line_num, match.start(), match.end()))
        return matches


    def validate_filename(self, filename):
        """
        Validates the filename for length, correctness, and path.
        """

        if not filename or len(filename) > 255:
            return False

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ ..
            absolute_path = os.path.abspath(filename)
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            current_dir = os.path.abspath(os.getcwd())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞ —Å –ø—É—Ç–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            return absolute_path.startswith(current_dir + os.sep) or absolute_path == current_dir
        except Exception as e:
            logging.error(f"Error validating filename '{filename}': {e}")
            return False # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–π
        



# =============–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –æ–±–æ–ª–æ—á–∫–∏ Shell commands =================================

    def _execute_shell_command_async(self, cmd_list):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±–æ–ª–æ—á–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        –≤ –æ—á–µ—Ä–µ–¥—å self._shell_cmd_q.
        """
        output = ""
        error = ""
        message = ""

        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º curses-—ç–∫—Ä–∞–Ω –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
            # (–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –ø–æ—Ç–æ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π *–Ω–µ* –≤—ã–∑—ã–≤–∞–µ—Ç curses)
            # –õ—É—á—à–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
            # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –±–ª–æ–∫–∏—Ä—É–µ–º –∑–¥–µ—Å—å, –ù–û stdscr.refresh() –ù–ï –≤—ã–∑—ã–≤–∞–µ–º.
            # Curses state switching should ideally be handled by the main thread
            # based on a signal from the worker thread.
            # For simplicity in this example, we do state switching here,
            # but be aware of potential issues with state changes from non-main threads.

            # –í–ù–ò–ú–ê–ù–ò–ï: –í—ã–∑–æ–≤—ã curses.def_prog_mode(), curses.endwin(),
            # curses.reset_prog_mode() –∏–∑ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã!
            # –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
            # –û–¥–Ω–∞–∫–æ, –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
            # curses.def_prog_mode() # <-- –ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            # curses.endwin() # <-- –ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ shell=True
            process = subprocess.Popen(
                cmd_list,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
            )
            # communicate() –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫, –Ω–æ –Ω–µ curses
            output, error = process.communicate(timeout=30)

        except FileNotFoundError:
            message = f"Executable not found: {cmd_list[0]}"
        except subprocess.TimeoutExpired:
            message = "Command timed out"
            # –ú–æ–∂–Ω–æ —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
            # process.kill()
            # output, error = process.communicate() # –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –≤—ã–≤–æ–¥
        except Exception as e:
            logging.exception(f"Error executing shell command: {e}")
            message = f"Exec error: {e}"
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ curses-—Ä–µ–∂–∏–º (–æ–ø—è—Ç—å –∂–µ, –ª—É—á—à–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
            # curses.reset_prog_mode() # <-- –ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            # self.stdscr.refresh() # <-- –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ï–õ–¨–ó–Ø –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞!

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
            if not message: # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                if error and error.strip():
                    message = f"Error: {error.strip()[:80]}..." # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                else:
                    message = f"Command executed: {output.strip()[:80]}..." # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

            self._shell_cmd_q.put(message)
            

    def execute_shell_command(self):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—É, –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
        """
        command = self.prompt("Enter command: ")
        if not command:
            self.status_message = "Command cancelled"
            return

        # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–≤—ã—á–∫–∏, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
        try:
            cmd_list = shlex.split(command)
            if not cmd_list: # –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ split
                self.status_message = "Empty command"
                return
        except ValueError as e:
            self.status_message = f"Parse error: {e}"
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.status_message = f"Executing command: {' '.join(cmd_list[:3])}..." # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª–æ –∫–æ–º–∞–Ω–¥—ã
        threading.Thread(target=self._execute_shell_command_async,
                        args=(cmd_list,), daemon=True).start()

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–∑–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ —á–µ—Ä–µ–∑ _shell_cmd_q



    # GIT ==================================================================

    def _run_git_command_async(self, cmd_list, command_name):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É Git –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º curses-—ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            curses.def_prog_mode()
            curses.endwin()

            proc = safe_run(cmd_list)

            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ curses-—Ä–µ–∂–∏–º
            curses.reset_prog_mode()
            self.stdscr.refresh() # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞!
                                # –õ—É—á—à–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å.

            if proc.returncode == 0:
                message = f"Git {command_name} successful"
                # –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å output/stderr —Ç–æ–∂–µ
            else:
                message = f"Git error: {proc.stderr.strip()[:120]}"

            self._git_cmd_q.put(message) # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
            if command_name in ["pull", "commit"]: # –û–±–Ω–æ–≤–ª—è–µ–º Git-–∏–Ω—Ñ–æ –ø–æ—Å–ª–µ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥
                self.update_git_info()


        except FileNotFoundError:
            self._git_cmd_q.put("Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        except Exception as e:
            logging.exception(f"Git command async error: {e}")
            self._git_cmd_q.put(f"Git error: {e}")


    def integrate_git(self):
        """–ú–µ–Ω—é Git –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏—à–µ–π F2."""
        commands = {
            "1": ("status", "git status"),
            "2": ("commit", None),          # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            "3": ("push",   "git push"),
            "4": ("pull",   "git pull"),
            "5": ("diff",   "git diff"),
        }

        opts = " ".join(f"{k}:{v[0]}" for k, v in commands.items())
        choice = self.prompt(f"Git menu [{opts}] ‚Üí ")

        if not choice or choice not in commands:
            self.status_message = "Invalid choice or cancelled"
            return

        command_name = commands[choice][0]
        cmd = []

        if choice == "2":                               # commit
            msg = self.prompt("Commit message: ")
            if not msg:
                self.status_message = "Commit cancelled"
                return
            cmd = ["git", "commit", "-am", msg]         # —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        else:
            cmd_str = commands[choice][1]
            if cmd_str:
                try:
                    cmd = shlex.split(cmd_str) # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥—ã
                except ValueError as e:
                    self.status_message = f"Git command parse error: {e}"
                    return

        if cmd:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self._run_git_command_async,
                            args=(cmd, command_name), daemon=True).start()
            self.status_message = f"Running git {command_name}..."


    def _fetch_git_info_async(self, file_path: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ Git-–∏–Ω—Ñ–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            repo_dir = os.path.dirname(os.path.abspath(file_path)) if file_path else os.getcwd()
            if not os.path.isdir(os.path.join(repo_dir, ".git")):
                self._git_q.put(("", "", "0")) # –ü—É—Å—Ç–æ–µ –∏–Ω—Ñ–æ
                return

            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É
            try:
                branch = subprocess.run(
                    ["git", "branch", "--show-current"],
                    capture_output=True, text=True, check=True, cwd=repo_dir
                ).stdout.strip()
            except FileNotFoundError:
                logging.warning("Git executable not found")
                return "", "", "0"
            except subprocess.CalledProcessError:
                # fallback: git symbolic-ref
                try:
                    branch = subprocess.run(
                        ["git", "symbolic-ref", "--short", "HEAD"],
                        capture_output=True, text=True, check=True, cwd=repo_dir
                    ).stdout.strip()
                except (subprocess.CalledProcessError, FileNotFoundError):
                    branch = "main"

            # 2. –ì—Ä—è–∑–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ?
            try:
                dirty = subprocess.run(
                    ["git", "status", "--short"],
                    capture_output=True, text=True, check=True, cwd=repo_dir
                ).stdout.strip()
                if dirty:
                    branch += "*"
            except (subprocess.CalledProcessError, FileNotFoundError) as e:
                logging.warning(f"Git status failed: {e}")

            # 3. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_name = subprocess.run(
                    ["git", "config", "user.name"],
                    capture_output=True, text=True, check=True, cwd=repo_dir
                ).stdout.strip()
            except (subprocess.CalledProcessError, FileNotFoundError):
                user_name = ""

            # 4. –ö–æ–ª-–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
            try:
                commits = subprocess.run(
                    ["git", "rev-list", "--count", "HEAD"],
                    capture_output=True, text=True, check=True, cwd=repo_dir
                ).stdout.strip()
            except (subprocess.CalledProcessError, FileNotFoundError):
                commits = "0"

            # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å
            self._git_q.put((branch, user_name, commits))

        except FileNotFoundError:
            logging.warning("Git executable not found in async thread")
            self._git_q.put(("", "", "0")) # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏
        except Exception as e:
            logging.exception(f"Error fetching Git info in async thread: {e}")
            self._git_q.put(("", "", "0")) # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏


    def update_git_info(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ filename –∏–∑–º–µ–Ω–∏–ª—Å—è
        # –ò–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è?
        # –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è: –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ–≥–¥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        threading.Thread(target=self._fetch_git_info_async,
                        args=(self.filename,), daemon=True).start()


    def goto_line(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç +N / -N –æ—Ç —Ç–µ–∫—É—â–µ–π."""
        raw = self.prompt("Go to line (¬±N or %): ")
        if not raw:
            self.status_message = "Goto cancelled"
            return

        try:
            if raw.endswith('%'):
                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ñ–∞–π–ª–∞
                pct = int(raw.rstrip('%'))
                target = max(1, min(len(self.text), round(len(self.text) * pct / 100)))
            elif raw.startswith(('+', '-')):
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥
                delta = int(raw)
                target = self.cursor_y + 1 + delta
            else:
                target = int(raw)
        except ValueError:
            self.status_message = "Invalid number"
            return

        if not (1 <= target <= len(self.text)):
            self.status_message = f"Line out of range (1‚Äì{len(self.text)})"
            return

        self.cursor_y = target - 1
        self.cursor_x = 0
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–∏–¥
        height = self.stdscr.getmaxyx()[0]
        self.scroll_top = max(0, self.cursor_y - height // 2)
        self.status_message = f"Moved to line {target}"  # ‚úì


    def find_and_replace(self):
        """
        Performs find and replace with optional regex support.
        """
        search_term = self.prompt("Search for: ")
        if not search_term:
            return

        replace_term = self.prompt("Replace with: ")
        if replace_term is None:
            return

        try:
            count = 0
            for i in range(len(self.text)):
                new_line = re.sub(search_term, replace_term, self.text[i])
                if new_line != self.text[i]:
                    count += len(re.findall(search_term, self.text[i]))
                    self.text[i] = new_line
                    self.modified = True
            self.status_message = f"Replaced {count} occurrences"
        except re.error as e:
            self.status_message = f"Invalid regex pattern: {str(e)}"
        except Exception as e:
            self.status_message = f"Error during replace: {str(e)}"


    def toggle_insert_mode(self):
        """Toggles between Insert and Replace modes."""
        self.insert_mode = not self.insert_mode
        self.status_message = f"Mode: {'Insert' if self.insert_mode else 'Replace'}"


    def find_matching_bracket(self, line, col, bracket):
        """
        Searches for the matching bracket for the one under the cursor.
        Returns (row, col) of the matching bracket or None if not found.
        """
        brackets = {"(": ")", "{": "}", "[": "]", ")": "(", "}": "{", "]": "["}
        stack = []
        direction = 1 if bracket in "({[" else -1
        start = col + direction

        if direction == 1:
            for i in range(start, len(line)):
                char = line[i]
                if char in "({[":
                    stack.append(char)
                elif char in ")}]":
                    if not stack:
                        return None
                    top = stack.pop()
                    if brackets[top] != char:
                        return None
                    if not stack:
                        return (self.cursor_y, i)
        else:
            for i in range(start, -1, -1):
                char = line[i]
                if char in ")}]":
                    stack.append(char)
                elif char in "({[":
                    if not stack:
                        return None
                    top = stack.pop()
                    if brackets[char] != top:
                        return None
                    if not stack:
                        return (self.cursor_y, i)
        return None


    def highlight_matching_brackets(self):
        """
        Highlights matching brackets if the cursor is currently on a bracket.
        """
        if not (
            0 <= self.cursor_y < len(self.text)
            and 0 <= self.cursor_x < len(self.text[self.cursor_y])
        ):
            return

        line = self.text[self.cursor_y]
        char = line[self.cursor_x]

        if char in "(){}[]":
            match_pos = self.find_matching_bracket(line, self.cursor_x, char)
            if match_pos:
                height, width = self.stdscr.getmaxyx()
                if (
                    0 <= self.cursor_y - self.scroll_top < height
                    and 0 <= self.cursor_x - self.scroll_left < width
                ):
                    self.stdscr.addch(
                        self.cursor_y - self.scroll_top,
                        self.cursor_x - self.scroll_left,
                        char,
                        curses.A_REVERSE,
                    )
                match_y, match_x = match_pos
                if (
                    0 <= match_y - self.scroll_top < height
                    and 0 <= match_x - self.scroll_left < width
                ):
                    self.stdscr.addch(
                        match_y - self.scroll_top,
                        match_x - self.scroll_left,
                        line[match_x],
                        curses.A_REVERSE,
                    )


    def search_and_replace(self):
        """
        Searches and replaces text throughout the document using regex.
        Prompts for a search pattern and replacement text, performs the replacement,
        and reports the number of occurrences replaced.
        """
        search_pattern = self.prompt("Enter search pattern (regex): ")
        if not search_pattern:
            self.status_message = "Search cancelled"
            return

        replace_with = self.prompt("Enter replacement string: ")
        if replace_with is None:
            self.status_message = "Replacement cancelled"
            return

        try:
            compiled_pattern = re.compile(search_pattern)
            new_text = []
            replacements = 0

            for line in self.text:
                new_line, count = compiled_pattern.subn(replace_with, line)
                new_text.append(new_line)
                replacements += count

            self.text = new_text
            self.modified = True
            self.status_message = f"Replaced {replacements} occurrence(s)"
        except re.error as e:
            self.status_message = f"Invalid regex pattern: {e}"
        except Exception as e:
            self.status_message = f"Error during search and replace: {e}"


# -------------- Auto-save ------------------------------
    def toggle_auto_save(self):
        """Enables or disables auto-save functionality."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –∏ –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not hasattr(self, "_auto_save_enabled"):
            self._auto_save_enabled = False
            self._auto_save_thread = None

        self._auto_save_enabled = not self._auto_save_enabled

        if self._auto_save_enabled:
            if self._auto_save_thread is None or not self._auto_save_thread.is_alive():
                def auto_save_task():
                    logging.info("Auto-save thread started")
                    while self._auto_save_enabled: # –¶–∏–∫–ª –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–ª–∞–≥–∞
                        try:
                            time.sleep(60) # –ü–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                            if self.modified:
                                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
                                # –Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ SwayEditor (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
                                # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å.
                                # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –≤—ã–∑—ã–≤–∞–µ–º save_file, –Ω–æ –æ–Ω –±–ª–æ–∫–∏—Ä—É–µ—Ç.
                                # –ë–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
                                # –ü—Ä–∏–º–µ—Ä —Å –±–ª–æ–∫–∏—Ä—É—é—â–∏–º save_file (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏,
                                # –µ—Å–ª–∏ save_file —Å–∞–º –Ω–µ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å):
                                # self.save_file() # <- –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ save_file –±–ª–æ–∫–∏—Ä—É–µ—Ç UI!
                                # –õ—É—á—à–µ:
                                self._msg_q.put("Attempting auto-save...")
                                try:
                                    # –≠—Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                    # –∏–ª–∏ Save –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                                    # –ù–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞:
                                    with open(self.filename, "w", encoding=self.encoding, errors="replace") as f:
                                        f.write(os.linesep.join(self.text))
                                    self.modified = False # –î–æ—Å—Ç—É–ø –∫ modified –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ - –Ω–µ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ!
                                                        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.
                                    self._msg_q.put(f"Auto-saved to {self.filename}")
                                except Exception as e:
                                    self._msg_q.put(f"Auto-save error: {e}")
                                    logging.exception("Auto-save failed")

                        except Exception as e:
                            logging.exception(f"Error in auto-save thread: {e}")
                            # –ú–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                            self._auto_save_enabled = False
                            self._msg_q.put("Auto-save disabled due to error")

                    logging.info("Auto-save thread finished")


                self._auto_save_thread = threading.Thread(target=auto_save_task, daemon=True) # daemon=True –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self._auto_save_thread.start()
            self.status_message = "Auto-save enabled"
        else:
            self.status_message = "Auto-save disabled"
            # –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —è–≤–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å daemon=True –ø–æ—Ç–æ–∫,
            # –æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å–∞–º, –∫–æ–≥–¥–∞ self._auto_save_enabled —Å—Ç–∞–Ω–µ—Ç False
            # –ù–æ –µ—Å–ª–∏ –±—ã –Ω–µ –±—ã–ª daemon, –ø—Ä–∏—à–ª–æ—Å—å –±—ã –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    # –î–æ–±–∞–≤–∏—Ç—å –≤ exit_editor() –ø–µ—Ä–µ–¥ curses.endwin():
    # self._auto_save_enabled = False # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    # if hasattr(self, "_auto_save_thread") and self._auto_save_thread and self._auto_save_thread.is_alive():
    #     self._auto_save_thread.join(timeout=5) # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è


    def show_help(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π.
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ Esc.  –ù–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∫—É—Ä—Å–æ—Ä —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
        """
        help_lines = [
            "  ‚îÄ‚îÄ  Sway-Pad Help  ‚îÄ‚îÄ  ",
            "",
            "  F1        : Help (—ç—Ç–æ –æ–∫–Ω–æ)",
            "  F2        : Git-–º–µ–Ω—é",
            "  F3        : Find next",
            "  F4        : New file",
            "  F5        : Save as‚Ä¶",
            "  Ctrl+S    : Save",
            "  Ctrl+O    : Open file",
            "  Ctrl+Q    : Quit",
            "  Ctrl+Z/Y  : Undo / Redo",
            "  Ctrl+F    : Find",
            "",
            "  ¬© 2025 Siergej Sobolewski ‚Äî Sway-Pad",
            "  Licensed under the GPL-3.0 License",
            "",
            "  Esc ‚Äî –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ",
        ]

        # —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—è
        h = len(help_lines) + 2
        w = max(len(l) for l in help_lines) + 4
        max_y, max_x = self.stdscr.getmaxyx()
        y0 = (max_y - h) // 2
        x0 = (max_x - w) // 2

        win = curses.newwin(h, w, y0, x0)
        win.bkgd(" ", curses.color_pair(6))
        win.border()

        for i, text in enumerate(help_lines, start=1):
            win.addstr(i, 2, text)

        win.refresh()

        # ‚òÖ –ø—Ä—è—á–µ–º –∫—É—Ä—Å–æ—Ä –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        prev_vis = 1 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            prev_vis = curses.curs_set(0)   # 0 = invisible, 1/2 = visible
        except curses.error as e:
            logging.warning(f"Curses error hiding cursor in help: {e}")
            prev_vis = 1 # –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç                   # –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç

        # –∂–¥—ë–º Esc
        while True:
            try:
                ch = win.getch()
                if ch == 27:                     # Esc
                    break
            except curses.error as e_getch:
                logging.error(f"Curses error getting char in help: {e_getch}")
                # –í–æ–∑–º–æ–∂–Ω–æ, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª, –µ—Å–ª–∏ getch –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                break

        # ‚òÖ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        try:
            curses.curs_set(prev_vis)
        except curses.error as e_curs_set:
            logging.warning(f"Curses error restoring cursor after help: {e_curs_set}")
        del win
        self.draw_screen()


# =============  –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞  =========================================

    def run(self):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:
        ‚Ä¢ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ —á–µ—Ä–µ–∑ self._msg_q
        ‚Ä¢ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω
        ‚Ä¢ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏—à–∏
        ‚Ä¢ –ª–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        while True:
            # ‚îÄ‚îÄ 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            try:
                while not self._msg_q.empty():
                    self.status_message = self._msg_q.get_nowait()
            except queue.Empty:
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∫–æ–º–∞–Ω–¥ –æ–±–æ–ª–æ—á–∫–∏
            try:
                while not self._shell_cmd_q.empty():
                    self.status_message = self._shell_cmd_q.get_nowait()
            except queue.Empty:
                pass

            # –ü–æ–ª—É—á–∞–µ–º Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            try:
                while not self._git_q.empty():
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (branch, user_name, commits) –∏–∑ –ø–æ—Ç–æ–∫–∞
                    git_data = self._git_q.get_nowait()
                    # –û–±–Ω–æ–≤–ª—è–µ–º self.git_info
                    self.git_info = git_data
                    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å-–±–∞—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Git-–∏–Ω—Ñ–æ
                    self.status_message = "Git info updated" # –ò–ª–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
                    logging.debug(f"Updated Git info: {self.git_info}") # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            except queue.Empty:
                 pass
            except Exception as e:
                 logging.exception(f"Error processing Git info queue: {e}")
                 self.status_message = f"Git info error: {e}"

            # ‚îÄ‚îÄ 2. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            try:
                self.draw_screen()
            except Exception as e:
                logging.exception("Draw error")
                self.status_message = f"Draw error: {e}"

            # ‚îÄ‚îÄ 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            try:
                self.stdscr.keypad(True)
                key = self.stdscr.getch()          # –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
                self.handle_input(key)
            except KeyboardInterrupt:
                self.exit_editor()
            except Exception as e:
                logging.exception("Unhandled exception in main loop")
                self.status_message = f"Error: {e}"



def main(stdscr):
    """
    Initializes locale, stdout encoding, and handles command-line
    arguments before starting the main editor loop.
    """
    os.environ["LANG"] = "en_US.UTF-8"
    locale.setlocale(locale.LC_ALL, "")
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, errors="replace")
    editor = SwayEditor(stdscr)

    try:
        if len(sys.argv) > 1:
            editor.filename = sys.argv[1]
            editor.open_file()
    except Exception as e:
        logging.exception(f"Error opening file from command line: {e}")

    editor.run()


if __name__ == "__main__":
    config = load_config()
    print("Configuration loaded:")
    print(config)
    try:
        curses.wrapper(main)
    except Exception as e:
        logging.exception("Unhandled exception in main")
        print("An error occurred. See editor.log for details.")
        error_log_path = os.path.join(os.path.dirname(__file__), "error.log")
        with open(error_log_path, "a") as error_file:
            error_file.write(traceback.format_exc())

        print(f"Editor launch error: {e}")
        print(f"See {error_log_path} for details.")
        sys.exit(1)
