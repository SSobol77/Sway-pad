#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Sway-Pad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

import curses
import locale
import toml
import os
import re
import queue
import shlex
import sys
import time
import pyperclip
import logging
import chardet
import unicodedata
import codecs
import traceback
import subprocess
import tempfile
import threading
import termios
import curses.ascii

from pygments import lex
from pygments.lexer import RegexLexer
from pygments.lexers import get_lexer_by_name, guess_lexer, TextLexer
from pygments.token import Token, Comment, Name, Punctuation
from wcwidth import wcwidth, wcswidth
from typing import Callable, Dict, Optional, List, Any


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def _set_default_encoding():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Python 3.8 –∏ –≤—ã—à–µ."""
    # –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –ø–æ–º–æ–≥–∞—é—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
    # —Å UTF-8 –≤ —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å subprocess.
    os.environ.setdefault("PYTHONIOENCODING", "utf-8")
    os.environ.setdefault("PYTHONLEGACYWINDOWSSTDIO", "1") # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞ Windows

_set_default_encoding()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
def deep_merge(base: dict, override: dict) -> dict:
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å 'override' –≤ —Å–ª–æ–≤–∞—Ä—å 'base', –≤–æ–∑–≤—Ä–∞—â–∞—è –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å.
    """
    result = dict(base)
    for k, v in override.items():
        if (
            k in result
            and isinstance(result[k], dict)
            and isinstance(v, dict)
        ):
            result[k] = deep_merge(result[k], v)
        else:
            result[k] = v
    return result


# --- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ---------------------------------------
def safe_run(cmd: list[str], cwd: str | None = None, **kwargs) -> subprocess.CompletedProcess:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ subprocess"""
    return subprocess.run(
        cmd,
        cwd=cwd,
        capture_output=True,
        text=True,
        check=False,
        encoding='utf-8',
        errors='replace',
        **kwargs
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ñ–∞–π–ª–∞
def get_file_icon(filename: str, config: dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    if not filename:
        return config.get("file_icons", {}).get("text", "üìù") # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤

    file_lower = filename.lower()
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∫–æ–Ω–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è .get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    file_icons = config.get("file_icons", {})
    supported_formats = config.get("supported_formats", {})

    if not file_icons or not supported_formats:
        return "üìù" # Fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ supported_formats
    for key, extensions in supported_formats.items():
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º extensions –≤ –∫–æ—Ä—Ç–µ–∂ –¥–ª—è efficient endswith
        if isinstance(extensions, list):
             ext_tuple = tuple(f".{ext.lower()}" for ext in extensions)
             if file_lower.endswith(ext_tuple):
                 return file_icons.get(key, "üìù") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –∫–ª—é—á—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    return file_icons.get("text", "üìù")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Git (–≤–µ—Ç–∫–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤)
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ __init__, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è _fetch_git_info_async –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ.
def get_git_info(file_path: str) -> tuple[str, str, str]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    repo_dir = os.path.dirname(os.path.abspath(file_path)) if file_path and os.path.exists(file_path) else os.getcwd()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .git –±–µ–∑ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if not os.path.isdir(os.path.join(repo_dir, ".git")):
        logging.debug(f"No .git directory found in {repo_dir} for sync git info")
        return "", "", "0"

    branch = ""
    user_name = ""
    commits = "0"

    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É
        try:
            result_branch = subprocess.run(
                ["git", "branch", "--show-current"],
                capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace'
            )
            branch = result_branch.stdout.strip() if result_branch.returncode == 0 else ""
        except subprocess.CalledProcessError:
            # fallback: git symbolic-ref (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π git –∏–ª–∏ detached HEAD)
            try:
                 result_branch = subprocess.run(
                    ["git", "symbolic-ref", "--short", "HEAD"],
                    capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace'
                )
                 branch = result_branch.stdout.strip() if result_branch.returncode == 0 else ""
            except subprocess.CalledProcessError:
                branch = "main" # –î–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å

        # 2. –ì—Ä—è–∑–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ?
        try:
            result_dirty = subprocess.run(
                ["git", "status", "--short"],
                capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace'
            )
            if result_dirty.returncode == 0 and result_dirty.stdout.strip():
                branch += "*"
        except subprocess.CalledProcessError:
             logging.warning(f"Git status failed during sync info for {repo_dir}")
             pass # –ù–µ –∫—Ä–∞—à–∏–º—Å—è, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª

        # 3. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            result_user = subprocess.run(
                ["git", "config", "user.name"],
                capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace'
            )
            user_name = result_user.stdout.strip() if result_user.returncode == 0 else ""
        except subprocess.CalledProcessError:
             logging.warning(f"Git config user.name failed during sync info for {repo_dir}")
             user_name = ""

        # 4. –ö–æ–ª-–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
        try:
            result_commits = subprocess.run(
                ["git", "rev-list", "--count", "HEAD"],
                capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace'
            )
            commits = result_commits.stdout.strip() if result_commits.returncode == 0 else "0"
        except subprocess.CalledProcessError:
            logging.warning(f"Git rev-list --count HEAD failed during sync info for {repo_dir}")
            commits = "0" # –î–µ—Ñ–æ–ª—Ç

    except FileNotFoundError:
        logging.warning("Git executable not found during sync info")
        return "", "", "0"
    except Exception as e:
        logging.error(f"Unexpected error fetching sync git info for {repo_dir}: {e}")
        return "", "", "0"


    logging.debug(f"Fetched sync Git info: {(branch, user_name, commits)}")
    return branch, user_name, commits


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ 'config.toml', –∏—Å–ø–æ–ª—å–∑—É—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é,
    –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
    """
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ–∫—Ü–∏–∏ –∏ –∫–ª—é—á–∏
    minimal_default = {
        "colors": {
            "error": "red",
            "status": "bright_white", # curses.COLOR_WHITE + curses.A_BOLD –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
            "green": "green"          # –î–ª—è Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        },
        # Font Family –∏ Size –≤ curses –Ω–µ –Ω–∞–ø—Ä—è–º—É—é, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –¥–ª—è GUI
        "fonts": {"font_family": "monospace", "font_size": 12},
        "keybindings": {
            "delete": "del",
            "paste": "ctrl+v",
            "copy": "ctrl+c",
            "cut": "ctrl+x",
            "undo": "ctrl+z",
            "redo": "shift+z", 
            "lint": "f4",
            "new_file": "f2",       
            "open_file": "ctrl+o",
            "save_file": "ctrl+s",
            "save_as": "f5",         
            "select_all": "ctrl+a",
            "quit": "ctrl+q",
            "goto_line": "ctrl+g",   
            "git_menu": "f9",
            "cancel_operation": "esc",
            "find": "ctrl+f", 
            "find_next": "f3",
            "search_and_replace": "f6",
            "help": "f1"     
        },
        "editor": {
            "use_system_clipboard": True,
            "default_new_filename": "new_file.py",
            "tab_size": 4,           
            "use_spaces": True
        },
        "file_icons": { 
            "python": "üêç",
            "toml": "‚ùÑÔ∏è", # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è toml
            "javascript": "üìú", # js, mjs, cjs, jsx
            "typescript": "üìë", # ts, tsx
            "php": "üêò", # PHP —á–∞—Å—Ç–æ –∞—Å—Å–æ—Ü–∏–∏—Ä—É—é—Ç —Å–æ —Å–ª–æ–Ω–æ–º, üìë —É–∂–µ –∑–∞–Ω—è—Ç
            "ruby": "‚ô¶Ô∏è", # –ò–∫–æ–Ω–∫–∞ —Ä—É–±–∏–Ω–∞, ü™Ä - —ç—Ç–æ –π–æ-–π–æ
            "css": "üé®",  # css
            "html": "üåê",  # html, htm
            "json": "üìä",
            "yaml": "‚öôÔ∏è",  # yml, yaml
            "xml": "üì∞",   # üìë –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞–∑–µ—Ç—É –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            "markdown": "üìã", # md, markdown
            "text": "üìù",     # txt, log, rst (–¥–æ–±–∞–≤–∏–º rst —Å—é–¥–∞)
            "shell": "üí´",    # sh, bash, zsh, ksh, fish
            "dart": "üéØ",     # –î–∞—Ä—Ç—Å –¥–ª—è Dart, üì± –±–æ–ª—å—à–µ –¥–ª—è Kotlin/Swift
            "go": "üêπ",       # –¢–∞–ª–∏—Å–º–∞–Ω Go - —Å—É—Å–ª–∏–∫ (gopher)
            "c": "üá®",        # –§–ª–∞–≥ C (–ø—Ä–æ—Å—Ç–æ –±—É–∫–≤–∞ C)
            "cpp": "üá®‚ûï",     # C++
            "java": "‚òï",
            "julia": "üßÆ",
            "rust": "ü¶Ä",     # –¢–∞–ª–∏—Å–º–∞–Ω Rust - –∫—Ä–∞–± –§–µ—Ä—Ä–∏—Å
            "csharp": "‚ôØ",    # –°–∏–º–≤–æ–ª –¥–∏–µ–∑–∞
            "scala": "üíé",
            "r": "üìâ",
            "swift": "üê¶",     # –ü—Ç–∏—á–∫–∞ –¥–ª—è Swift
            "dockerfile": "üê≥",
            "terraform": "üõ†Ô∏è", # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Terraform, ‚öôÔ∏è —É–∂–µ –∑–∞–Ω—è—Ç
            "jenkins": "üßë‚Äç‚úàÔ∏è",   # –ü–∏–ª–æ—Ç –¥–ª—è Jenkins (—Å—Ç–∞—Ä—ã–π –ª–æ–≥–æ—Ç–∏–ø –±—ã–ª –¥–≤–æ—Ä–µ—Ü–∫–∏–π)
            "puppet": "üéé",    # –ö—É–∫–ª—ã –¥–ª—è Puppet
            "saltstack": "üßÇ", # –°–æ–ª–æ–Ω–∫–∞ –¥–ª—è SaltStack
            "git": "üîñ",      # –§–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Git (.gitignore, .gitattributes)
            "notebook": "üìí", # .ipynb
            "diff": "‚ÜîÔ∏è",     # –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è diff, üìº - –≤–∏–¥–µ–æ–∫–∞—Å—Å–µ—Ç–∞
            "makefile": "üõ†Ô∏è", # Makefile —Ç–æ–∂–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            "ini": "üî©",      # –ë–æ–ª—Ç –¥–ª—è ini, ‚öôÔ∏è –∑–∞–Ω—è—Ç
            "csv": "üìä",      # –ü–æ–≤—Ç–æ—Ä –¥–ª—è CSV, –º–æ–∂–Ω–æ üóÇÔ∏è (–∫–∞—Ä—Ç–æ—Ç–µ–∫–∞)
            "sql": "üíæ",      # –î–∏—Å–∫–µ—Ç–∞ –¥–ª—è SQL, üìä –∑–∞–Ω—è—Ç
            "graphql": "üìà",
            "kotlin": "üì±",
            "lua": "üåô",      # –õ—É–Ω–∞ –¥–ª—è Lua
            "perl": "üê™",      # –í–µ—Ä–±–ª—é–¥ –¥–ª—è Perl
            "powershell": "üíª", # PowerShell - –∫–æ–Ω—Å–æ–ª—å
            "nix": "‚ùÑÔ∏è",      # nix —Ñ–∞–π–ª—ã
            "image": "üñºÔ∏è",    # jpg, jpeg, png, gif, bmp, svg, webp
            "audio": "üéµ",    # mp3, wav, ogg, flac
            "video": "üéûÔ∏è",    # mp4, mkv, avi, mov, webm
            "archive": "üì¶",  # zip, tar, gz, rar, 7z
            "font": "üñãÔ∏è",     # ttf, otf, woff, woff2
            "binary": "‚öôÔ∏è",    # .exe, .dll, .so, .o, .bin, .app (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–æ—à–ª–æ –¥—Ä—É–≥–æ–µ)
            "document": "üìÑ",  # .doc, .docx, .odt, .pdf, .ppt, .pptx, .odp
            "folder": "üìÅ",   # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_file_icon, –Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
            "folder_open": "üìÇ", # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
            "default": "‚ùì"   # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        },
        "supported_formats": { 
            "python": ["py", "pyw", "pyc", "pyd"], # pyc/pyd - –±–∏–Ω–∞—Ä–Ω—ã–µ, –Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å python
            "toml": ["toml"],
            "javascript": ["js", "mjs", "cjs", "jsx"],
            "typescript": ["ts", "tsx", "mts", "cts"],
            "php": ["php", "php3", "php4", "php5", "phtml"],
            "ruby": ["rb", "rbw", "gemspec"],
            "css": ["css"],
            "html": ["html", "htm", "xhtml"],
            "json": ["json", "jsonc", "geojson", "webmanifest"],
            "yaml": ["yaml", "yml"],
            "xml": ["xml", "xsd", "xsl", "xslt", "plist", "rss", "atom", "csproj", "svg"], # SVG —Ç–æ–∂–µ XML
            "markdown": ["md", "markdown", "mdown", "mkd"],
            "text": ["txt", "log", "rst", "srt", "sub", "me", "readme"],
            "shell": ["sh", "bash", "zsh", "ksh", "fish", "command", "tool"],
            "dart": ["dart"],
            "go": ["go"],
            "c": ["c", "h"], # .h –º–æ–≥—É—Ç –±—ã—Ç—å –∏ –¥–ª—è C++
            "cpp": ["cpp", "cxx", "cc", "hpp", "hxx", "hh", "inl", "tpp"],
            "java": ["java", "jar", "class"], # class/jar - –±–∏–Ω–∞—Ä–Ω—ã–µ
            "julia": ["jl"],
            "rust": ["rs", "rlib"],
            "csharp": ["cs"],
            "scala": ["scala", "sc"],
            "r": ["r", "rds", "rda"],
            "swift": ["swift"],
            "dockerfile": ["dockerfile"], # –ò–º—è —Ñ–∞–π–ª–∞ —á–∞—Å—Ç–æ "Dockerfile" –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            "terraform": ["tf", "tfvars"],
            "jenkins": ["jenkinsfile", "groovy"], # Jenkinsfile —á–∞—Å—Ç–æ groovy
            "puppet": ["pp"],
            "saltstack": ["sls"],
            "git": ["gitignore", "gitattributes", "gitmodules", "gitkeep"], # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
            "notebook": ["ipynb"],
            "diff": ["diff", "patch"],
            "makefile": ["makefile", "mk", "mak"], # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
            "ini": ["ini", "cfg", "conf", "properties", "editorconfig"],
            "csv": ["csv", "tsv"], # tsv —Ç–æ–∂–µ —Ç–∞–±–ª–∏—á–Ω—ã–π
            "sql": ["sql"],
            "graphql": ["graphql", "gql"],
            "kotlin": ["kt", "kts"],
            "lua": ["lua"],
            "perl": ["pl", "pm", "t", "pod"],
            "powershell": ["ps1", "psm1", "psd1"],
            "nix": ["nix"],
            "image": ["jpg", "jpeg", "png", "gif", "bmp", "ico", "webp", "tiff", "tif", "heic", "heif"],
            "audio": ["mp3", "wav", "ogg", "flac", "aac", "m4a", "wma"],
            "video": ["mp4", "mkv", "avi", "mov", "webm", "flv", "wmv"],
            "archive": ["zip", "tar", "gz", "tgz", "bz2", "rar", "7z", "xz", "iso", "deb", "rpm", "pkg"],
            "font": ["ttf", "otf", "woff", "woff2", "eot"],
            "binary": ["exe", "dll", "so", "o", "bin", "app", "com", "msi", "dmg"],
            "document": ["doc", "docx", "odt", "rtf", "pdf", "ppt", "pptx", "odp", "xls", "xlsx", "ods", "epub", "mobi"]
            # 'folder' –∏ 'folder_open' –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ get_file_icon –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é,
            # –æ–Ω–∏ –±–æ–ª—å—à–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ.
        },
        "git": {
            "enabled": True # –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Git
        },
         "settings": {
            "auto_save_interval": 1, # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
            "show_git_info": True # –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
        }
    }

    config_path = "config.toml"
    user_config = {}

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥
    if os.path.exists(config_path):
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                file_content = f.read()
                user_config = toml.loads(file_content)
                logging.debug(f"Loaded user config from {config_path}")
        except FileNotFoundError:
            logging.warning(f"Config file '{config_path}' not found. Using minimal defaults.")
        except toml.TomlDecodeError as e:
            logging.error(f"TOML parse error in {config_path}: {str(e)}")
            logging.error("Falling back to minimal defaults.")
        except Exception as e:
            logging.error(f"Unexpected error reading {config_path}: {str(e)}")
            logging.error("Falling back to minimal defaults.")
    else:
        logging.warning(f"Config file '{config_path}' not found. Using minimal defaults.")


    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    # –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥—Å–ª–æ–≤–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final_config = deep_merge(minimal_default, user_config)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–µ–∫—Ü–∏–π (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –µ—Å–ª–∏ deep_merge –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö)
    for key, default_section in minimal_default.items():
        if key not in final_config:
            final_config[key] = default_section
        elif isinstance(default_section, dict): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –µ—Å—Ç—å
            for sub_key, sub_val in default_section.items():
                 if sub_key not in final_config[key]:
                      final_config[key][sub_key] = sub_val

    logging.debug("Final config loaded successfully")
    return final_config


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ------------------------------------------------
# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = "editor.log"
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
log_dir = os.path.dirname(log_file)
if log_dir and not os.path.exists(log_dir):
    try:
        os.makedirs(log_dir)
    except OSError as e:
        print(f"Error creating log directory {log_dir}: {e}", file=sys.stderr)
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é
        log_file = os.path.join(tempfile.gettempdir(), "sway2_editor.log")
        print(f"Logging to temporary file: {log_file}", file=sys.stderr)

logging.basicConfig(
    filename=log_file,
    level=logging.DEBUG, # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format="%(asctime)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)",
    force=True, # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
)

logger = logging.getLogger(__name__)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
KEY_LOGGER = logging.getLogger("sway2.keyevents")
KEY_LOGGER.propagate = False # –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
KEY_LOGGER.setLevel(logging.DEBUG)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∞–≤–∏—à –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
if os.environ.get("SWAY2_KEYTRACE", "").lower() in {"1", "true", "yes"}:
    try:
        from logging.handlers import RotatingFileHandler
        key_trace_file = "keytrace.log"
        key_trace_dir = os.path.dirname(key_trace_file)
        if key_trace_dir and not os.path.exists(key_trace_dir):
             os.makedirs(key_trace_dir)
        handler = RotatingFileHandler(key_trace_file, maxBytes=1_000_000, backupCount=3)
        handler.setFormatter(logging.Formatter("%(asctime)s - %(message)s")) # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        KEY_LOGGER.addHandler(handler)
        KEY_LOGGER.propagate = True # –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏
        KEY_LOGGER.info("Key tracing enabled.")
    except Exception as e:
        logging.error(f"Failed to set up key trace logging: {e}")
        KEY_LOGGER.disabled = True # –û—Ç–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
else:
    KEY_LOGGER.addHandler(logging.NullHandler()) # –ù–µ –ø–∏—Å–∞—Ç—å –Ω–∏–∫—É–¥–∞
    KEY_LOGGER.disabled = True


# --- –ö–ª–∞—Å—Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ --------------------------------------------------------
class SwayEditor:
    """The main class of the Sway-Pad editor."""
       
    def _set_status_message(self, 
                            message_for_statusbar: str, 
                            is_lint_status: bool = False, 
                            full_lint_output: Optional[str] = None,
                            activate_lint_panel_if_issues: bool = False):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. 
        –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ª–∏–Ω—Ç–µ—Ä–∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞.

        :param message_for_statusbar: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ.
        :param is_lint_status: True, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏–Ω—Ç–µ—Ä–∞.
        :param full_lint_output: –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ is_lint_status=True).
                                 –ï—Å–ª–∏ None –∏ is_lint_status=True, self.lint_panel_message –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è.
        :param activate_lint_panel_if_issues: –ï—Å–ª–∏ True –∏ is_lint_status=True, 
                                              –ø–∞–Ω–µ–ª—å –ª–∏–Ω—Ç–µ—Ä–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –µ—Å–ª–∏ full_lint_output 
                                              –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º".
        """
        if is_lint_status:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥
            if full_lint_output is not None:
                self.lint_panel_message = full_lint_output
                logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: '{str(full_lint_output)[:100]}...'")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ª–∏–Ω—Ç–µ—Ä–æ–º
            # –ï–≥–æ –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–Ω–∞—á–µ –∏–ª–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –º–µ—Å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –±—É–¥–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—Ç—å, —á—Ç–æ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –µ–≥–æ –∫–∞–∫-—Ç–æ —É—á—Ç–µ—Ç
            # (–Ω–∞–ø—Ä–∏–º–µ—Ä, _draw_status_bar() –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å self.current_lint_statusbar_message)
            # self.current_lint_statusbar_message = f"[LINT] {message_for_statusbar}" 
            # –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å, –∫–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            logging.debug(f"–°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–Ω—Ç–µ—Ä–∞: {message_for_statusbar}")
            # –ü–æ–º–µ—Å—Ç–∏–º –µ–≥–æ –≤ –æ–±—ã—á–Ω—É—é –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –æ–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, —á—Ç–æ–±—ã –≤–∏–∑—É–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å
            try:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–∞ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
                # self._msg_q.put_nowait(f"[–õ–∏–Ω—Ç–µ—Ä] {message_for_statusbar}")
                self._msg_q.put_nowait(str(message_for_statusbar)) # –ò–ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                if not hasattr(self, "_last_status_msg_sent"): self._last_status_msg_sent = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ—Ç
                self._last_status_msg_sent = message_for_statusbar # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            except queue.Full:
                logging.error("–û—á–µ—Ä–µ–¥—å —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–Ω—Ç–µ—Ä–∞).")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–Ω—Ç–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏ activate_lint_panel_if_issues=True
            # –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è "–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º"
            if activate_lint_panel_if_issues and self.lint_panel_message:
                # –ü—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ "–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º" - –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º
                no_issues_messages = [
                    "Flake8: –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º.", 
                    "Flake8: No issues found." # –î–æ–±–∞–≤–∏–º –∞–Ω–≥–ª. –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                ]
                if self.lint_panel_message.strip() not in no_issues_messages:
                    self.lint_panel_active = True
                    # self.show_lint_panel() # –ï—Å–ª–∏ show_lint_panel —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ—Ç —Ñ–ª–∞–≥, —Ç–æ —ç—Ç–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ.
                                          # –ï—Å–ª–∏ –æ–Ω –¥–µ–ª–∞–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç), —Ç–æ –Ω—É–∂–Ω–æ.
                    logging.debug("–ü–∞–Ω–µ–ª—å –ª–∏–Ω—Ç–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–±–ª–µ–º.")
                else:
                    # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç, –ø–∞–Ω–µ–ª—å –º–æ–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                    # self.lint_panel_active = False 
                    logging.debug("–ü—Ä–æ–±–ª–µ–º –ª–∏–Ω—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–∞–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è (–∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è).")
            elif self.lint_panel_message and not self.lint_panel_active and is_lint_status:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–Ω—Ç–µ—Ä–∞, –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ, –∏ –ø–∞–Ω–µ–ª—å –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞,
                # –Ω–æ activate_lint_panel_if_issues=False, —Ç–æ –ø–∞–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                # –≠—Ç–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –º—ã –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.
                pass

        else: # –û–±—ã—á–Ω–æ–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not hasattr(self, "_last_status_msg_sent"):
                self._last_status_msg_sent = None
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if message_for_statusbar == self._last_status_msg_sent:
                return 
            try:
                self._msg_q.put_nowait(str(message_for_statusbar))
                self._last_status_msg_sent = message_for_statusbar # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞—Ç—É—Å–∞: {message_for_statusbar}")
            except queue.Full:
                logging.error("–û—á–µ—Ä–µ–¥—å —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å—Ç–∞—Ç—É—Å–∞: {e}")


    def __init__(self, stdscr):
        """
        Initialize the editor. Called from curses.wrapper().
        """
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: –æ—Ç–∫–ª—é—á–∞–µ–º IXON/IXOFF –∏ canonical mode ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            fd = sys.stdin.fileno()
            termios_attrs = termios.tcgetattr(fd)
            termios_attrs[0] &= ~(termios.IXON | termios.IXOFF)  # –æ—Ç–∫–ª—é—á–∏—Ç—å Ctrl+S / Ctrl+Q (flow control)
            termios_attrs[3] &= ~termios.ICANON  # –æ—Ç–∫–ª—é—á–∏—Ç—å canonical mode
            termios.tcsetattr(fd, termios.TCSANOW, termios_attrs)
            logging.debug("IXON/IXOFF and ICANON disabled ‚Äì Ctrl+S/Q/Z now usable")
        except Exception as e:
            logging.warning("Couldn't set terminal attributes: %s", e)

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è curses ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.stdscr = stdscr
        self.stdscr.keypad(True)  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ø–µ—Ü.–∫–ª–∞–≤–∏—à
        curses.raw()              # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤–≤–æ–¥, –æ—Ç–∫–ª—é—á–∞–µ—Ç canonical mode
        curses.noecho()           # –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–≤–æ–¥
        curses.curs_set(1)        # –í–∏–¥–∏–º—ã–π –∫—É—Ä—Å–æ—Ä

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –±—É—Ñ–µ—Ä—ã (Load config first) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            self.config = load_config()
        except Exception as e:
            logging.error(f"Failed to load config: {e}. Using minimal defaults.")
            self.config = {
                "editor": {"use_system_clipboard": True, "tab_size": 4, "use_spaces": True},
                "keybindings": {},
                "git": {"enabled": True},
                "settings": {"auto_save_interval": 1, "show_git_info": True},
                "file_icons": {"text": "üìù"},
                "supported_formats": {}
            }

        self.colors: dict[str, int] = {}
        self.init_colors()

        self.use_system_clipboard = self.config.get("editor", {}).get("use_system_clipboard", True)
        self.pyclip_available = self._check_pyclip_availability()
        if not self.pyclip_available and self.use_system_clipboard:
            logging.warning("pyclip unavailable. System clipboard disabled.")
            self.use_system_clipboard = False
        self.internal_clipboard = ""

        self._auto_save_thread = None
        self._auto_save_enabled = False
        self._auto_save_interval = self.config.get("settings", {}).get("auto_save_interval", 1)
        if not isinstance(self._auto_save_interval, (int, float)) or self._auto_save_interval < 0:
            logging.warning(f"Invalid auto_save_interval config value: {self._auto_save_interval}. Using default 1 min.")
            self._auto_save_interval = 1

        self.insert_mode = True
        self.status_message = ""
        self._msg_q = queue.Queue()
        self.lint_panel_message = None   # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞
        self.lint_panel_active = False   # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞
        self.action_history = []
        self.undone_actions = []
        self._state_lock = threading.RLock()
        self._shell_cmd_q = queue.Queue()
        self._git_q = queue.Queue()
        self._git_cmd_q = queue.Queue()

        self.text = [""]
        self.cursor_x = 0
        self.cursor_y = 0
        self.scroll_top = 0
        self.scroll_left = 0
        self.modified = False
        self.encoding = "UTF-8"
        self.filename = None
        self.selection_start = None
        self.selection_end = None
        self.is_selecting = False

        self.search_term = ""
        self.search_matches = []
        self.current_match_idx = -1
        self.highlighted_matches = []

        self.git_info = ("", "", "0")
        self._last_git_filename = None
        self._lexer = None
        self._token_cache = {}

        self.visible_lines = 0
        self.last_window_size = (0, 0)
        self.drawer = DrawScreen(self)

        try:
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º _load_keybindings
            print(f"DEBUG: About to call _load_keybindings. self.parse_key exists: {hasattr(self, 'parse_key')}")
            if hasattr(self, 'parse_key'):
                print(f"DEBUG: self.parse_key is: {self.parse_key}")
            else:
                print(f"DEBUG: self.parse_key DOES NOT EXIST before _load_keybindings!")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã self, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å
                # print(f"DEBUG: dir(self) before _load_keybindings: {dir(self)}")


            self.keybindings = self._load_keybindings() # –°—Ç—Ä–æ–∫–∞ 452 –≤ –≤–∞—à–µ–º –ª–æ–≥–µ
            print("DEBUG: _load_keybindings called successfully.")

        except Exception as e_init_kb:
            print(f"CRITICAL DEBUG: Error during keybinding setup in __init__: {e_init_kb}")
            import traceback
            traceback.print_exc() # –ù–∞–ø–µ—á–∞—Ç–∞–µ—Ç traceback –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
            # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ curses –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
            # –∏–ª–∏ –µ—Å–ª–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–¥–∏–∏.
            raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å

        self.keybindings = self._load_keybindings()
        self.action_map = self._setup_action_map()

        self.set_initial_cursor_position()

        if self.config.get("git", {}).get("enabled", True):
            logging.debug("Git integration enabled, fetching initial sync info.")
            try:
                self.git_info = get_git_info(self.filename if self.filename else os.getcwd())
                logging.debug(f"Initial sync git info fetched: {self.git_info}")
            except Exception as e:
                self.git_info = ("", "", "0")
                logging.error(f"Failed to get initial sync Git info during init: {e}")
        else:
            self.git_info = ("", "", "0")
            logging.debug("Git integration disabled, git_info set to default.")

        try:
            locale.setlocale(locale.LC_ALL, "")
            logging.debug(f"Locale set to {locale.getlocale()}")
        except locale.Error as e:
            logging.error(f"Failed to set locale: {e}. May affect character width and encoding.")

        logging.info("SwayEditor initialized successfully")


    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _load_keybindings(self) -> dict[str, int | str]: # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ dict[str, int] —Ç–µ–ø–µ—Ä—å
        """
        –ß–∏—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª [keybindings] –∏–∑ config.toml –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç
        —Å–ª–æ–≤–∞—Ä—å {action: key_code}.
        """
        defaults = {
            "delete":        "del",
            "paste":         "ctrl+v",
            "copy":          "ctrl+c",
            "cut":           "ctrl+x",
            "undo":          "ctrl+z",
            "redo":          "shift+z",
            "new_file":      "f2",
            "open_file":     "ctrl+o",
            "save_file":     "ctrl+s",
            "save_as":       "f5",
            "select_all":    "ctrl+a",
            "quit":          "ctrl+q", # Ctrl+Q –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º (XOFF)
            "goto_line":     "ctrl+g",
            "git_menu":      "f9",
            "help":          "f1",
            "find":          "ctrl+f",
            "find_next":     "f3",
            "search_and_replace": "f6",
            "cancel_operation": "esc",
            "tab":           "tab",
            "shift_tab":     "shift+tab",  # –î–ª—è Shift+Tab (unindent)
            "lint":          "f4", # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ show_lint_panel, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ 'lint'
            "comment_selected_lines": "ctrl+/",    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            "uncomment_selected_lines": "shift+/", # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        }
        cfg = self.config.get("keybindings", {})
        kb: dict[str, int] = {}

        for action, def_key_str in defaults.items():
            key_str_config = cfg.get(action, def_key_str)

            if not key_str_config:
                logging.debug(f"–ü—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è '{action}' –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                continue
            
            try:
                # _decode_keystring –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –ø–∞—Ä—Å–∏—Ç—å "ctrl+/" –∏ "shift+/"
                # –î–ª—è "shift+/" —ç—Ç–æ –±—É–¥–µ—Ç ord('/') –µ—Å–ª–∏ Shift –Ω–µ –º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª,
                # –∏–ª–∏ ord('?') –µ—Å–ª–∏ Shift+/ –¥–∞–µ—Ç '?'.
                # –ï—Å–ª–∏ Shift+/ –¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, _decode_keystring –¥–æ–ª–∂–µ–Ω –µ–≥–æ –∑–Ω–∞—Ç—å.
                code = self._decode_keystring(key_str_config) 
                kb[action] = code
            except ValueError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–≤–∏—à–∏ [{action}]={key_str_config!r}: {e}")

        logging.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ/–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ (–¥–µ–π—Å—Ç–≤–∏–µ -> –∫–æ–¥): {kb}")
        return kb


    def _decode_keystring(self, key_str_config: str) -> int:
        if isinstance(key_str_config, int): 
            return key_str_config

        s_orig = key_str_config 
        key_str_lower = key_str_config.strip().lower() 
        
        if not key_str_lower:
            raise ValueError("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏")

        named_keys: dict[str, int] = {
            'f1': curses.KEY_F1,  'f2': curses.KEY_F2,  'f3': curses.KEY_F3,
            'f4': getattr(curses, 'KEY_F4', 268),  'f5': getattr(curses, 'KEY_F5', 269),  'f6': getattr(curses, 'KEY_F6', 270),
            'f7': getattr(curses, 'KEY_F7', 271),  'f8': getattr(curses, 'KEY_F8', 272),  'f9': getattr(curses, 'KEY_F9', 273),
            'f10': getattr(curses, 'KEY_F10', 274),'f11': getattr(curses, 'KEY_F11', 275),'f12': getattr(curses, 'KEY_F12', 276),
            'left': curses.KEY_LEFT,   'right': curses.KEY_RIGHT,
            'up': curses.KEY_UP,       'down': curses.KEY_DOWN,
            'home': curses.KEY_HOME,   'end': getattr(curses, 'KEY_END', 360), # –ú–æ–∂–µ—Ç –±—ã—Ç—å KEY_LL
            'pageup': curses.KEY_PPAGE,  'pgup': curses.KEY_PPAGE,
            'pagedown': curses.KEY_NPAGE, 'pgdn': curses.KEY_NPAGE,
            'delete': curses.KEY_DC,   'del': curses.KEY_DC,
            'backspace': curses.KEY_BACKSPACE, # –û–±—ã—á–Ω–æ 263 –≤ keypad(True)
            'insert': getattr(curses, 'KEY_IC', 331), # KEY_IC Insert Char
            'tab': ord('\t'), # curses.KEY_TAB (–æ–±—ã—á–Ω–æ 9)
            'enter': curses.KEY_ENTER, # –û–±—ã—á–Ω–æ 10, –Ω–æ KEY_ENTER –±–æ–ª–µ–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
            'return': curses.KEY_ENTER,
            'space': ord(' '),
            'esc': 27, # curses.KEY_EXIT –∏–ª–∏ 27
            'escape': 27,
            'shift+left': curses.KEY_SLEFT,
            'shift+right': curses.KEY_SRIGHT,
            'shift+up': getattr(curses, 'KEY_SR', 337), # Shift+Up (KEY_SPREVIOUS –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö)
            'shift+down': getattr(curses, 'KEY_SF', 336), # Shift+Down (KEY_SNEXT –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö)
            'shift+home': curses.KEY_SHOME,
            'shift+end': curses.KEY_SEND,
            'shift+pgup': getattr(curses, 'KEY_SPREVIOUS', 337), 
            'shift+pgdn': getattr(curses, 'KEY_SNEXT', 336),    
            'shift+tab': getattr(curses, 'KEY_BTAB', 353), # Back Tab (Shift+Tab)
            # –°–ª–µ—à –∫–∞–∫ –±–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏—à–∞
            '/': ord('/'), 
            # –ï—Å–ª–∏ Shift+/ –¥–∞–µ—Ç –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä '?', –µ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
            '?': ord('?'),
        }

        if key_str_lower in named_keys:
            return named_keys[key_str_lower]

        parts = key_str_lower.split('+')
        base_key_str = parts[-1]    
        modifiers = set(parts[:-1]) 

        base_code: int
        if base_key_str in named_keys: 
            base_code = named_keys[base_key_str]
        elif len(base_key_str) == 1:   
            # –ï—Å–ª–∏ –µ—Å—Ç—å Shift –∏ —ç—Ç–æ –±—É–∫–≤–∞, —Ç–æ –±–µ—Ä–µ–º ord() –æ—Ç –ó–ê–ì–õ–ê–í–ù–û–ô –±—É–∫–≤—ã
            if "shift" in modifiers and 'a' <= base_key_str <= 'z':
                base_code = ord(base_key_str.upper()) 
                modifiers.remove("shift") # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä Shift —É–∂–µ —É—á—Ç–µ–Ω

            else:
                base_code = ord(base_key_str) 
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏—à–∞ '{base_key_str}' –≤ '{s_orig}'")

        if "ctrl" in modifiers:
            if 'a' <= chr(base_code).lower() <= 'z':
                char_val_for_ctrl = ord(chr(base_code).lower())
                final_code = char_val_for_ctrl - ord('a') + 1
                if "shift" in parts[:-1]: 
                    base_code = final_code | 0x100 
                else:
                    base_code = final_code
            elif base_code == ord('/'): # –î–ª—è Ctrl+/
                pass # base_code —É–∂–µ ord('/')

        # –ï—Å–ª–∏ —ç—Ç–æ "shift+/" –∏ –Ω–µ Ctrl
        elif "shift" in modifiers and base_code == ord('/'):
            pass # base_code –æ—Å—Ç–∞–µ—Ç—Å—è ord('/')

        if "alt" in modifiers:
            base_code |= 0x200 
            logging.debug(f"–ü—Ä–∏–º–µ–Ω–µ–Ω Alt-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ '{s_orig}', —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–¥–∞: {base_code}")

        return base_code

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _setup_action_map(self) -> dict[int, Callable[..., Any]]:
        action_method_map: dict[str, Callable] = {
            "open_file":  self.open_file,
            "save_file":  self.save_file,
            "save_as":    self.save_file_as,
            "new_file":   self.new_file,
            "git_menu":   self.integrate_git,
            "copy": self.copy,
            "cut":  self.cut,
            "paste": self.paste,
            "undo": self.undo,
            "redo": self.redo,
            "handle_home":     self.handle_home,
            "handle_end":      self.handle_end,
            "show_lint_panel": self.show_lint_panel, 
            "extend_selection_right": self.extend_selection_right,
            "extend_selection_left":  self.extend_selection_left,
            "select_to_home": self.select_to_home,
            "select_to_end":  self.select_to_end,
            "extend_selection_up":   self.extend_selection_up,
            "extend_selection_down": self.extend_selection_down,
            "find": self.find_prompt,
            "find_next": self.find_next,
            "search_and_replace": self.search_and_replace,
            "goto_line": self.goto_line,
            "help": self.show_help,
            "cancel_operation": self.cancel_operation,
            "select_all": self.select_all,
            "delete": self.handle_delete,
            "quit": self.exit_editor,
            "tab": self.handle_smart_tab,
            "shift_tab": self.handle_smart_unindent,
            "lint": self.run_lint_async, 
            "comment_selected_lines": self.do_comment_block,   # –°–≤—è–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ—Ç–æ–¥–æ–º
            "uncomment_selected_lines": self.do_uncomment_block, # –°–≤—è–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ—Ç–æ–¥–æ–º
        }

        final_map: dict[int, Callable] = {}

        for action_name, key_code_from_kb in self.keybindings.items(): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            method = action_method_map.get(action_name)
            if method:
                if key_code_from_kb is not None:
                    if key_code_from_kb in final_map and final_map[key_code_from_kb] != method:
                        logging.warning(
                            f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–≤–∏—à! –ö–æ–¥ {key_code_from_kb} –¥–ª—è '{action_name}' "
                            f"(–º–µ—Ç–æ–¥ {method.__name__}) —É–∂–µ –∑–∞–Ω—è—Ç –º–µ—Ç–æ–¥–æ–º "
                            f"{final_map[key_code_from_kb].__name__}. "
                            f"–ü—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è '{action_name}' –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞." # –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        )
                    final_map[key_code_from_kb] = method
                    logging.debug(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: –î–µ–π—Å—Ç–≤–∏–µ '{action_name}' (–∫–æ–¥ {key_code_from_kb}) -> –ú–µ—Ç–æ–¥ {method.__name__}")
            else:
                logging.warning(f"–î–µ–π—Å—Ç–≤–∏–µ '{action_name}' –∏–∑ keybindings –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ action_method_map.")
        
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ ¬´–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é¬ª curses-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        builtin_key_to_method: dict[int, Callable] = {
            curses.KEY_UP:      self.handle_up,
            curses.KEY_DOWN:    self.handle_down,
            curses.KEY_LEFT:    self.handle_left,
            curses.KEY_RIGHT:   self.handle_right,
            curses.KEY_PPAGE:   self.handle_page_up,
            curses.KEY_NPAGE:   self.handle_page_down,
            curses.KEY_BACKSPACE: self.handle_backspace, 
            # curses.KEY_DC: self.handle_delete, # –£–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ self.keybindings['delete']
            curses.KEY_ENTER:   self.handle_enter,
            10:                 self.handle_enter,  # \n
            13:                 self.handle_enter,  # \r
            curses.KEY_SLEFT:   self.extend_selection_left,
            curses.KEY_SRIGHT:  self.extend_selection_right,
            getattr(curses, 'KEY_SR', 337): self.extend_selection_up, 
            getattr(curses, 'KEY_SF', 336): self.extend_selection_down,
            curses.KEY_SHOME:   self.select_to_home,
            curses.KEY_SEND:    self.select_to_end,
            # 27: self.cancel_operation, # –£–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ self.keybindings['cancel_operation']
            getattr(curses, 'KEY_IC', 331): self.toggle_insert_mode,
            curses.KEY_RESIZE:  self.handle_resize,
            # getattr(curses, 'KEY_BTAB', 353): self.handle_smart_unindent, # –£–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ self.keybindings['shift_tab']
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º F4 –¥–ª—è lint, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ –¥–µ–π—Å—Ç–≤–∏–µ lint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        f4_code = getattr(curses, 'KEY_F4', 268)
        if f4_code not in final_map and "lint" in action_method_map:
             final_map.setdefault(f4_code, action_method_map["lint"])
        elif f4_code not in final_map and "show_lint_panel" in action_method_map: # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
             final_map.setdefault(f4_code, action_method_map["show_lint_panel"])

        for code, method in builtin_key_to_method.items():
            final_map.setdefault(code, method)

        logging.debug(f"–ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π (–ö–æ–¥ -> –ú–µ—Ç–æ–¥): { {k: v.__name__ for k,v in final_map.items()} }")
        return final_map
    
 
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def get_line_comment_prefix(self) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å —Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞.
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ª–µ–∫—Å–µ—Ä–∞ Pygments, –∑–∞—Ç–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –∞–ª—å—è—Å–∞–º –ª–µ–∫—Å–µ—Ä–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ —è–∑—ã–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
        """
        if self._lexer is None:
            self.detect_language()

        if not self._lexer:
            logging.warning("get_line_comment_prefix: Lexer is not defined.")
            return None

        lexer_instance = self._lexer # self._lexer - —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–µ–∫—Å–µ—Ä–∞
        lexer_name = lexer_instance.name.lower() # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –ª–µ–∫—Å–µ—Ä–∞
        lexer_aliases = [alias.lower() for alias in lexer_instance.aliases] # –ê–ª—å—è–Ω—Å—ã –ª–µ–∫—Å–µ—Ä–∞
        
        logging.debug(f"get_line_comment_prefix: Determining for lexer '{lexer_name}', aliases: {lexer_aliases}")

        # 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ (—Ä–µ–¥–∫–æ, –Ω–æ –±—ã–≤–∞–µ—Ç)
        #    –≠—Ç–æ—Ç –∞—Ç—Ä–∏–±—É—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö –ª–µ–∫—Å–µ—Ä–æ–≤ Pygments.
        if hasattr(lexer_instance, 'comment_single_prefix'): # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –µ—Å—Ç—å
            prefix = getattr(lexer_instance, 'comment_single_prefix', None)
            if isinstance(prefix, str) and prefix:
                logging.info(f"Using comment prefix '{prefix}' from lexer attribute 'comment_single_prefix' for '{lexer_name}'")
                return prefix

        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –ª–µ–∫—Å–µ—Ä–∞ (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π, –Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –ø—É—Ç—å)
        #    –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∞–≤–∏–ª –ª–µ–∫—Å–µ—Ä–∞.
        #    –ú–Ω–æ–≥–∏–µ –ª–µ–∫—Å–µ—Ä—ã –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç RegexLexer.
        #    –ò—â–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è Comment.Single –∏–ª–∏ Comment.Line.
        #    –≠—Ç–æ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –ø–æ–¥—Ö–æ–¥ –∏ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –ª–µ–∫—Å–µ—Ä–æ–≤.
        if isinstance(lexer_instance, RegexLexer):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–∫–µ–Ω–æ–≤, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                for state_name in ['root', 'comment', 'comments']: # –û–±—â–∏–µ –∏–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
                    if state_name in lexer_instance.tokens:
                        rules = lexer_instance.tokens[state_name]
                        for rule in rules:
                            # –ü—Ä–∞–≤–∏–ª–æ —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂: (regex, token_type, new_state) –∏–ª–∏ (regex, token_type)
                            # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç token_type == Comment.Single –∏–ª–∏ Comment.Line
                            if len(rule) >= 2 and rule[1] in (Comment.Single, Comment.Line):
                                regex_pattern = rule[0]
                                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
                                # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω regex.
                                # –ü—Ä–∏–º–µ—Ä: r'#.*$' -> '#', r'//.*$' -> '//'
                                # –≠—Ç–æ –æ—á–µ–Ω—å —Ö—Ä—É–ø–∫–æ!
                                if isinstance(regex_pattern, str):
                                    if regex_pattern.startswith('#') and regex_pattern.endswith(('.*$', '.*?\n', '.*')):
                                        logging.info(f"Deduced comment prefix '# ' from lexer token rule for '{lexer_name}'")
                                        return "# "
                                    if regex_pattern.startswith('//') and regex_pattern.endswith(('.*$', '.*?\n', '.*')):
                                        logging.info(f"Deduced comment prefix '// ' from lexer token rule for '{lexer_name}'")
                                        return "// "
                                    if regex_pattern.startswith('--') and regex_pattern.endswith(('.*$', '.*?\n', '.*')):
                                        logging.info(f"Deduced comment prefix '-- ' from lexer token rule for '{lexer_name}'")
                                        return "-- "
                                    # ... –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ ...
            except Exception as e:
                logging.debug(f"Error trying to deduce comment prefix from lexer tokens for '{lexer_name}': {e}")
                pass # –ù–µ —É–¥–∞–ª–æ—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ –∞–ª—å—è—Å–∞–º

        # 3. –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–ª—å—è—Å–æ–≤ –ª–µ–∫—Å–µ—Ä–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π fallback)
        #    –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏.
        all_names_to_check = set([lexer_name] + lexer_aliases)

        # –Ø–∑—ã–∫–∏ —Å "#"
        hash_comment_langs = {'python', 'py', 'sage', 'cython', 
                              'ruby', 'rb', 'perl', 'pl', 
                              'bash', 'sh', 'zsh', 'ksh', 'fish', 'shell', 'ash',
                              'makefile', 'dockerfile', 'conf', 'cfg', 'ini', # ini/conf —á–∞—Å—Ç–æ # –∏–ª–∏ ;
                              'r', 'yaml', 'yml', 'toml', 
                              'gdscript', 'nim', 'julia', 'jl', 'cmake',
                              'tcl', 'awk', 'sed', 'powershell', 'ps1',
                              'gitconfig', 'gitignore', 'gitattributes', # Git-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
                              'sls', # SaltStack
                              'pp', # Puppet
                              'tf', 'tfvars' # Terraform
                             }
        if not all_names_to_check.isdisjoint(hash_comment_langs):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (—Ç.–µ. —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ all_names_to_check –µ—Å—Ç—å –≤ hash_comment_langs)
            # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è INI/CONF - –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ ;
            if 'ini' in all_names_to_check or 'conf' in all_names_to_check:
                 # –ï—Å–ª–∏ —ç—Ç–æ INI/CONF, ; –±–æ–ª–µ–µ –∫–∞–Ω–æ–Ω–∏—á–µ–Ω, –Ω–æ # —Ç–æ–∂–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è.
                 # –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ –¥–ª—è INI/CONF –æ—Ç–¥–∞–¥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ';', –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –Ω–∏–∂–µ.
                 # –ï—Å–ª–∏ –¥–æ–π–¥–µ–º –¥–æ—Å—é–¥–∞, —Ç–æ '# '
                 logging.info(f"Using comment prefix '# ' for lexer '{lexer_name}' (matched in hash_comment_langs, possibly ini/conf)")
                 return "# " # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è ini/conf
            logging.info(f"Using comment prefix '# ' for lexer '{lexer_name}' (matched in hash_comment_langs)")
            return "# "

        # –Ø–∑—ã–∫–∏ —Å "//"
        slash_comment_langs = {'javascript', 'js', 'jsx', 'jsonc', # JSONC (JSON with comments)
                               'typescript', 'ts', 'tsx', 
                               'java', 'kotlin', 'kt', 
                               'c', 'cpp', 'cxx', 'cc', 'objective-c', 'objc', 'objective-c++', 'objcpp',
                               'c#', 'csharp', 'cs', 
                               'go', 'golang', 'swift', 'dart', 'rust', 'rs', 'scala', 
                               'groovy', 'haxe', 'pascal', 'objectpascal', 'delphi', 
                               'php', # PHP —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç #, –Ω–æ // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –¥–ª—è —Å—Ç—Ä–æ—á–Ω—ã—Ö
                               'glsl', 'hlsl', 'shader', 
                               'd', 'vala', 'ceylon', 'crystal', 'chapel',
                               'processing'
                              }
        if not all_names_to_check.isdisjoint(slash_comment_langs):
            logging.info(f"Using comment prefix '// ' for lexer '{lexer_name}' (matched in slash_comment_langs)")
            return "// "
        
        # –Ø–∑—ã–∫–∏ —Å "--"
        double_dash_comment_langs = {'sql', 'plpgsql', 'tsql', 'mysql', 'postgresql', 'sqlite',
                                     'lua', 'haskell', 'hs', 'ada', 'vhdl', 'elm'}
        if not all_names_to_check.isdisjoint(double_dash_comment_langs):
            logging.info(f"Using comment prefix '-- ' for lexer '{lexer_name}' (matched in double_dash_comment_langs)")
            return "-- "
            
        # –Ø–∑—ã–∫–∏ —Å "%"
        percent_comment_langs = {'erlang', 'erl', 'prolog', 'plg', 'latex', 'tex', 
                                 'matlab', 'octave', 'scilab', 'postscript'}
        if not all_names_to_check.isdisjoint(percent_comment_langs):
            logging.info(f"Using comment prefix '% ' for lexer '{lexer_name}' (matched in percent_comment_langs)")
            return "% "

        # –Ø–∑—ã–∫–∏ —Å ";"
        semicolon_comment_langs = {'clojure', 'clj', 'lisp', 'common-lisp', 'elisp', 'emacs-lisp', 
                                   'scheme', 'scm', 'racket', 'rkt', 
                                   'autolisp', 'asm', 'nasm', 'masm', 'nix', # NixOS configuration
                                   'ini', 'properties', 'desktop' # .desktop files, .properties —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ; –∏–ª–∏ #
                                  } 
        if not all_names_to_check.isdisjoint(semicolon_comment_langs):
            logging.info(f"Using comment prefix '; ' for lexer '{lexer_name}' (matched in semicolon_comment_langs)")
            return "; " # –î–ª—è INI/properties —ç—Ç–æ –±–æ–ª–µ–µ –∫–∞–Ω–æ–Ω–∏—á–Ω–æ, —á–µ–º #
            
        # –Ø–∑—ã–∫–∏ —Å "!" (Fortran)
        exclamation_comment_langs = {'fortran', 'f90', 'f95', 'f03', 'f08', 'f', 'for'}
        if not all_names_to_check.isdisjoint(exclamation_comment_langs):
            logging.info(f"Using comment prefix '! ' for lexer '{lexer_name}' (matched in exclamation_comment_langs)")
            return "! "

        # –Ø–∑—ã–∫–∏ —Å "REM" –∏–ª–∏ "'" (Basic-–ø–æ–¥–æ–±–Ω—ã–µ)
        rem_comment_langs = {'vb.net', 'vbnet', 'vbs', 'vbscript', 'basic', 'qbasic', 'freebasic', 'visual basic'}
        if not all_names_to_check.isdisjoint(rem_comment_langs):
            # VB.Net –∏ VBScript –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞—Ä–Ω—É—é –∫–∞–≤—ã—á–∫—É '
            # –°—Ç–∞—Ä—ã–π BASIC –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å REM
            logging.info(f"Using comment prefix '\' ' for lexer '{lexer_name}' (matched in rem_comment_langs)")
            return "' " 
            
        # –Ø–∑—ã–∫–∏, –≥–¥–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç–∏–ø–∏—á–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–ª–æ—á–Ω—ã–µ
        block_comment_only_langs = {'html', 'htm', 'xhtml', 'xml', 'xsd', 'xsl', 'xslt', 'plist', 'rss', 'atom', 'svg', 'vue', 'django', 'jinja', 'jinja2',
                                    'css', 'scss', 'less', 'sass', # Sass (SCSS —Å–∏–Ω—Ç–∞–∫—Å–∏—Å) –º–æ–∂–µ—Ç //, –Ω–æ —á–∏—Å—Ç—ã–π Sass –Ω–µ—Ç.
                                    'json', # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                                    'markdown', 'md', 'rst', 
                                    'text', 'txt', 'plaintext', 'log',
                                    'bibtex', 'bib',
                                    'diff', 'patch'
                                   }
        if not all_names_to_check.isdisjoint(block_comment_only_langs):
            logging.info(f"Line comments are not typical or well-defined for lexer '{lexer_name}' (matched in block_comment_only_langs). Returning None.")
            return None
            
        # –ï—Å–ª–∏ —ç—Ç–æ TextLexer, —Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç
        if isinstance(lexer_instance, TextLexer):
            logging.info(f"Lexer is TextLexer ('{lexer_name}'), no line comments. Returning None.")
            return None

        # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
        logging.warning(f"get_line_comment_prefix: No line comment prefix rule found for lexer '{lexer_name}' (aliases: {lexer_aliases}). Returning None.")
        return None


    def _determine_lines_to_toggle_comment(self) -> Optional[tuple[int, int]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if self.is_selecting and self.selection_start and self.selection_end:
            norm_range = self._get_normalized_selection_range()
            if not norm_range: return None
            start_coords, end_coords = norm_range
            
            start_y = start_coords[0]
            end_y = end_coords[0]
            
            if end_coords[1] == 0 and end_y > start_y:
                end_y -=1 # –ù–µ –≤–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –Ω—É–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

            return start_y, end_y
        else:
            return self.cursor_y, self.cursor_y

#-–û–¥–Ω–∞ –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+/) –¥–ª—è –æ–±–µ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. 
# –†–µ–¥–∞–∫—Ç–æ—Ä —Å–∞–º —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å. –≠—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–æ –≤–æ –º–Ω–æ–≥–∏—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö IDE (VS Code, JetBrains IDEs –∏ —Ç.–¥.):
# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º do_comment_block(self) –∏ do_uncomment_block(self) - –Ø–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
    def toggle_comment_block(self):
            """
            –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∏–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å—Ç—Ä–æ–∫ –∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É.
            –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ (–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
            """
            comment_prefix = self.get_line_comment_prefix()
            if not comment_prefix:
                self._set_status_message("Line comments not supported for this language.")
                return

            line_range = self._determine_lines_to_toggle_comment()
            if line_range is None:
                self._set_status_message("No lines selected to comment/uncomment.")
                return
            
            start_y, end_y = line_range

            with self._state_lock:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.
                # –ï—Å–ª–∏ –•–û–¢–Ø –ë–´ –û–î–ù–ê —Å—Ç—Ä–æ–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ù–ï –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ (–∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º),
                # —Ç–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –í–ï–°–¨ –±–ª–æ–∫.
                # –ò–Ω–∞—á–µ (–í–°–ï —Å—Ç—Ä–æ–∫–∏ –£–ñ–ï –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –≠–¢–ò–ú –ø—Ä–µ—Ñ–∏–∫—Å–æ–º), —Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –í–ï–°–¨ –±–ª–æ–∫.
                
                all_lines_are_commented_with_this_prefix = True
                non_empty_lines_exist = False

                for y in range(start_y, end_y + 1):
                    if y >= len(self.text): continue
                    line = self.text[y]
                    if line.strip(): # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è (–Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã)
                        non_empty_lines_exist = True
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ù–ï–ü–£–°–¢–ê–Ø —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Å—Ç—É–ø–∞ + –ø—Ä–µ—Ñ–∏–∫—Å–∞
                        stripped_line = line.lstrip()
                        if not stripped_line.startswith(comment_prefix.strip()): # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤–æ–∫—Ä—É–≥ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                            all_lines_are_commented_with_this_prefix = False
                            break 
                    # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ "–≤—Å–µ –ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã",
                    # –Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å –ø—Ä–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏).

                if not non_empty_lines_exist and (end_y > start_y or not self.text[start_y].strip()):
                    # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤,
                    # –∏–ª–∏ –µ—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∞ –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º.
                    action_to_perform = "comment"
                elif all_lines_are_commented_with_this_prefix:
                    action_to_perform = "uncomment"
                else:
                    action_to_perform = "comment"

                logging.debug(f"Toggle comment: Action decided: {action_to_perform} for lines {start_y}-{end_y}")

                if action_to_perform == "comment":
                    self.comment_lines(start_y, end_y, comment_prefix)
                else: # "uncomment"
                    self.uncomment_lines(start_y, end_y, comment_prefix)


#   def toggle_comment_block(self): podobny
    def do_comment_block(self):
        """–í—Å–µ–≥–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É."""
        comment_prefix = self.get_line_comment_prefix()
        if not comment_prefix:
            self._set_status_message("Line comments not supported for this language.")
            return

        line_range = self._determine_lines_to_toggle_comment()
        if line_range is None:
            self._set_status_message("No lines selected to comment.")
            return
        
        start_y, end_y = line_range
        logging.debug(f"do_comment_block: Commenting lines {start_y}-{end_y}")
        self.comment_lines(start_y, end_y, comment_prefix)

    def do_uncomment_block(self):
        """–í—Å–µ–≥–¥–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É."""
        comment_prefix = self.get_line_comment_prefix()
        if not comment_prefix:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è,
            # —Ç–æ –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∂–µ. do_comment_block —É–∂–µ –ø–æ–∫–∞–∂–µ—Ç.
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è —è–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Shift+/
            self._set_status_message("Line comments not supported for this language (for uncomment).")
            return

        line_range = self._determine_lines_to_toggle_comment()
        if line_range is None:
            self._set_status_message("No lines selected to uncomment.")
            return
        
        start_y, end_y = line_range
        logging.debug(f"do_uncomment_block: Uncommenting lines {start_y}-{end_y}")
        self.uncomment_lines(start_y, end_y, comment_prefix)


    #  comment_lines, uncomment_lines, undo, redo –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ.
    def comment_lines(self, start_y: int, end_y: int, comment_prefix: str):
        with self._state_lock: 
            original_texts = {} 
            min_indent = float('inf')
            non_empty_lines_in_block_indices = []

            for y in range(start_y, end_y + 1):
                if y >= len(self.text): continue
                line = self.text[y]
                if line.strip(): 
                    non_empty_lines_in_block_indices.append(y)
                    indent_len = len(line) - len(line.lstrip())
                    min_indent = min(min_indent, indent_len)
            
            if not non_empty_lines_in_block_indices: 
                min_indent = 0 

            changes_for_undo = []
            selection_before_op = (self.is_selecting, self.selection_start, self.selection_end) if self.is_selecting else None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
            cursor_before_op_no_selection = (self.cursor_y, self.cursor_x) if not self.is_selecting else None


            new_selection_start_x_offset = len(comment_prefix)
            new_selection_end_x_offset = len(comment_prefix)


            for y in range(start_y, end_y + 1):
                if y >= len(self.text): continue
                
                original_texts[y] = self.text[y] 
                line_content = self.text[y]
                current_line_is_empty_or_whitespace = not line_content.strip()
                
                insert_pos = 0
                if current_line_is_empty_or_whitespace:
                    # –î–ª—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
                    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—É—Å—Ç–∞—è.
                    insert_pos = len(line_content) - len(line_content.lstrip(' ')) # –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—Ä–æ–±–µ–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–∏–ª–∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏)
                else: 
                    insert_pos = min_indent

                self.text[y] = line_content[:insert_pos] + comment_prefix + line_content[insert_pos:]
                changes_for_undo.append({
                    "line_index": y, 
                    "original_text": original_texts[y], 
                    "new_text": self.text[y]
                })

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∫—É—Ä—Å–æ—Ä–∞
            if self.is_selecting and self.selection_start and self.selection_end:
                s_y, s_x = self.selection_start
                e_y, e_x = self.selection_end
                
                # –°–¥–≤–∏–≥–∞–µ–º x –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è. –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –ø—É—Å—Ç–æ–π –∏ —Å—Ç–∞–ª–∞ "# ", x –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è —Å–∏–ª—å–Ω–æ.
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–ª–∞ –æ—Ç—Å—Ç—É–ø min_indent, —Ç–æ x —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ len(comment_prefix).
                # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ. –¢–æ—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–∞.
                # –ü–æ–∫–∞ —á—Ç–æ, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ start_y –±—ã–ª–∞ –Ω–µ–ø—É—Å—Ç–æ–π, —Å–¥–≤–∏–≥–∞–µ–º s_x.
                if start_y in non_empty_lines_in_block_indices or not self.text[s_y][:s_x].strip(): # –ï—Å–ª–∏ –¥–æ –∫—É—Ä—Å–æ—Ä–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                    self.selection_start = (s_y, s_x + new_selection_start_x_offset)
                
                if end_y in non_empty_lines_in_block_indices or not self.text[e_y][:e_x].strip():
                     self.selection_end = (e_y, e_x + new_selection_end_x_offset)
                
                self.cursor_y, self.cursor_x = self.selection_end
            elif cursor_before_op_no_selection: # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å–æ—Ä
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –Ω–µ–ø—É—Å—Ç–æ–π, —Å–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä
                if self.cursor_y in non_empty_lines_in_block_indices:
                    self.cursor_x += new_selection_start_x_offset
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –ø—É—Å—Ç–æ–π –∏ —Å—Ç–∞–ª–∞ "# ", –∫—É—Ä—Å–æ—Ä —Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                elif not original_texts[self.cursor_y].strip():
                     self.cursor_x = len(comment_prefix)

            self.modified = True
            self.action_history.append({
                "type": "comment_block",
                "changes": changes_for_undo, 
                "comment_prefix": comment_prefix,
                "start_y": start_y, "end_y": end_y, 
                "selection_before": selection_before_op,
                "cursor_before_no_selection": cursor_before_op_no_selection,
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –¥–ª—è redo
                "selection_after": (self.is_selecting, self.selection_start, self.selection_end) if self.is_selecting else None,
                "cursor_after_no_selection": (self.cursor_y, self.cursor_x) if not self.is_selecting else None
            })
            self.undone_actions.clear()
            self._set_status_message(f"Commented lines {start_y+1}-{end_y+1}")


    def uncomment_lines(self, start_y: int, end_y: int, comment_prefix: str):
        with self._state_lock: 
            original_texts = {}
            changes_for_undo = []
            prefix_to_remove_stripped = comment_prefix.strip() 
            
            selection_before_op = (self.is_selecting, self.selection_start, self.selection_end) if self.is_selecting else None
            cursor_before_op_no_selection = (self.cursor_y, self.cursor_x) if not self.is_selecting else None
            
            max_removed_len_at_sel_start = 0
            max_removed_len_at_sel_end = 0


            for y in range(start_y, end_y + 1):
                if y >= len(self.text): continue
                
                original_texts[y] = self.text[y]
                line = self.text[y]
                
                lstripped_line = line.lstrip()
                indent_len = len(line) - len(lstripped_line)
                removed_this_line_len = 0

                if lstripped_line.startswith(prefix_to_remove_stripped):
                    len_to_check_for_space = len(prefix_to_remove_stripped)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                    remove_extra_space = False
                    if comment_prefix.endswith(' ') and not prefix_to_remove_stripped.endswith(' '):
                        if len(lstripped_line) > len_to_check_for_space and lstripped_line[len_to_check_for_space] == ' ':
                            remove_extra_space = True
                    
                    chars_to_actually_remove_from_lstripped = len_to_check_for_space + (1 if remove_extra_space else 0)
                    self.text[y] = line[:indent_len] + lstripped_line[chars_to_actually_remove_from_lstripped:]
                    removed_this_line_len = chars_to_actually_remove_from_lstripped
                    
                    changes_for_undo.append({
                        "line_index": y,
                        "original_text": original_texts[y],
                        "new_text": self.text[y]
                    })

                    if y == start_y: max_removed_len_at_sel_start = removed_this_line_len
                    if y == end_y: max_removed_len_at_sel_end = removed_this_line_len


            if changes_for_undo: 
                self.modified = True
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∫—É—Ä—Å–æ—Ä–∞
                if self.is_selecting and self.selection_start and self.selection_end:
                    s_y, s_x = self.selection_start
                    e_y, e_x = self.selection_end
                    self.selection_start = (s_y, max(0, s_x - max_removed_len_at_sel_start))
                    self.selection_end = (e_y, max(0, e_x - max_removed_len_at_sel_end))
                    self.cursor_y, self.cursor_x = self.selection_end
                elif cursor_before_op_no_selection:
                    self.cursor_x = max(0, self.cursor_x - max_removed_len_at_sel_start) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ

                self.action_history.append({
                    "type": "uncomment_block",
                    "changes": changes_for_undo,
                    "comment_prefix": comment_prefix, 
                    "start_y": start_y, "end_y": end_y,
                    "selection_before": selection_before_op,
                    "cursor_before_no_selection": cursor_before_op_no_selection,
                    "selection_after": (self.is_selecting, self.selection_start, self.selection_end) if self.is_selecting else None,
                    "cursor_after_no_selection": (self.cursor_y, self.cursor_x) if not self.is_selecting else None
                })
                self.undone_actions.clear()
                self._set_status_message(f"Uncommented lines {start_y+1}-{end_y+1}")
            else:
                self._set_status_message(f"Nothing to uncomment in lines {start_y+1}-{end_y+1}")



        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def handle_input(self, key: int | str) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: Unicode-—Å–∏–º–≤–æ–ª—ã (–≤–∫–ª—é—á–∞—è –∫–∏—Ç–∞–π—Å–∫–∏–π/–ø–æ–ª—å—Å–∫–∏–π/–∫–∏—Ä–∏–ª–ª–∏—Ü—É),
        —Å–ø–µ—Ü-–∫–ª–∞–≤–∏—à–∏, –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏, —Å—Ç—Ä–µ–ª–∫–∏ –∏ –¥—Ä.
        """
        logging.debug("handle_input ‚Üí key = %r (%s)", key, type(key).__name__)
        with self._state_lock:
            try:
                logging.debug("Received key code: %r", key)

                # ‚îÄ‚îÄ 1. Unicode‚Äë—Å—Ç—Ä–æ–∫–∞ –æ—Ç get_wch() (–ø–µ—á–∞—Ç–∞–µ–º—ã–π —Å–∏–º–≤–æ–ª) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if isinstance(key, str) and len(key) == 1:
                    if wcswidth(key) > 0:
                        self.insert_text(key)
                    else:
                        self._set_status_message(f"Ignored zero‚Äëwidth char: {repr(key)}")
                    return

                # ‚îÄ‚îÄ 2. –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –∏–∑ action_map ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if isinstance(key, int) and key in self.action_map:
                    self.action_map[key]() # –ï—Å–ª–∏ key = 27, –≤—ã–∑–æ–≤–µ—Ç—Å—è cancel_operation
                    return

                # ‚îÄ‚îÄ 3. –°–ø–µ—Ü‚Äë–∫–ª–∞–≤–∏—à–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if key in (curses.KEY_ENTER, 10, 13):
                    self.handle_enter()
                elif key in (curses.KEY_UP, 259, 450):
                    self.handle_up()
                elif key in (curses.KEY_DOWN, 258, 456):
                    self.handle_down()
                elif key in (curses.KEY_LEFT, 260, 452):
                    self.handle_left()
                elif key in (curses.KEY_RIGHT, 261, 454):
                    self.handle_right()
                elif key in (curses.KEY_BACKSPACE, 127, 8):
                    self.handle_backspace()
                elif key in (curses.KEY_DC, 330, 462):
                    self.handle_delete()
                elif key in (curses.KEY_HOME, 262, 449):
                    self.handle_home()
                elif key in (curses.KEY_END, 360, 455):
                    self.handle_end()
                elif key in (curses.KEY_PPAGE, 339, 451):
                    self.handle_page_up()
                elif key in (curses.KEY_NPAGE, 338, 457):
                    self.handle_page_down()
                elif key == curses.ascii.TAB:
                    self.handle_smart_tab()
                elif key == curses.KEY_SRIGHT:
                    self.extend_selection_right()
                elif key == curses.KEY_SLEFT:
                    self.extend_selection_left()
                elif key == curses.KEY_SHOME:
                    self.select_to_home()
                elif key == curses.KEY_SEND:
                    self.select_to_end()
                elif key in (curses.KEY_SR, 337):
                    self.extend_selection_up()
                elif key in (curses.KEY_SF, 336):
                    self.extend_selection_down()
                elif key == 26:  # Undo
                    self.undo()
                elif key == 90:  # Redo
                    self.redo()
                elif key == 331:  # Insert
                    self.toggle_insert_mode()
                elif key == 410:  # Resize
                    self.handle_resize()
                elif key in (curses.KEY_F4, 268):  # F4 lint
                    self.show_lint_panel() 
                elif isinstance(key, str) and key.startswith("\x1b"): # \x1b —ç—Ç–æ Esc
                    if key == "\x1b[Z":  # Shift-Tab
                        self.handle_smart_tab()
                    else:
                        # –ï—Å–ª–∏ get_wch() –≤–µ—Ä–Ω—É–ª "\x1b" –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–∞ –Ω–µ int 27),
                        # —Ç–æ action_map[27] –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
                        # –°—é–¥–∞ –ø–æ–ø–∞–¥–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π Esc, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "\x1b"
                        self._set_status_message(f"Unhandled escape: {key!r}") 
                elif key == 27: # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ 27 —É–∂–µ –µ—Å—Ç—å –≤ action_map
                    self.cancel_operation()
                elif isinstance(key, int) and 32 <= key < 1114112 and key not in self.action_map:
                    try:
                        ch = chr(key)
                        if wcswidth(ch) > 0:
                            self.insert_text(ch)
                            return
                    except Exception:
                        logging.debug(f"Invalid ordinal: {key}")
                else:
                    KEY_LOGGER.debug("Unhandled key: %r", key)
                    self._set_status_message(f"Unhandled: {repr(key)}")

            except Exception:
                logging.exception("Input handler error")
                self._set_status_message("Input handler error (see log)")



    def draw_screen(self, *a, **kw):
        """–°—Ç–∞—Ä–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞ ‚Äì –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–º—É DrawScreen."""
        return self.drawer.draw(*a, **kw)


    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ó–∞–ø—É—Å–∫ flake8 –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def run_flake8_on_code(self, code_string: str, filename: Optional[str] = "<–±—É—Ñ–µ—Ä>") -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ Python-–∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é Flake8 –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ—à–∏–±–∫–∏/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏)
        –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ self.lint_panel_message –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞.
        –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä.

        :param code_string: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ Python –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ Flake8).
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º <–±—É—Ñ–µ—Ä> –µ—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–ª–∏ None
        effective_filename_for_flake8 = filename if filename and filename != "noname" else "<–±—É—Ñ–µ—Ä>"
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ ‚Äî –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, —Ç.–∫. –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª—ã–º –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Å—Ç—Ä–æ–∫
        if len(code_string) > 750_000: # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ª–≥–æ–≥–æ encode
            try:
                if len(code_string.encode('utf-8', errors='ignore')) > 1_000_000: # 1MB
                    msg = "Flake8: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∞–∫—Å. ~1MB)"
                    logging.warning(msg + f" (—Ñ–∞–π–ª: {effective_filename_for_flake8})")
                    self._set_status_message(
                        message_for_statusbar=msg, 
                        is_lint_status=True, 
                        full_lint_output=msg, 
                        activate_lint_panel_if_issues=True
                    )
                    return
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è flake8: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é

        tmp_file_path: Optional[str] = None

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º .py, —á—Ç–æ–±—ã flake8 –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª
            # delete=False, —Ç.–∫. flake8 –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –ø–æ –∏–º–µ–Ω–∏
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8', errors='replace') as tmp:
                tmp_file_path = tmp.name
                tmp.write(code_string)
            logging.debug(f"–ö–æ–¥ –¥–ª—è flake8 –∑–∞–ø–∏—Å–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {tmp_file_path}")
        except Exception as e:
            logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è flake8: {e}")
            msg = "Flake8: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
            self._set_status_message(
                message_for_statusbar=msg, 
                is_lint_status=True, 
                full_lint_output=f"{msg}\n{e}", 
                activate_lint_panel_if_issues=True
            )
            return

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def _run_flake8_thread():
            nonlocal tmp_file_path # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ tmp_file_path –∏–∑ –≤–Ω–µ—à–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
            
            full_output_for_panel: str
            short_message_for_statusbar: str
            show_panel_on_issues: bool = True # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã

            try:
                # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ flake8
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.executable –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è flake8 –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ flake8. –ï—Å–ª–∏ –±—ã –º—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –∏–º—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞,
                # flake8 –º–æ–≥ –±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–≥–æ.
                # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –∏–º–µ–Ω–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å --isolated –ª—É—á—à–µ.
                # –ï—Å–ª–∏ filename —Ä–µ–∞–ª—å–Ω—ã–π, flake8 –º–æ–∂–µ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–≤–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, first-party import)
                # –ù–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, tmp_file_path –Ω–∞–¥–µ–∂–Ω–µ–µ.
                # –§–ª–∞–≥ --stdin-display-name –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ stdin,
                # –Ω–æ —Ä–∞–∑ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª, —Ç–æ tmp_file_path –±—É–¥–µ—Ç –≤ –≤—ã–≤–æ–¥–µ flake8.
                
                # flake8 –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å filename –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω,
                # –Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—É–¥–µ—Ç tmp_file_path.
                # –ß—Ç–æ–±—ã –≤—ã–≤–æ–¥ –±—ã–ª –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º, –µ—Å–ª–∏ filename —ç—Ç–æ "<–±—É—Ñ–µ—Ä>",
                # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å --stdin-display-name (–µ—Å–ª–∏ –±—ã —á–∏—Ç–∞–ª–∏ –∏–∑ stdin).
                # –î–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, flake8 —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞.
                # –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –≤ –≤—ã–≤–æ–¥–µ flake8 –±—ã–ª–æ –∏–º—è –Ω–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ (–∏–ª–∏ <–±—É—Ñ–µ—Ä>),
                # –∞ –Ω–µ –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –±–µ–∑ stdin.
                # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∞–Ω–∞–ª–∏–∑ tmp_file_path.
                
                flake8_cmd = [
                    sys.executable, "-m", "flake8",
                    "--isolated",  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ/–ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ flake8
                    f"--max-line-length={self.config.get('flake8', {}).get('max_line_length', 88)}",
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã flake8 –∏–∑ self.config
                    # –Ω–∞–ø—Ä–∏–º–µ—Ä, --select, --ignore
                    # select_codes = self.config.get('flake8', {}).get('select')
                    # if select_codes: flake8_cmd.extend(["--select", select_codes])
                    # ignore_codes = self.config.get('flake8', {}).get('ignore')
                    # if ignore_codes: flake8_cmd.extend(["--ignore", ignore_codes])
                    tmp_file_path  # –§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                ]
                logging.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã flake8: {' '.join(shlex.quote(str(c)) for c in flake8_cmd)}")

                process = subprocess.run(
                    flake8_cmd,
                    capture_output=True, # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout –∏ stderr
                    text=True,           # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ–∫—Å—Ç (–æ–±—ã—á–Ω–æ utf-8 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è text=True)
                    check=False,         # –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–Ω—É–ª–µ–≤–æ–º –∫–æ–¥–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    timeout=self.config.get('flake8', {}).get('timeout', 20), # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
                    encoding='utf-8',    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
                    errors='replace'     # –ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                )

                raw_stdout = process.stdout.strip()
                raw_stderr = process.stderr.strip()

                if raw_stderr:
                    logging.warning(f"Flake8 stderr –¥–ª—è {tmp_file_path} (—Ñ–∞–π–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {effective_filename_for_flake8}): {raw_stderr}")

                if process.returncode == 0:
                    # –ö–æ–¥ 0: flake8 –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º (–∏–ª–∏ –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)
                    full_output_for_panel = f"Flake8 ({effective_filename_for_flake8}): –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º."
                    short_message_for_statusbar = "Flake8: –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º."
                    show_panel_on_issues = False # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º
                else:
                    # –ù–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ flake8
                    if raw_stdout: # flake8 –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
                        # –ó–∞–º–µ–Ω—è–µ–º –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        # Flake8 –æ–±—ã—á–Ω–æ –≤—ã–≤–æ–¥–∏—Ç <tmp_file_path>:<line>:<col>: <error_code> <message>
                        # –ú—ã —Ö–æ—Ç–∏–º –∑–∞–º–µ–Ω–∏—Ç—å <tmp_file_path> –Ω–∞ effective_filename_for_flake8
                        # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–∏ –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞.
                        # –ò–º—è tmp_file_path –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
                        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ regex, –µ—Å–ª–∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å–ª–æ–∂–Ω—ã–µ):
                        # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ tmp_file_path –Ω–µ None –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ
                        if tmp_file_path:
                            full_output_for_panel = raw_stdout.replace(tmp_file_path + ":", effective_filename_for_flake8 + ":")
                        else:
                            full_output_for_panel = raw_stdout
                        
                        lines = full_output_for_panel.splitlines()
                        num_issues = len(lines)
                        first_issue_preview = lines[0][:70] + "..." if lines and len(lines[0]) > 70 else (lines[0] if lines else "")
                        short_message_for_statusbar = f"Flake8: {num_issues} –ø—Ä–æ–±–ª–µ–º. ({first_issue_preview})"
                    elif raw_stderr: # –ù–µ—Ç stdout, –Ω–æ –µ—Å—Ç—å stderr - –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ flake8 –∏–ª–∏ —Å–∞–º–æ–≥–æ flake8
                        full_output_for_panel = f"Flake8 ({effective_filename_for_flake8}) –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{raw_stderr}"
                        short_message_for_statusbar = "Flake8: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
                    else: # –ù–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥, –Ω–æ –Ω–µ—Ç –≤—ã–≤–æ–¥–∞ - —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                        full_output_for_panel = f"Flake8 ({effective_filename_for_flake8}): –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {process.returncode}), –≤—ã–≤–æ–¥ –ø—É—Å—Ç."
                        short_message_for_statusbar = f"Flake8: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {process.returncode})."
                
            except FileNotFoundError:
                # –≠—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ sys.executable –∏–ª–∏ flake8 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                msg = "Flake8: –ù–µ –Ω–∞–π–¥–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'pip install flake8')"
                logging.error(msg)
                full_output_for_panel = msg
                short_message_for_statusbar = msg
                show_panel_on_issues = True
            except subprocess.TimeoutExpired:
                msg = f"Flake8 ({effective_filename_for_flake8}): –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."
                logging.warning(msg)
                full_output_for_panel = msg
                short_message_for_statusbar = msg
                show_panel_on_issues = True
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ flake8 –¥–ª—è {tmp_file_path} (—Ñ–∞–π–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {effective_filename_for_flake8}): {e}")
                msg_short = f"Flake8 –æ—à–∏–±–∫–∞: {str(e)[:60]}..."
                msg_full = f"Flake8 ({effective_filename_for_flake8}) –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}"
                full_output_for_panel = msg_full
                short_message_for_statusbar = msg_short
                show_panel_on_issues = True
            finally:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if tmp_file_path and os.path.exists(tmp_file_path):
                    try:
                        os.remove(tmp_file_path)
                        logging.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {tmp_file_path} —É–¥–∞–ª–µ–Ω.")
                    except Exception as e_remove:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {tmp_file_path}: {e_remove}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ—à–∞–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–∞–Ω–µ–ª—å
            # –í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º, –µ—Å–ª–∏ _set_status_message
            # –Ω–∞–ø—Ä—è–º—É—é –º–µ–Ω—è–µ—Ç UI. –ù–æ —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∫–ª–∞–¥–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –º–µ–Ω—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã,
            # –∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
            # –î–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ _set_status_message –¥–µ–ª–∞–µ—Ç —á—Ç–æ-—Ç–æ —Å–ª–æ–∂–Ω–æ–µ —Å curses,
            # –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å.
            # –ù–æ —Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è _set_status_message (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ put_nowait –≤ –æ—á–µ—Ä–µ–¥—å)
            # –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –ø–æ—Ç–æ–∫–∞.
            self._set_status_message(
                message_for_statusbar=short_message_for_statusbar, 
                is_lint_status=True, 
                full_lint_output=full_output_for_panel,
                activate_lint_panel_if_issues=show_panel_on_issues
            )
            # –ï—Å–ª–∏ _set_status_message –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç show_lint_panel, –∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω—è–µ—Ç —Ñ–ª–∞–≥,
            # —Ç–æ —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ show_lint_panel –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. _set_status_message
            # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç self.lint_panel_active.
            # if show_panel_on_issues and full_output_for_panel and \
            #    full_output_for_panel != f"Flake8 ({effective_filename_for_flake8}): –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º.":
            #     self.show_lint_panel() # –ò–ª–∏ –ø—É—Å—Ç—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç _set_status_message

        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        lint_thread = threading.Thread(target=_run_flake8_thread, daemon=True)
        lint_thread.start()


    def show_lint_panel(self):
        logging.debug("show_lint_panel called")
        if not self.lint_panel_message:
            return  # –Ω–µ—á–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        self.lint_panel_active = True
        # –ü–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ —ç–∫—Ä–∞–Ω–∞ –≤ Drawer.draw()


    def run_lint_async(self, code: Optional[str] = None) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç flake8-–∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞,
        –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ Python.
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞.

        :param code: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ Python –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. 
                     –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ self.text.
        """
        # 1. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–µ–∫—Å–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å.
        if self._lexer is None:
            self.detect_language() 
            # –ü–æ—Å–ª–µ detect_language() self._lexer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ö–æ—Ç—è –±—ã –≤ TextLexer)

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ Python
        #    –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ –∏–º–µ–Ω–∏ –ª–µ–∫—Å–µ—Ä–∞ –∏–ª–∏ –ø–æ –µ–≥–æ —Ç–∏–ø—É.
        #    –ò–º–µ–Ω–∞ –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è ('python', 'python3', 'py', 'ipython', 'cython', etc.)
        #    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–µ–∫—Å–µ—Ä—ã Pygments.
        is_python_language = False
        if self._lexer: # –ï—Å–ª–∏ –ª–µ–∫—Å–µ—Ä –≤–æ–æ–±—â–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            lexer_name_lower = self._lexer.name.lower()
            # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è Python –ª–µ–∫—Å–µ—Ä–æ–≤
            python_lexer_names = {'python', 'python3', 'py', 'cython', 'ipython', 'sage'} 
            if lexer_name_lower in python_lexer_names:
                is_python_language = True
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø:
            # from pygments.lexers.python import PythonLexer, Python3Lexer, CythonLexer # –∏ —Ç.–¥.
            # if isinstance(self._lexer, (PythonLexer, Python3Lexer, ...)):
            #     is_python_language = True
        
        if not is_python_language:
            message = "Flake8: –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Python —Ñ–∞–π–ª–æ–≤."
            logging.info(f"run_lint_async: –ü—Ä–æ–ø—É—Å–∫ –ª–∏–Ω—Ç–∏–Ω–≥–∞, —Ç–µ–∫—É—â–∏–π –ª–µ–∫—Å–µ—Ä: {self._lexer.name if self._lexer else 'None'}")
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª, –ø–æ—á–µ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
            self._set_status_message(message_for_statusbar=message, is_lint_status=True, full_lint_output=message)
            if self.lint_panel_message: # –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                self.show_lint_panel()
            return

        # 3. –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞
        if code is None:
            code_to_lint = "\n".join(self.text)
        else:
            code_to_lint = code

        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º flake8
        logging.debug(f"run_lint_async: –ó–∞–ø—É—Å–∫ flake8 –¥–ª—è —Ñ–∞–π–ª–∞ '{self.filename or "<–±—É—Ñ–µ—Ä –±–µ–∑ –∏–º–µ–Ω–∏>"}'")
        self._set_status_message("Flake8: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...", is_lint_status=True, full_lint_output="Flake8: –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
        if self.lint_panel_message: # –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∑–∞–ø—É—Å–∫–µ
                self.show_lint_panel()

        self.run_flake8_on_code(code_to_lint, self.filename)


    def _check_pyclip_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pyperclip –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
        if not self.config.get("editor", {}).get("use_system_clipboard", True):
            logging.debug("System clipboard disabled by config.")
            return False
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            pyperclip.copy("")
            # pyperclip.paste() # paste –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
            return True
        except pyperclip.PyperclipException as e:
            logging.warning(f"System clipboard unavailable: {str(e)}. Falling back to internal clipboard.")
            return False
        except Exception as e:
             logging.warning(f"Unexpected error checking system clipboard: {e}. Falling back to internal clipboard.")
             return False


    def get_selected_text(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."""
        if not self.is_selecting or self.selection_start is None or self.selection_end is None:
            return ""
        start_row, start_col = self.selection_start
        end_row, end_col = self.selection_end

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –Ω–∞—á–∞–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞
        if start_row > end_row or (start_row == end_row and start_col > end_col):
            start_row, start_col, end_row, end_col = end_row, end_col, start_row, start_col

        selected_lines = []
        if start_row == end_row:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—Ç—Ä–æ–∫–∏
            line = self.text[start_row]
            start_col = max(0, min(start_col, len(line)))
            end_col = max(0, min(end_col, len(line)))
            selected_lines.append(line[start_col:end_col])
        else:
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–æ—Ç start_col –¥–æ –∫–æ–Ω—Ü–∞)
            line = self.text[start_row]
            start_col = max(0, min(start_col, len(line)))
            selected_lines.append(line[start_col:])
            # –°—Ä–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            for row in range(start_row + 1, end_row):
                if 0 <= row < len(self.text): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    selected_lines.append(self.text[row])
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ (–æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ end_col)
            if 0 <= end_row < len(self.text): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                line = self.text[end_row]
                end_col = max(0, min(end_col, len(line)))
                selected_lines.append(line[:end_col])
            # –ï—Å–ª–∏ end_row > len(self.text)-1 (—á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
            elif end_row == len(self.text) and end_col == 0:
                 # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–æ–≤—É—é
                 pass # –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ end_col=0 –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
            else:
                 logging.warning(f"get_selected_text: end_row {end_row} out of bounds {len(self.text)}")

        return "\n".join(selected_lines)


    def copy(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        selected_text = self.get_selected_text()
        if not selected_text:
            self._set_status_message("Nothing to copy")
            return

        # –ö–æ–ø–∏—Ä—É–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä –≤—Å–µ–≥–¥–∞
        self.internal_clipboard = selected_text
        message = "Copied to internal clipboard"

        # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if self.use_system_clipboard and self.pyclip_available:
            try:
                pyperclip.copy(selected_text)
                message = "Copied to system clipboard"
                logging.debug("Copied to system clipboard successfully")
            except pyperclip.PyperclipException as e:
                logging.error(f"Failed to copy to system clipboard: {str(e)}")
                message = "Copied to internal clipboard (system clipboard error)"
            except Exception as e:
                 logging.error(f"Unexpected error copying to system clipboard: {e}")
                 message = "Copied to internal clipboard (system clipboard error)"

        self._set_status_message(message)


    def cut(self):
        """–í—ã—Ä–µ–∑–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        with self._state_lock: # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            logging.debug(
                f"CUT CALLED. is_selecting: {self.is_selecting}, "
                f"selection_start: {self.selection_start}, selection_end: {self.selection_end}"
            )

            if not self.is_selecting:
                self._set_status_message("–ù–µ—á–µ–≥–æ –≤—ã—Ä–µ–∑–∞—Ç—å (–Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è)")
                return

            normalized_range = self._get_normalized_selection_range()
            if not normalized_range:
                self._set_status_message("–ù–µ—á–µ–≥–æ –≤—ã—Ä–µ–∑–∞—Ç—å (–æ—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è)")
                return
                
            norm_start_coords, norm_end_coords = normalized_range

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –î–û –µ–≥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ get_text_in_range(norm_start, norm_end)
            # –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å delete_selected_text_internal, —á—Ç–æ–±—ã –æ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–ª.
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π get_selected_text(), –Ω–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω
            # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ –º—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É self.selection_start/end.
            # –ò–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –±—ã delete_selected_text_internal –≤–æ–∑–≤—Ä–∞—â–∞–ª —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.

            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Ç–µ–∫—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –≤—ã–¥–µ–ª–µ–Ω–∏—é.
            # –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –º–µ—Ç–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.
            # –ù–∞–ø—Ä–∏–º–µ—Ä, self.get_text_from_normalized_range(norm_start_coords, norm_end_coords)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ deleted_segments –∏–∑ delete_selected_text_internal –∏ –µ—Å—Ç—å —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ.

            # –£–¥–∞–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            # delete_selected_text_internal –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            deleted_text_segments = self.delete_selected_text_internal(
                norm_start_coords[0], norm_start_coords[1],
                norm_end_coords[0], norm_end_coords[1]
            )

            if not deleted_text_segments: # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω)
                self._set_status_message("–ù–µ—á–µ–≥–æ –≤—ã—Ä–µ–∑–∞—Ç—å")
                # –ö—É—Ä—Å–æ—Ä –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã delete_selected_text_internal
                self.is_selecting = False 
                self.selection_start = None
                self.selection_end = None
                return

            # –°–æ–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            text_for_clipboard = "\n".join(deleted_text_segments)

            # –ö–æ–ø–∏—Ä—É–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
            self.internal_clipboard = text_for_clipboard
            message = "–í—ã—Ä–µ–∑–∞–Ω–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä"

            # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä
            if self.use_system_clipboard and self.pyclip_available:
                try:
                    pyperclip.copy(text_for_clipboard)
                    message = "–í—ã—Ä–µ–∑–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä"
                    logging.debug("–í—ã—Ä–µ–∑–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ")
                except pyperclip.PyperclipException as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ä–µ–∑–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä: {str(e)}")
                    message = "–í—ã—Ä–µ–∑–∞–Ω–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä (–æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞)"
                except Exception as e:
                    logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ä–µ–∑–∞–Ω–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä: {e}")
                    message = "–í—ã—Ä–µ–∑–∞–Ω–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä (–æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞)"

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            action = {
                "type": "delete_selection",
                "text": deleted_text_segments,      # list[str]
                "start": norm_start_coords,
                "end": norm_end_coords
            }
            self.action_history.append(action)
            self.undone_actions.clear()
            
            # self.modified = True # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ delete_selected_text_internal
            # –ö—É—Ä—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ delete_selected_text_internal (–≤ norm_start_coords)
            
            self.is_selecting = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            self.selection_start = None
            self.selection_end = None
            
            self._set_status_message(message)
            logging.debug(f"cut: –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x})")

    def paste(self) -> None:
        with self._state_lock: # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            logging.debug(f"paste() –≤—ã–∑–≤–∞–Ω ‚Äì use_system_clipboard={self.use_system_clipboard}, pyclip_available={self.pyclip_available}")

            text_to_paste = self.internal_clipboard 
            source_of_paste = "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ" 

            if self.use_system_clipboard and self.pyclip_available:
                try:
                    system_clipboard_text = pyperclip.paste()
                    if system_clipboard_text: 
                        text_to_paste = system_clipboard_text
                        source_of_paste = "—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ"
                        logging.debug(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(text_to_paste)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞.")
                    else:
                        logging.debug("–°–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π.")
                except pyperclip.PyperclipException as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {e} ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π.")
                except Exception as e: 
                    logging.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {e} ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π.")

            if not text_to_paste:
                self._set_status_message("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
                return

            text_to_paste = text_to_paste.replace("\r\n", "\n").replace("\r", "\n")
            
            # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞.
            # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è, –Ω–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ.
            paste_target_y, paste_target_x = self.cursor_y, self.cursor_x

            if self.is_selecting:
                normalized_selection = self._get_normalized_selection_range()
                if normalized_selection:
                    norm_start_coords, norm_end_coords = normalized_selection
                    paste_target_y, paste_target_x = norm_start_coords # –í—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —Å—é–¥–∞

                    logging.debug(f"paste(): –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å {norm_start_coords} –ø–æ {norm_end_coords} –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π.")
                    
                    deleted_segments = self.delete_selected_text_internal(
                        norm_start_coords[0], norm_start_coords[1],
                        norm_end_coords[0], norm_end_coords[1]
                    )
                    
                    self.action_history.append({
                        "type": "delete_selection",
                        "text": deleted_segments,
                        "start": norm_start_coords, 
                        "end": norm_end_coords,     
                    })
                    self.undone_actions.clear()
                    
                    # delete_selected_text_internal —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º paste_target_y/x
                    paste_target_y, paste_target_x = self.cursor_y, self.cursor_x

                    self.is_selecting = False
                    self.selection_start = None
                    self.selection_end = None
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –ó–∞–º–µ–Ω—ã (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–µ–Ω)
            # –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç—Ä–µ–±—É–µ—Ç careful consideration –¥–ª—è undo/redo.
            # –ï—Å–ª–∏ insert_mode == False (—Ç.–µ. —Ä–µ–∂–∏–º –∑–∞–º–µ–Ω—ã)
            #   - –ü–æ—Å—á–∏—Ç–∞—Ç—å —à–∏—Ä–∏–Ω—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ text_to_paste
            #   - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤/—è—á–µ–µ–∫ –æ—Ç (paste_target_y, paste_target_x)
            #   - –≠—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∞—Å—Ç—å—é –¥–µ–π—Å—Ç–≤–∏—è "–≤—Å—Ç–∞–≤–∏—Ç—å —Å –∑–∞–º–µ–Ω–æ–π" –∏–ª–∏
            #     –∑–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ "replace_N_chars".
            #   - –ü–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ç.–∫. —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è undo.

            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è self.insert_text.
            # insert_text —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–ø–∏—Å—å "insert" –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é.
            # –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ self.cursor_y, self.cursor_x, –∫–æ—Ç–æ—Ä—ã–µ
            # —è–≤–ª—è—é—Ç—Å—è paste_target_y, paste_target_x.
            self.insert_text(text_to_paste) 

            self._set_status_message(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑ {source_of_paste} –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
            logging.debug(f"paste(): –í—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(text_to_paste)} —Å–∏–º–≤–æ–ª–æ–≤. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x}).")


    def extend_selection_right(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        if self.cursor_x < len(self.text[self.cursor_y]):
            self.cursor_x += 1
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.selection_end = (self.cursor_y, self.cursor_x)


    def extend_selection_left(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–ª–µ–≤–æ –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        if self.cursor_x > 0:
            self.cursor_x -= 1
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.selection_end = (self.cursor_y, self.cursor_x)


    def select_to_home(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        self.cursor_x = 0
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.selection_end = (self.cursor_y, self.cursor_x)

    def select_to_end(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        self.cursor_x = len(self.text[self.cursor_y])
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.selection_end = (self.cursor_y, self.cursor_x)

    def select_all(self):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ."""
        self.selection_start = (0, 0)
        # –ö–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∏–º –Ω–∞ –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏.
        last_line_idx = max(0, len(self.text) - 1)
        self.selection_end = (last_line_idx, len(self.text[last_line_idx]))
        self.is_selecting = True
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.cursor_y, self.cursor_x = self.selection_end
        self._set_status_message("All text selected")


    def extend_selection_up(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_y > 0:
            self.cursor_y -= 1
            # –ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—è –∂–µ–ª–∞–µ–º—É—é –∫–æ–ª–æ–Ω–∫—É
            # –Ω–æ –Ω–µ –≤—ã—Ö–æ–¥—è –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.selection_end = (self.cursor_y, self.cursor_x)

    def extend_selection_down(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
             # –ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—è –∂–µ–ª–∞–µ–º—É—é –∫–æ–ª–æ–Ω–∫—É
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.selection_end = (self.cursor_y, self.cursor_x)


    def undo(self):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Ç–µ–∫—Å—Ç –∏ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π: insert, delete_char, delete_newline, delete_selection,
        block_indent, block_unindent.
        """
        with self._state_lock:
            if not self.action_history:
                self._set_status_message("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")
                return
            last_action = self.action_history.pop()
            action_type = last_action.get("type")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            current_state_snapshot = {
                "text": [line for line in self.text],
                "cursor_y": self.cursor_y, "cursor_x": self.cursor_x,
                "is_selecting": self.is_selecting, 
                "selection_start": self.selection_start, "selection_end": self.selection_end
            }

            try:
                if action_type == "insert":
                    text_to_remove = last_action["text"]
                    row, col = last_action["position"] 
                    lines_to_remove_list = text_to_remove.split('\n')
                    num_lines_in_removed_text = len(lines_to_remove_list)
                    if not (0 <= row < len(self.text)): raise IndexError(f"Undo insert: Invalid row {row}")
                    
                    if num_lines_in_removed_text == 1:
                        current_line_content = self.text[row]
                        self.text[row] = current_line_content[:col] + current_line_content[col + len(text_to_remove):]
                    else:
                        prefix_on_first_line = self.text[row][:col]
                        end_row_affected_by_insert = row + num_lines_in_removed_text - 1
                        if end_row_affected_by_insert >= len(self.text): raise IndexError(f"Undo insert: Invalid end_row {end_row_affected_by_insert}")
                        len_last_inserted_line_segment = len(lines_to_remove_list[-1])
                        suffix_on_last_line = self.text[end_row_affected_by_insert][len_last_inserted_line_segment:]
                        self.text[row] = prefix_on_first_line + suffix_on_last_line
                        del self.text[row + 1 : end_row_affected_by_insert + 1]
                    self.cursor_y, self.cursor_x = row, col 

                elif action_type == "delete_char":
                    y, x = last_action["position"] 
                    deleted_char = last_action["text"] 
                    if not (0 <= y < len(self.text) and 0 <= x <= len(self.text[y])): raise IndexError(f"Undo delete_char: Invalid position ({y},{x})")
                    current_line = self.text[y]
                    self.text[y] = current_line[:x] + deleted_char + current_line[x:]
                    self.cursor_y, self.cursor_x = y, x 

                elif action_type == "delete_newline":
                    y, x = last_action["position"] 
                    moved_up_content = last_action["text"] 
                    if not (0 <= y < len(self.text) and 0 <= x <= len(self.text[y])): raise IndexError(f"Undo delete_newline: Invalid position ({y},{x})")
                    current_line_content = self.text[y]
                    self.text[y] = current_line_content[:x] 
                    self.text.insert(y + 1, moved_up_content) 
                    self.cursor_y, self.cursor_x = y, x 

                elif action_type == "delete_selection":
                    deleted_text_segments = last_action["text"] 
                    start_y, start_x = last_action["start"] 
                    text_to_restore_str = "\n".join(deleted_text_segments)
                    self.insert_text_at_position(text_to_restore_str, start_y, start_x) # insert_text_at_position —Å—Ç–∞–≤–∏—Ç –∫—É—Ä—Å–æ—Ä
                    self.cursor_y, self.cursor_x = start_y, start_x # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è undo

                elif action_type == "block_indent":
                    original_selection = last_action.get("original_selection")
                    indent_str = last_action["indent_str"]
                    indent_len = len(indent_str)
                    for y_idx in range(last_action["start_line"], last_action["end_line"] + 1):
                        if y_idx < len(self.text) and self.text[y_idx].startswith(indent_str):
                            self.text[y_idx] = self.text[y_idx][indent_len:]
                    if original_selection:
                        self.is_selecting, self.selection_start, self.selection_end = True, original_selection[0], original_selection[1]
                        if self.selection_end: self.cursor_y, self.cursor_x = self.selection_end
                    
                elif action_type == "block_unindent":
                    original_selection = last_action.get("original_selection")
                    for change in last_action["changes"]:
                        if change["line_index"] < len(self.text):
                            self.text[change["line_index"]] = change["original_text"] # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏
                    if original_selection:
                        self.is_selecting, self.selection_start, self.selection_end = True, original_selection[0], original_selection[1]
                        if self.selection_end: self.cursor_y, self.cursor_x = self.selection_end

                elif action_type == "comment_block" or action_type == "uncomment_block":
                    changes = last_action["changes"] 
                    selection_state = last_action.get("selection_before")
                    cursor_state_no_sel = last_action.get("cursor_before_no_selection")

                    for change_item in reversed(changes): 
                        idx = change_item["line_index"]
                        if idx < len(self.text):
                            self.text[idx] = change_item["original_text"]
                    
                    if selection_state:
                         self.is_selecting, self.selection_start, self.selection_end = selection_state
                         if self.is_selecting and self.selection_end: self.cursor_y, self.cursor_x = self.selection_end
                    elif cursor_state_no_sel:
                        self.is_selecting = False
                        self.selection_start, self.selection_end = None, None
                        self.cursor_y, self.cursor_x = cursor_state_no_sel
                    else: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–æ—Å
                        self.is_selecting = False
                        self.selection_start, self.selection_end = None, None
                else:
                    logging.warning(f"Undo: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                    self.action_history.append(last_action) 
                    return # –ù–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –≤—ã—Ö–æ–¥–∏–º

            except Exception as e:
                logging.exception(f"Undo: –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è undo –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
                self._set_status_message(f"Undo –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {action_type}: {str(e)[:80]}...")
                self.action_history.append(last_action) 
                # –û—Ç–∫–∞—Ç –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–æ –ø–æ–ø—ã—Ç–∫–∏ undo
                self.text = current_state_snapshot["text"]
                self.cursor_y, self.cursor_x = current_state_snapshot["cursor_y"], current_state_snapshot["cursor_x"]
                self.is_selecting = current_state_snapshot["is_selecting"]
                self.selection_start, self.selection_end = current_state_snapshot["selection_start"], current_state_snapshot["selection_end"]
                return

            self.undone_actions.append(last_action) 
            self.modified = True 
            
            # –û–±—â–∏–π —Å–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ —è–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if action_type not in ["block_indent", "block_unindent", "comment_block", "uncomment_block"] or \
               (action_type in ["block_indent", "block_unindent"] and not last_action.get("original_selection")) or \
               (action_type in ["comment_block", "uncomment_block"] and not last_action.get("selection_before")):
                self.is_selecting = False 
                self.selection_start = None
                self.selection_end = None

            self._set_status_message("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


    def redo(self):
        """
        –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π undo.
        """
        with self._state_lock:
            if not self.undone_actions:
                self._set_status_message("–ù–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å")
                return
            action_to_redo = self.undone_actions.pop()
            action_type = action_to_redo.get("type")

            current_state_snapshot = {
                "text": [line for line in self.text],
                "cursor_y": self.cursor_y, "cursor_x": self.cursor_x,
                "is_selecting": self.is_selecting, 
                "selection_start": self.selection_start, "selection_end": self.selection_end
            }

            try:
                if action_type == "insert":
                    text_to_insert = action_to_redo["text"]
                    row, col = action_to_redo["position"]
                    self.insert_text_at_position(text_to_insert, row, col) 

                elif action_type == "delete_char":
                    y, x = action_to_redo["position"]
                    if not (0 <= y < len(self.text) and 0 <= x < len(self.text[y])): raise IndexError(f"Redo delete_char: Invalid position ({y},{x})")
                    self.text[y] = self.text[y][:x] + self.text[y][x + 1:]
                    self.cursor_y, self.cursor_x = y, x 

                elif action_type == "delete_newline":
                    y, x = action_to_redo["position"] 
                    if not (0 <= y < len(self.text) - 1): raise IndexError(f"Redo delete_newline: Not enough lines")
                    line_to_merge = self.text.pop(y + 1)
                    self.text[y] += line_to_merge
                    self.cursor_y, self.cursor_x = y, x 

                elif action_type == "delete_selection":
                    start_y, start_x = action_to_redo["start"]
                    end_y, end_x = action_to_redo["end"] 
                    if not (0 <= start_y < len(self.text) and 0 <= end_y < len(self.text) and \
                            0 <= start_x <= len(self.text[start_y]) and 0 <= end_x <= len(self.text[end_y])):
                        raise IndexError(f"Redo delete_selection: Invalid range")
                    _deleted_segments = self.delete_selected_text_internal(start_y, start_x, end_y, end_x)
                    # delete_selected_text_internal —Å—Ç–∞–≤–∏—Ç –∫—É—Ä—Å–æ—Ä

                elif action_type == "block_indent":
                    final_selection = action_to_redo.get("final_selection")
                    indent_str = action_to_redo["indent_str"]
                    for y_idx in range(action_to_redo["start_line"], action_to_redo["end_line"] + 1):
                        if y_idx < len(self.text):
                            self.text[y_idx] = indent_str + self.text[y_idx]
                    if final_selection:
                        self.is_selecting, self.selection_start, self.selection_end = True, final_selection[0], final_selection[1]
                        if self.selection_end: self.cursor_y, self.cursor_x = self.selection_end
                
                elif action_type == "block_unindent":
                    final_selection = action_to_redo.get("final_selection")
                    for change in action_to_redo["changes"]:
                         idx = change["line_index"]
                         # –ü—Ä–∏–º–µ–Ω—è–µ–º new_text, —Ç–∞–∫ –∫–∞–∫ redo –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–≤–µ–ª–æ –∫ new_text
                         if idx < len(self.text): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                             self.text[idx] = change["new_text"] 
                    if final_selection:
                        self.is_selecting, self.selection_start, self.selection_end = True, final_selection[0], final_selection[1]
                        if self.selection_end: self.cursor_y, self.cursor_x = self.selection_end

                elif action_type == "comment_block" or action_type == "uncomment_block":
                    changes = action_to_redo["changes"]
                    selection_state_after = action_to_redo.get("selection_after")
                    cursor_state_no_sel_after = action_to_redo.get("cursor_after_no_selection")

                    for change_item in changes:
                        idx = change_item["line_index"]
                        if idx < len(self.text):
                            self.text[idx] = change_item["new_text"] # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                    
                    if selection_state_after:
                         self.is_selecting, self.selection_start, self.selection_end = selection_state_after
                         if self.is_selecting and self.selection_end: self.cursor_y, self.cursor_x = self.selection_end
                    elif cursor_state_no_sel_after:
                        self.is_selecting = False
                        self.selection_start, self.selection_end = None, None
                        self.cursor_y, self.cursor_x = cursor_state_no_sel_after
                    else: 
                        self.is_selecting = False
                        self.selection_start, self.selection_end = None, None
                else:
                    logging.warning(f"Redo: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                    self.undone_actions.append(action_to_redo)
                    return

            except Exception as e:
                logging.exception(f"Redo: –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è redo –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
                self._set_status_message(f"Redo –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {action_type}: {str(e)[:80]}...")
                self.undone_actions.append(action_to_redo) 
                self.text = current_state_snapshot["text"]
                self.cursor_y, self.cursor_x = current_state_snapshot["cursor_y"], current_state_snapshot["cursor_x"]
                self.is_selecting = current_state_snapshot["is_selecting"]
                self.selection_start, self.selection_end = current_state_snapshot["selection_start"], current_state_snapshot["selection_end"]
                return

            self.action_history.append(action_to_redo) 
            self.modified = True
            
            if action_type not in ["block_indent", "block_unindent", "comment_block", "uncomment_block"] or \
               (action_type in ["block_indent", "block_unindent"] and not action_to_redo.get("final_selection")) or \
               (action_type in ["comment_block", "uncomment_block"] and not action_to_redo.get("selection_after")):
                self.is_selecting = False
                self.selection_start = None
                self.selection_end = None

            self._set_status_message("–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ")


    def _get_normalized_selection_range(self) -> tuple[tuple[int, int], tuple[int, int]] | None:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è (start_pos, end_pos),
        –≥–¥–µ start_pos –≤—Å–µ–≥–¥–∞ –ª–µ–≤–µ–µ/–≤—ã—à–µ end_pos.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è.
        """
        if not self.is_selecting or not self.selection_start or not self.selection_end:
            return None

        sy1, sx1 = self.selection_start
        sy2, sx2 = self.selection_end

        if (sy1 > sy2) or (sy1 == sy2 and sx1 > sx2):
            norm_start_y, norm_start_x = sy2, sx2
            norm_end_y, norm_end_x = sy1, sx1
        else:
            norm_start_y, norm_start_x = sy1, sx1
            norm_end_y, norm_end_x = sy2, sx2
        
        return (norm_start_y, norm_start_x), (norm_end_y, norm_end_x)
    

    def insert_text_at_position(self, text: str, row: int, col: int) -> None:
        """
        –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ `text` –≤ –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é (row, col).
        –ù–ï –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é ‚Äî –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —ç—Ç–æ.

        –ö—É—Ä—Å–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç IndexError, –µ—Å–ª–∏ row –∏–ª–∏ col –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.
        """
        if not text:
            logging.debug("insert_text_at_position: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç -> –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ (row)
        if not (0 <= row < len(self.text)):
            msg = f"insert_text_at_position: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ {row} (—Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ {len(self.text)})"
            logging.error(msg)
            raise IndexError(msg) # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ (col) –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        # –ö–æ–ª–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0, –¥–ª–∏–Ω–∞_—Å—Ç—Ä–æ–∫–∏]
        current_line_len = len(self.text[row])
        if not (0 <= col <= current_line_len):
            msg = f"insert_text_at_position: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ {col} –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row} (–¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ {current_line_len})"
            logging.error(msg)
            # –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –±—ã—Ç—å —Å—Ç—Ä–æ–≥–∏–º–∏ –∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞—Ç—å col > current_line_len –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Ç–æ–º –∫–ª—ç–º–ø–∏–º
            # raise IndexError(msg) # <--- –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ –∫–ª—ç–º–ø–∏–Ω–≥–∞
            # –û–¥–Ω–∞–∫–æ, –∫–ª—ç–º–ø–∏–Ω–≥ –Ω–∏–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ col –ª–∏—à—å –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã.
            # –ù–æ –¥–ª—è row –æ—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ —Ñ–∞—Ç–∞–ª—å–Ω–∞.

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º col —Ä–µ–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—Å—Ç–∞–≤–∫—É –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏)
        col = max(0, min(col, current_line_len))

        logging.debug(f"insert_text_at_position: text={text!r} row={row} col={col}")

        lines_to_insert = text.split('\n')

        original_line_prefix = self.text[row][:col]
        original_line_suffix = self.text[row][col:] # "—Ö–≤–æ—Å—Ç" –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

        # 1. –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É: prefix + –ø–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–ª—è–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞
        self.text[row] = original_line_prefix + lines_to_insert[0]

        # 2. –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # lines_to_insert[1:-1] - –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        for offset, line_content in enumerate(lines_to_insert[1:-1], start=1):
            self.text.insert(row + offset, line_content)

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—Å—Ç–∞–≤–ª—è–µ–º—É—é —Å—Ç—Ä–æ–∫—É + –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if len(lines_to_insert) > 1:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É: –ø–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç–∞–≤–ª—è–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ + —Ö–≤–æ—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            self.text.insert(row + len(lines_to_insert) - 1, lines_to_insert[-1] + original_line_suffix)
        else:
            # –í—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "—Ö–≤–æ—Å—Ç"
            self.text[row] += original_line_suffix

        # 4. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        if len(lines_to_insert) == 1:
            # –û—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–π –∂–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–æ–∫–µ
            self.cursor_y = row
            self.cursor_x = col + len(lines_to_insert[0]) # –î–ª–∏–Ω–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤–æ–π/–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
        else:
            # –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–æ–∫—É
            self.cursor_y = row + len(lines_to_insert) - 1
            self.cursor_x = len(lines_to_insert[-1]) # –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

        self.modified = True
        logging.debug(f"insert_text_at_position: –∫—É—Ä—Å–æ—Ä —Ç–µ–ø–µ—Ä—å –≤ (y={self.cursor_y}, x={self.cursor_x})")


    def insert_text(self, text: str) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ (–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ 'delete_selection').
        –ó–∞—Ç–µ–º –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ 'insert').
        –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è undo/redo.
        –ö—É—Ä—Å–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        if not text:
            logging.debug("insert_text: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –Ω–µ—á–µ–≥–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å")
            return

        with self._state_lock: # –î–æ–±–∞–≤–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –∑–¥–µ—Å—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            effective_insert_y, effective_insert_x = self.cursor_y, self.cursor_x

            if self.is_selecting:
                normalized_selection = self._get_normalized_selection_range()
                if normalized_selection:
                    norm_start_coords, norm_end_coords = normalized_selection
                    effective_insert_y, effective_insert_x = norm_start_coords 

                    logging.debug(f"insert_text: –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å {norm_start_coords} –ø–æ {norm_end_coords} –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π.")
                    
                    deleted_segments = self.delete_selected_text_internal(
                        norm_start_coords[0], norm_start_coords[1],
                        norm_end_coords[0], norm_end_coords[1]
                    )
                    
                    self.action_history.append({
                        "type": "delete_selection",
                        "text": deleted_segments,
                        "start": norm_start_coords,
                        "end": norm_end_coords,
                    })
                    self.undone_actions.clear()
                    
                    # delete_selected_text_internal –¥–æ–ª–∂–µ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä
                    effective_insert_y, effective_insert_x = self.cursor_y, self.cursor_x

                    self.is_selecting = False
                    self.selection_start = None
                    self.selection_end = None
                    logging.debug(f"insert_text: –í—ã–¥–µ–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x}).")

            if 0 <= effective_insert_y < len(self.text):
                logging.debug(f"insert_text: –ü–ï–†–ï–î –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤—Å—Ç–∞–≤–∫–æ–π –≤ ({effective_insert_y},{effective_insert_x}), —Å—Ç—Ä–æ–∫–∞[{effective_insert_y}] = {self.text[effective_insert_y]!r}")
            else:
                logging.debug(f"insert_text: –ü–ï–†–ï–î –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤—Å—Ç–∞–≤–∫–æ–π –≤ ({effective_insert_y},{effective_insert_x}). –î–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞: {len(self.text)}")

            try:
                self.insert_text_at_position(text, effective_insert_y, effective_insert_x)
            except IndexError as e:
                logging.error(f"insert_text: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ insert_text_at_position: {e}")
                self._set_status_message(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}")
                return

            if 0 <= self.cursor_y < len(self.text):
                logging.debug(f"insert_text: –ü–û–°–õ–ï –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏, —Å—Ç—Ä–æ–∫–∞[{self.cursor_y}] = {self.text[self.cursor_y]!r}. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x}).")
            else:
                logging.debug(f"insert_text: –ü–û–°–õ–ï –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x}). –î–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞: {len(self.text)}")

            self.action_history.append({
                "type": "insert",
                "text": text,
                "position": (effective_insert_y, effective_insert_x) 
            })
            self.undone_actions.clear()
            
            self.modified = True
            self._set_status_message("–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω")
            logging.debug(f"insert_text: –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–∫—Å—Ç '{text!r}' –≤—Å—Ç–∞–≤–ª–µ–Ω. –§–∏–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x}).")


    def delete_text_internal(self, start_row: int, start_col: int, end_row: int, end_col: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start_row, start_col) .. [end_row, end_col)."""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        if (start_row > end_row) or (start_row == end_row and start_col > end_col):
            start_row, start_col, end_row, end_col = end_row, end_col, start_row, start_col

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
        if not (0 <= start_row < len(self.text)) or not (0 <= end_row < len(self.text)):
            logging.error("delete_text_internal: row index out of bounds (%s..%s)", start_row, end_row)
            return

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ ‚Äî –Ω–µ–ª—å–∑—è –≤—ã–ª–µ–∑–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
        start_col = max(0, min(start_col, len(self.text[start_row])))
        end_col = max(0, min(end_col, len(self.text[end_row])))

        if start_row == end_row:
            self.text[start_row] = self.text[start_row][:start_col] + self.text[start_row][end_col:]
        else:
            # –ß–∞—Å—Ç—å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–æ start_col + —á–∞—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ end_col
            new_first = self.text[start_row][:start_col] + self.text[end_row][end_col:]
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ä–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é
            del self.text[start_row + 1:end_row + 1]
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            self.text[start_row] = new_first

        self.modified = True # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏


    def handle_block_indent(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
        if not self.is_selecting or not self.selection_start or not self.selection_end:
            return

        with self._state_lock:
            norm_range = self._get_normalized_selection_range()
            if not norm_range: return
            
            start_coords, end_coords = norm_range
            start_y, start_x_orig = start_coords
            end_y, end_x_orig = end_coords

            tab_size = self.config.get("editor", {}).get("tab_size", 4)
            use_spaces = self.config.get("editor", {}).get("use_spaces", True)
            indent_str = " " * tab_size if use_spaces else "\t"
            indent_width = len(indent_str) # –î–ª—è Tab —ç—Ç–æ 1, –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤ tab_size

            affected_lines = [] # –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ undo
            original_selection_for_undo = (self.selection_start, self.selection_end) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

            for y in range(start_y, end_y + 1):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                if y >= len(self.text): continue
                
                self.text[y] = indent_str + self.text[y]
                affected_lines.append(y)

            self.modified = True
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å–æ—Ä
            # –ù–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            self.selection_start = (start_y, start_x_orig + indent_width)
            # –ö–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ —Å—Ç—Ä–æ–∫–∞, —á—Ç–æ –∏ –Ω–∞—á–∞–ª–æ, –∏–ª–∏ –Ω–µ—Ç - –ª–æ–≥–∏–∫–∞ –æ–¥–Ω–∞)
            self.selection_end = (end_y, end_x_orig + indent_width)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–¥–Ω–æ–π –∏–∑ –≥—Ä–∞–Ω–∏—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è
            # –û–±—ã—á–Ω–æ –∫—É—Ä—Å–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ self.selection_end
            self.cursor_y = self.selection_end[0]
            self.cursor_x = self.selection_end[1]

            self.action_history.append({
                "type": "block_indent",
                "start_line": start_y,
                "end_line": end_y,
                "indent_str": indent_str,
                "original_selection": original_selection_for_undo,
                "final_selection": (self.selection_start, self.selection_end) # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è redo
            })
            self.undone_actions.clear()
            self._set_status_message(f"Indented {len(affected_lines)} line(s)")
            logging.debug(f"Block indent: lines {start_y}-{end_y} indented by '{indent_str}'. New selection: {self.selection_start} -> {self.selection_end}")


    def handle_block_unindent(self):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –æ—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
        if not self.is_selecting or not self.selection_start or not self.selection_end:
            return

        with self._state_lock:
            norm_range = self._get_normalized_selection_range()
            if not norm_range: return

            start_coords, end_coords = norm_range
            start_y, start_x_orig = start_coords
            end_y, end_x_orig = end_coords
            
            tab_size = self.config.get("editor", {}).get("tab_size", 4)
            use_spaces = self.config.get("editor", {}).get("use_spaces", True)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —É–¥–∞–ª—è—Ç—å: tab_size –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü–∏–∏
            unindent_width = tab_size if use_spaces else 1
            
            changes_for_undo = [] # list of (line_index, removed_prefix_str)
            affected_lines_count = 0
            original_selection_for_undo = (self.selection_start, self.selection_end)

            for y in range(start_y, end_y + 1):
                if y >= len(self.text): continue

                line = self.text[y]
                removed_prefix = ""
                
                current_indent = 0
                for i in range(len(line)):
                    if line[i] == ' ':
                        current_indent += 1
                    elif line[i] == '\t':
                        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ç–∞–± —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ tab_size –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±—ã, —Ç–∞–± —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 1
                        current_indent += tab_size if use_spaces else 1
                        if not use_spaces: # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–∞–±–∞–º–∏, —É–¥–∞–ª—è–µ–º –æ–¥–∏–Ω —Ç–∞–±
                           if i < unindent_width: # unindent_width –¥–ª—è —Ç–∞–±–æ–≤ = 1
                               removed_prefix = line[:i+1]
                               self.text[y] = line[i+1:]
                           break # –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–∞–±
                    else: # –ù–µ –ø—Ä–æ–±–µ–ª –∏ –Ω–µ —Ç–∞–±
                        break # –ö–æ–Ω–µ—Ü –æ—Ç—Å—Ç—É–ø–∞
                
                if use_spaces: # –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                    chars_to_remove = 0
                    # –°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ –Ω–µ –±–æ–ª–µ–µ unindent_width
                    for i in range(len(line)):
                        if line[i] == ' ' and chars_to_remove < unindent_width:
                            chars_to_remove += 1
                        else:
                            break
                    if chars_to_remove > 0:
                        removed_prefix = line[:chars_to_remove]
                        self.text[y] = line[chars_to_remove:]
                
                if removed_prefix:
                    changes_for_undo.append((y, removed_prefix))
                    affected_lines_count += 1
            
            if affected_lines_count > 0:
                self.modified = True
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å–æ—Ä
                # –£–º–µ–Ω—å—à–∞–µ–º x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —à–∏—Ä–∏–Ω—É —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                # –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ —à–∏—Ä–∏–Ω–∞ —Ä–∞–∑–Ω–∞—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
                # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: —Å–¥–≤–∏–Ω—É—Ç—å –Ω–∞ unindent_width, –µ—Å–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–∏–µ.
                # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π: –Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞.
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Å–¥–≤–∏–Ω–µ–º –Ω–∞ unindent_width, –µ—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏–ª–æ—Å—å.
                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ—Ç—Å—Ç—É–ø—ã –±—ã–ª–∏ —Ä–≤–∞–Ω—ã–µ.
                
                # –ü–æ–ø—ã—Ç–∫–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:
                # –ù–∞–π–¥–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª–∏–Ω–∞ —Å–∞–º–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è.
                # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ. –ò–¥–µ–∞–ª—å–Ω–æ - –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å get_string_width.
                
                # –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ unindent_width
                # (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –º–µ–Ω—å—à–µ, —á–µ–º unindent_width)
                sel_start_x_new = max(0, start_x_orig - unindent_width)
                sel_end_x_new = max(0, end_x_orig - unindent_width)

                self.selection_start = (start_y, sel_start_x_new)
                self.selection_end = (end_y, sel_end_x_new)
                
                self.cursor_y = self.selection_end[0]
                self.cursor_x = self.selection_end[1]

                self.action_history.append({
                    "type": "block_unindent",
                    "changes": changes_for_undo,
                    "original_selection": original_selection_for_undo,
                    "final_selection": (self.selection_start, self.selection_end)
                })
                self.undone_actions.clear()
                self._set_status_message(f"Unindented {affected_lines_count} line(s)")
                logging.debug(f"Block unindent: {affected_lines_count} lines from {start_y}-{end_y} unindented. New selection: {self.selection_start} -> {self.selection_end}")
            else:
                self._set_status_message("Nothing to unindent in selection")


    def unindent_current_line(self):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –æ—Ç—Å—Ç—É–ø —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è."""
        if self.is_selecting: # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
            return

        with self._state_lock:
            y = self.cursor_y
            if y >= len(self.text): return

            line = self.text[y]
            if not line or not (line[0] == ' ' or line[0] == '\t'):
                self._set_status_message("Nothing to unindent at line start")
                return

            tab_size = self.config.get("editor", {}).get("tab_size", 4)
            use_spaces = self.config.get("editor", {}).get("use_spaces", True)
            unindent_char_count = tab_size if use_spaces else 1
            
            removed_prefix = ""

            if use_spaces:
                chars_to_remove = 0
                for i in range(len(line)):
                    if line[i] == ' ' and chars_to_remove < unindent_char_count:
                        chars_to_remove += 1
                    else:
                        break
                if chars_to_remove > 0:
                    removed_prefix = line[:chars_to_remove]
                    self.text[y] = line[chars_to_remove:]
                    self.cursor_x = max(0, self.cursor_x - chars_to_remove)
            else: # use_tabs
                if line.startswith('\t'):
                    removed_prefix = '\t'
                    self.text[y] = line[1:]
                    self.cursor_x = max(0, self.cursor_x - 1) # –ò–ª–∏ –Ω–∞ 1, –∏–ª–∏ –Ω–∞ tab_size? –î–ª—è —Ç–∞–±–∞ - –Ω–∞ 1.

            if removed_prefix:
                self.modified = True
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –∑–∞–ø–∏—à–µ–º –∫–∞–∫ "delete_char" –∏–ª–∏ "delete_selection" —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.
                # –ò–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ç–∏–ø "unindent_line".
                # –ó–∞–ø–∏—à–µ–º –∫–∞–∫ "block_unindent" —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
                original_cursor_for_undo = (y, self.cursor_x + len(removed_prefix)) # –ü–æ–∑–∏—Ü–∏—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è

                self.action_history.append({
                    "type": "block_unindent", # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∏–ø
                    "changes": [(y, removed_prefix)],
                    # selection –∑–¥–µ—Å—å –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–æ, –Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                    "original_selection": ((y, original_cursor_for_undo[1]), (y, original_cursor_for_undo[1])),
                    "final_selection": ((y, self.cursor_x), (y, self.cursor_x))
                })
                self.undone_actions.clear()
                self._set_status_message("Line unindented")
                logging.debug(f"Unindented line {y}. Removed '{removed_prefix}'. Cursor at {self.cursor_x}")
            else:
                self._set_status_message("Nothing to unindent at line start")


    def handle_smart_unindent(self):
        """
        –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–∞ (–∞–Ω–∞–ª–æ–≥ Shift+Tab).
        –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ - —É–º–µ–Ω—å—à–∞–µ—Ç –æ—Ç—Å—Ç—É–ø —É –≤—Å–µ—Ö –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è - —É–º–µ–Ω—å—à–∞–µ—Ç –æ—Ç—Å—Ç—É–ø —É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏.
        """
        if self.is_selecting:
            self.handle_block_unindent()
        else:
            self.unindent_current_line()


# PYGMENTS  ------------------------------------------
    def apply_syntax_highlighting_with_pygments(self, lines: list[str], line_indices: list[int]):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫ —Å–ø–∏—Å–∫—É –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pygments.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏.
        """
        if self._lexer is None:
            self.detect_language()
            logging.debug(f"Pygments apply_syntax: Initialized lexer: {self._lexer.name if self._lexer else 'None'}")

        # (–í–∞—à–∞ –∫–∞—Ä—Ç–∞ token_color_map –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å)
        token_color_map = {
            Token.Keyword: curses.color_pair(2), Token.Keyword.Constant: curses.color_pair(2),
            Token.Keyword.Declaration: curses.color_pair(2), Token.Keyword.Namespace: curses.color_pair(2),
            Token.Keyword.Pseudo: curses.color_pair(2), Token.Keyword.Reserved: curses.color_pair(2),
            Token.Keyword.Type: curses.color_pair(2), Token.Name.Builtin: curses.color_pair(7),
            Token.Name.Function: curses.color_pair(3), Token.Name.Class: curses.color_pair(4),
            Token.Name.Decorator: curses.color_pair(5), Token.Name.Exception: curses.color_pair(8) | curses.A_BOLD,
            Token.Name.Variable: curses.color_pair(6), Token.Name.Attribute: curses.color_pair(6),
            Token.Name.Tag: curses.color_pair(5), Token.Literal.String: curses.color_pair(3),
            Token.Literal.String.Doc: curses.color_pair(1), Token.Literal.String.Interpol: curses.color_pair(3),
            Token.Literal.String.Escape: curses.color_pair(5), Token.Literal.String.Backtick: curses.color_pair(3),
            Token.Literal.String.Delimiter: curses.color_pair(3), Token.Literal.Number: curses.color_pair(4),
            Token.Literal.Number.Float: curses.color_pair(4), Token.Literal.Number.Hex: curses.color_pair(4),
            Token.Literal.Number.Integer: curses.color_pair(4), Token.Literal.Number.Oct: curses.color_pair(4),
            Token.Comment: curses.color_pair(1), Token.Comment.Multiline: curses.color_pair(1),
            Token.Comment.Preproc: curses.color_pair(1), Token.Comment.Special: curses.color_pair(1) | curses.A_BOLD,
            Token.Operator: curses.color_pair(6), Token.Operator.Word: curses.color_pair(2),
            Token.Punctuation: curses.color_pair(6), Token.Text: curses.color_pair(0),
            Token.Text.Whitespace: curses.color_pair(0), Token.Error: curses.color_pair(8) | curses.A_BOLD,
            Token.Generic.Heading: curses.color_pair(5) | curses.A_BOLD, Token.Generic.Subheading: curses.color_pair(5),
            Token.Generic.Deleted: curses.color_pair(8), Token.Generic.Inserted: curses.color_pair(4),
            Token.Generic.Emph: curses.color_pair(3) | curses.A_BOLD, Token.Generic.Strong: curses.color_pair(2) | curses.A_BOLD,
            Token.Generic.Prompt: curses.color_pair(7), Token.Generic.Output: curses.color_pair(0),
        }
 
        default_color = curses.color_pair(0)
        highlighted_lines_result = []

        for line_content, line_idx_val in zip(lines, line_indices):
            line_hash = hash(line_content)
            is_text_lexer_special_case = isinstance(self._lexer, TextLexer)
            cache_key = (line_idx_val, line_hash, id(self._lexer), is_text_lexer_special_case)

            if cache_key in self._token_cache:
                cached_segments = self._token_cache[cache_key] # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å list[tuple[str, int]]
                highlighted_lines_result.append(cached_segments)
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—ç—à–∞, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É –Ω–∏–∂–µ
                logging.debug(f"Pygments apply_syntax: Cache HIT for line {line_idx_val}. Segments: {[(s[0].replace(chr(9),'/t/'), s[1]) for s in cached_segments if isinstance(s, tuple) and len(s) == 2 and isinstance(s[0], str)]}")
                continue
            
            logging.debug(f"Pygments apply_syntax: Cache MISS for line {line_idx_val}. Line content: '{line_content}'")
            current_line_highlighted_segments = [] # –≠—Ç–æ –±—É–¥–µ—Ç list[tuple[str, int]]

            if isinstance(self._lexer, TextLexer):
                logging.debug(f"Pygments apply_syntax: Using TextLexer direct passthrough for line {line_idx_val}.")
                if not line_content:
                    current_line_highlighted_segments.append(("", default_color))
                else:
                    current_line_highlighted_segments.append((line_content, default_color))
            else: 
                try:
                    logging.debug(f"Pygments apply_syntax: Lexing line {line_idx_val} with lexer '{self._lexer.name}': '{line_content}'")
                    # –£–±–∏—Ä–∞–µ–º stripnl –∏ ensurenl, –æ–Ω–∏ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã lex()
                    raw_tokens_from_pygments = list(lex(line_content, self._lexer))
                    logging.debug(f"Pygments apply_syntax: Raw tokens for line {line_idx_val}: {raw_tokens_from_pygments}")

                    if not raw_tokens_from_pygments and line_content:
                        logging.warning(f"Pygments apply_syntax: No tokens returned for non-empty line {line_idx_val}: '{line_content}'. Using default color.")
                        current_line_highlighted_segments.append((line_content, default_color))
                    elif not line_content:
                        current_line_highlighted_segments.append(("", default_color))
                    else:
                        for token_type, text_value in raw_tokens_from_pygments:
                            color_attr = default_color
                            current_token_type_for_map = token_type
                            while current_token_type_for_map:
                                if current_token_type_for_map in token_color_map:
                                    color_attr = token_color_map[current_token_type_for_map]
                                    break
                                current_token_type_for_map = current_token_type_for_map.parent
                            current_line_highlighted_segments.append((text_value, color_attr))
                except Exception as e: # –õ–æ–≤–∏–º –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç lex()
                    logging.error(f"Pygments apply_syntax: Error tokenizing line {line_idx_val}: '{line_content}'. Error: {e}", exc_info=True)
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ, –≤—Å—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç
                    current_line_highlighted_segments = [(line_content, default_color)] # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º list[tuple[str,int]]
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            logging.debug(f"Pygments apply_syntax: Processed segments for line {line_idx_val} (lexer '{self._lexer.name if self._lexer else 'None'}'): {[(s[0].replace(chr(9),'/t/'), s[1]) for s in current_line_highlighted_segments if isinstance(s, tuple) and len(s) == 2 and isinstance(s[0], str)]}")
            
            self._token_cache[cache_key] = current_line_highlighted_segments # –°–æ—Ö—Ä–∞–Ω—è–µ–º list[tuple[str,int]]
            if len(self._token_cache) > 2000:
                try: del self._token_cache[next(iter(self._token_cache))]
                except StopIteration: pass
            highlighted_lines_result.append(current_line_highlighted_segments)
        
        return highlighted_lines_result


    def set_initial_cursor_position(self):
        """Sets the initial cursor position and scrolling offsets."""
        self.cursor_x = 0
        self.cursor_y = 0
        self.scroll_top = 0
        self.scroll_left = 0
        # –ü—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        self.is_selecting = False
        self.selection_start = None
        self.selection_end = None
        self.highlighted_matches = [] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–∏—Å–∫–∞
        self.search_matches = []
        self.search_term = ""
        self.current_match_idx = -1


    def init_colors(self):
        """–°–æ–∑–¥–∞—ë–º —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã curses –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º self.colors."""
        if not curses.has_colors():
            self.colors = {}
            return
        curses.start_color()
        curses.use_default_colors()
        bg = -1  # –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω

        # –ë–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã (–ø–æ–¥–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ —Ç–µ–º–µ)
        curses.init_pair(1, curses.COLOR_WHITE,    bg)  # comment -> –±–µ–ª—ã–π
        curses.init_pair(2, curses.COLOR_BLUE,     bg)  # keyword -> —Å–∏–Ω–∏–π
        curses.init_pair(3, curses.COLOR_GREEN,    bg)  # string -> –∑–µ–ª—ë–Ω—ã–π
        curses.init_pair(4, curses.COLOR_MAGENTA,  bg)  # literal, number -> –º–∞–≥–µ–Ω—Ç–∞
        curses.init_pair(5, curses.COLOR_CYAN,     bg)  # decorator, tag -> —Ü–∏–∞–Ω
        curses.init_pair(6, curses.COLOR_WHITE,    bg)  # operator, variable -> –±–µ–ª—ã–π
        curses.init_pair(7, curses.COLOR_YELLOW,   bg)  # builtin, line_number -> –∂—ë–ª—Ç—ã–π
        curses.init_pair(8, curses.COLOR_BLACK, curses.COLOR_RED)    # error -> —á—ë—Ä–Ω—ã–π –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º
        curses.init_pair(9, curses.COLOR_BLACK, curses.COLOR_YELLOW) # search_highlight -> —á—ë—Ä–Ω—ã–π –Ω–∞ –∂—ë–ª—Ç–æ–º
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ Git
        curses.init_pair(10, curses.COLOR_WHITE,   bg)  # status (bright_white)
        curses.init_pair(11, curses.COLOR_RED,     bg)  # status_error (–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)
        curses.init_pair(12, curses.COLOR_GREEN,   bg)  # git_info (–∑–µ–ª—ë–Ω—ã–π —Ç–µ–∫—Å—Ç)
        curses.init_pair(13, curses.COLOR_GREEN,   bg)  # git_dirty (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å A_BOLD)

        self.colors = {
            "comment":   curses.color_pair(1),
            "keyword":   curses.color_pair(2),
            "string":    curses.color_pair(3),
            "literal":   curses.color_pair(4),
            "number":    curses.color_pair(4),
            "type":      curses.color_pair(7),  # –∫–ª–∞—Å—Å—ã/—Ç–∏–ø—ã ‚Äì –∂—ë–ª—Ç—ã–º
            "decorator": curses.color_pair(5),
            "tag":       curses.color_pair(5),
            "operator":  curses.color_pair(6),
            "variable":  curses.color_pair(6),
            "builtins":  curses.color_pair(7),
            "line_number": curses.color_pair(7),
            "error":     curses.color_pair(8) | curses.A_BOLD,
            "status":    curses.color_pair(10) | curses.A_BOLD,
            "status_error": curses.color_pair(11) | curses.A_BOLD,
            "search_highlight": curses.color_pair(9),
            "git_info":  curses.color_pair(12),
            "git_dirty": curses.color_pair(13) | curses.A_BOLD,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞/—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            "green":     curses.color_pair(12),  # –∑–µ–ª—ë–Ω—ã–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—É12 –∫–∞–∫ green)
        }


    def detect_language(self):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–µ–∫—Å–µ—Ä –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–µ–∫—Å–µ—Ä–∞.
        """
        new_lexer = None
        try:
            if self.filename and self.filename != "noname":
                extension = os.path.splitext(self.filename)[1].lower().lstrip(".")
                if extension:
                    try:
                        new_lexer = get_lexer_by_name(extension)
                        logging.debug(f"Pygments: Detected language by extension: {extension} -> {new_lexer.name}")
                    except Exception:
                        logging.debug(f"Pygments: No lexer found for extension {extension}. Trying content guess.")
                        # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                        content = "\n".join(self.text)[:10000] # –£–≤–µ–ª–∏—á–∏–º –æ–±—ä–µ–º –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
                        try:
                            new_lexer = guess_lexer(content, stripall=True) # stripall=True –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å
                            logging.debug(f"Pygments: Guessed language by content: {new_lexer.name}")
                        except Exception:
                             logging.debug("Pygments: Guesser failed. Falling back to TextLexer.")
                             new_lexer = TextLexer() # Fallback
                else: # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                     content = "\n".join(self.text)[:10000]
                     try:
                        new_lexer = guess_lexer(content, stripall=True)
                        logging.debug(f"Pygments: Guessed language by content (no extension): {new_lexer.name}")
                     except Exception:
                         logging.debug("Pygments: Guesser failed (no extension). Falling back to TextLexer.")
                         new_lexer = TextLexer() # Fallback
            else: # –ï—Å–ª–∏ filename None –∏–ª–∏ "noname"
                content = "\n".join(self.text)[:10000]
                try:
                    new_lexer = guess_lexer(content, stripall=True)
                    logging.debug(f"Pygments: Guessed language by content (no file): {new_lexer.name}")
                except Exception:
                     logging.debug("Pygments: Guesser failed (no file). Falling back to TextLexer.")
                     new_lexer = TextLexer() # Fallback

        except Exception as e:
            logging.error(f"Failed to detect language for {self.filename or 'no file'}: {e}", exc_info=True)
            new_lexer = TextLexer()  # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–µ–∫—Å–µ—Ä

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —Ç–æ–∫–µ–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–µ–∫—Å–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è
        if self._lexer is not new_lexer: # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ª–µ–∫—Å–µ—Ä–æ–≤
             logging.debug(f"Pygments: Lexer changed from {self._lexer.name if self._lexer else 'None'} to {new_lexer.name}. Clearing token cache.")
             self._token_cache = {}
             self._lexer = new_lexer
        # else:
             # logging.debug(f"Pygments: Lexer remained {self._lexer.name if self._lexer else 'None'}.")


    def delete_char_internal(self, row: int, col: int) -> str:
        """
        –£–¥–∞–ª—è–µ—Ç **–æ–¥–∏–Ω** —Å–∏–º–≤–æ–ª –ø–æ (row, col) –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ history.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª (–∏–ª–∏ '').
        """
        if not (0 <= row < len(self.text)):
            return ""
        line = self.text[row]
        if not (0 <= col < len(line)):
            return ""
        removed = line[col]
        self.text[row] = line[:col] + line[col + 1 :]
        self.modified = True
        logging.debug("delete_char_internal: removed %r at (%s,%s)", removed, row, col)
        return removed


    def handle_resize(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
        """
        logging.debug("handle_resize called")
        try:
            self.height, self.width = self.stdscr.getmaxyx()
            self._set_status_message(f"Resized to {self.width}x{self.height}")
            self._draw_buffer()
        except Exception as e:
            logging.error(f"Error in handle_resize: {e}", exc_info=True)
            self._set_status_message("Resize error (see log)")


    def _draw_buffer(self) -> None:
        """
        Paint visible part of self.text to `stdscr`.
        Handles both vertical (scroll_top) and horizontal (scroll_left) scrolling.
        """
        logging.debug(
            "Drawing buffer: cur=(%s,%s) scroll=(%s,%s)",
            self.cursor_x, self.cursor_y, self.scroll_left, self.scroll_top
        )
        try:
            # ‚îÄ‚îÄ draw lines ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            for scr_y, line in enumerate(
                self.text[self.scroll_top : self.scroll_top + self.height]
            ):
                # Cut line by horizontal scroll, then clip to window width ‚Äë 1
                visible = line[self.logical_offset_by_width(line, self.scroll_left) :]
                # soft‚Äëclip by width
                out, w_acc = "", 0
                for ch in visible:
                    w = wcwidth(ch)
                    if w < 0:       # skip control char
                        continue
                    if w_acc + w > self.width - 1:
                        break
                    out += ch
                    w_acc += w

                self.stdscr.move(scr_y, 0)
                self.stdscr.clrtoeol()
                self.stdscr.addstr(scr_y, 0, out)

            # ‚îÄ‚îÄ place cursor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            scr_y = self.cursor_y - self.scroll_top
            # width up to logical cursor, then minus horizontal scroll
            scr_x = self.get_display_width(
                self.text[self.cursor_y][: self.cursor_x]
            ) - self.scroll_left

            # clamp to window
            scr_y = max(0, min(scr_y, self.height - 1))
            scr_x = max(0, min(scr_x, self.width - 1))
            self.stdscr.move(scr_y, scr_x)

        except Exception as exc:
            logging.error("Error in _draw_buffer: %s", exc, exc_info=True)
            self._set_status_message("Draw error (see log)")


    def logical_offset_by_width(self, line: str, cells: int) -> int:
        """
        Return index in *line* such that rendered width == *cells*.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
        —Å–∏–º–≤–æ–ª–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–Ω —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞.
        """
        acc = 0
        for i, ch in enumerate(line):
            w = wcwidth(ch)
            if w < 0:
                continue
            if acc + w > cells:
                return i
            acc += w
        return len(line)



    # ===================== –ö—É—Ä—Å–æ—Ä: —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –∏ –¥–æ–º–∞—à–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ ======================

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö—É—Ä—Å–æ—Ä: –±–∞–∑–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # `array left (<-) `
    def handle_left(self) -> None:
        """
        Move cursor one position to the left.
        If at column¬†0 ‚Äî jump to the end of the previous line (if any).
        """
        if self.cursor_x > 0:
            self.cursor_x -= 1
        elif self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = len(self.text[self.cursor_y])

        self._clamp_scroll()                       # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º scroll_top / scroll_left
        logging.debug("cursor ‚Üê (%d,%d)", self.cursor_y, self.cursor_x)

    # `array right (->)`
    def handle_right(self) -> None:
        """
        Move cursor one position to the right.
        ‚Ä¢ –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏¬†‚Äî¬†—Å–¥–≤–∏–≥–∞–µ–º—Å—è –Ω–∞‚ÄØ1 ¬´–ø–µ—á–∞—Ç–∞–µ–º—É—é¬ª –∫–æ–ª–æ–Ω–∫—É,
        –ø—Ä–æ–ø—É—Å–∫–∞—è —Å–∏–º–≤–æ–ª—ã –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã (–∫–æ–º–±–∏–Ω–∏—Ä—É—é—â–∏–µ).
        ‚Ä¢ –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞¬†‚Äî¬†–ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –µ—ë –Ω–∞—á–∞–ª–æ.
        –ü—Ä–∏ –ª—é–±–æ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º scroll‚Äë–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
        """
        try:
            line = self.text[self.cursor_y]

            #  –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
            if self.cursor_x < len(line):
                self.cursor_x += 1
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã (diacritics/ZWJ/VS16‚Ä¶)
                while self.cursor_x < len(line) and wcwidth(line[self.cursor_x]) == 0:
                    self.cursor_x += 1

            #   –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ ‚Üí –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π
            elif self.cursor_y < len(self.text) - 1:
                self.cursor_y += 1
                self.cursor_x = 0

            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω—ã
            self._clamp_scroll()
            logging.debug("cursor ‚Üí (%d,%d)", self.cursor_y, self.cursor_x)

        except Exception:
            logging.exception("Error in handle_right")
            self._set_status_message("Cursor error (see log)")

    # `array up`
    def handle_up(self) -> None:
        """
        Move cursor one line up.

        ‚Ä¢ –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.  
        ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.  
        ‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º _clamp_scroll() ‚Äì –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω–∞.
        """
        if self.cursor_y > 0:
            self.cursor_y -= 1
            # –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–µ ¬´–≤—ã–¥–∞–≤–∞—Ç—å¬ª –∑–∞ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))

        self._clamp_scroll()
        logging.debug("cursor ‚Üë (%d,%d)", self.cursor_y, self.cursor_x)

    # `array down`
    def handle_down(self) -> None:
        """
        Move cursor one line down.

        ‚Ä¢ –ï—Å–ª–∏ –≤–Ω–∏–∑—É —Ñ–∞–π–ª–∞ ‚Äì –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ.  
        ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.  
        ‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º _clamp_scroll() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.
        """
        if self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))

        self._clamp_scroll()
        logging.debug("cursor ‚Üì (%d,%d)", self.cursor_y, self.cursor_x)


    def _clamp_scroll(self) -> None:
        """
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ scroll_top –∏ scroll_left
        –≤—Å–µ–≥–¥–∞ —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏.
        """
        # —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        height, width = self.stdscr.getmaxyx()
        # –æ–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ –º–∏–Ω—É—Å —Å—Ç—Ä–æ–∫–∏ –Ω–æ–º–µ—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞)
        text_height = max(1, height - 2)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        if self.cursor_y < self.scroll_top:
            self.scroll_top = self.cursor_y
        elif self.cursor_y >= self.scroll_top + text_height:
            self.scroll_top = self.cursor_y - text_height + 1

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –¥–∏—Å–ø–ª–µ–π–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–æ –∫—É—Ä—Å–æ—Ä–∞
        disp_x = self.get_display_width(self.text[self.cursor_y][: self.cursor_x])
        if disp_x < self.scroll_left:
            self.scroll_left = disp_x
        elif disp_x >= self.scroll_left + width:
            self.scroll_left = disp_x - width + 1

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.scroll_top = max(0, self.scroll_top)
        self.scroll_left = max(0, self.scroll_left)


    def get_display_width(self, text: str) -> int:
        """
        Return the printable width of *text* in terminal cells.

        * Uses wcwidth / wcswidth to honour full‚Äëwidth CJK.
        * Treats non‚Äëprintable characters (wcwidth == ‚Äë1) as width¬†0.
        """
        # Fast‚Äëpath for ASCII
        if text.isascii():
            return len(text)

        width = wcswidth(text)
        if width < 0:          # Means string contains non‚Äëprintables
            width = 0
            for ch in text:
                w = wcwidth(ch)
                width += max(w, 0)   # non‚Äëprintables add 0
        return width

    def _ensure_cursor_in_bounds(self) -> None:
        """
        Clamp `cursor_x` / `cursor_y` so they always reference a valid position
        inside `self.text`.

        ‚Ä¢ –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Üí —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ `[""]`, –∏ –∫—É—Ä—Å–æ—Ä —Å—Ç–∞–≤–∏—Ç—Å—è –≤ (0,‚ÄØ0).  
        ‚Ä¢ `cursor_y` –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0 ‚Ä¶ len(text)-1].  
        ‚Ä¢ `cursor_x` –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0 ‚Ä¶ len(current_line)].  
        ‚Ä¢ –ü–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥.
        """
        # –ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä ‚Äì –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        if not self.text:
            self.text.append("")

        max_y = len(self.text) - 1
        self.cursor_y = max(0, min(self.cursor_y, max_y))

        max_x = len(self.text[self.cursor_y])
        self.cursor_x = max(0, min(self.cursor_x, max_x))

        logging.debug("Cursor clamped ‚Üí (%d,%d) [line_len=%d]",
                    self.cursor_y, self.cursor_x, max_x)


    # # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö—É—Ä—Å–æ—Ä: Home/End , pUp/pDown ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # key home
    def handle_home(self):
        """Moves the cursor to the beginning of the current line (after leading whitespace)."""
        # "–£–º–Ω—ã–π" Home: –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–µ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç—Å—Ç—É–ø–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–æ –æ—Ç—Å—Ç—É–ø–∞;
        # –µ—Å–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –æ—Ç—Å—Ç—É–ø–∞ (–∏–ª–∏ –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞), –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏.
        current_line = self.text[self.cursor_y]
        leading_whitespace = re.match(r"^(\s*)", current_line)
        indent_end = leading_whitespace.end() if leading_whitespace else 0

        if self.cursor_x != indent_end:
            self.cursor_x = indent_end
        else:
            self.cursor_x = 0
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ _position_cursor
    
    # key end
    def handle_end(self):
        """Moves the cursor to the end of the current line."""
        self.cursor_x = len(self.text[self.cursor_y])
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ _position_cursor

    # key page-up
    def handle_page_up(self):
        """Moves the cursor up by one screen height."""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã—Å–æ—Ç—É –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        height, width = self.stdscr.getmaxyx()
        text_area_height = max(1, height - 2) # –í—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ = –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ - 1 —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ + 1 –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é scroll_top
        new_scroll_top = max(0, self.scroll_top - text_area_height)
        lines_moved = self.scroll_top - new_scroll_top # –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ä–µ–∞–ª—å–Ω–æ —Å–¥–≤–∏–Ω—É–ª—Å—è –≤–∏–¥

        self.scroll_top = new_scroll_top
        self.cursor_y = max(0, self.cursor_y - lines_moved) # –°–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å—Ç—Ä–æ–∫

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ _position_cursor

    # ###  key page-down
    def handle_page_down(self):
        """Moves the cursor down by one screen height."""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        height, width = self.stdscr.getmaxyx()
        text_area_height = max(1, height - 2) # –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é scroll_top
        # scroll_top –Ω–µ –º–æ–∂–µ—Ç –æ–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∏–∂–µ, —á–µ–º len(self.text) - text_area_height
        new_scroll_top = min(len(self.text) - text_area_height, self.scroll_top + text_area_height)
        new_scroll_top = max(0, new_scroll_top) # –ù–µ –º–µ–Ω—å—à–µ 0

        lines_moved = new_scroll_top - self.scroll_top # –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ä–µ–∞–ª—å–Ω–æ —Å–¥–≤–∏–Ω—É–ª—Å—è –≤–∏–¥

        self.scroll_top = new_scroll_top
        self.cursor_y = min(len(self.text) - 1, self.cursor_y + lines_moved) # –°–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å—Ç—Ä–æ–∫

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ _position_cursor

    def handle_backspace(self) -> None:
        """
        –õ–æ–≥–∏–∫–∞ Backspace —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–ª–æ—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è.

        - –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äì —É–¥–∞–ª–∏—Ç—å *–≤–µ—Å—å* –¥–∏–∞–ø–∞–∑–æ–Ω (–∫–∞–∫ Del).
        - –ò–Ω–∞—á–µ:
            ‚Äì –∫—É—Ä—Å–æ—Ä –Ω–µ –≤ 0-–π –∫–æ–ª–æ–Ω–∫–µ ‚Üí —É–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª —Å–ª–µ–≤–∞;
            ‚Äì –∫—É—Ä—Å–æ—Ä –≤ 0-–π –∫–æ–ª–æ–Ω–∫–µ –∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–µ—Ä–≤–∞—è ‚Üí —Å–∫–ª–µ–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π.

        –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–Ω–æ—Å—è—Ç—Å—è –≤ `action_history`, —Å—Ç–µ–∫ redo (`undone_actions`)
        –æ—á–∏—â–∞–µ—Ç—Å—è. –ü–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∞–ª–∏–¥–Ω—ã.
        """
        with self._state_lock:
            try:
                # ‚îÄ‚îÄ 1. –£–¥–∞–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if self.is_selecting: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ is_selecting, —Ç.–∫. start/end –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã
                    normalized_range = self._get_normalized_selection_range()
                    if not normalized_range:
                        logging.warning("handle_backspace: is_selecting=True, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.")
                        # –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å is_selecting, –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
                        self.is_selecting = False
                        self.selection_start = None
                        self.selection_end = None
                        return # –ò–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ª–æ–≥–∏–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –µ—Å–ª–∏ —ç—Ç–æ –∂–µ–ª–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

                    norm_start_coords, norm_end_coords = normalized_range
                    
                    logging.debug(f"handle_backspace: –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å {norm_start_coords} –ø–æ {norm_end_coords}")

                    # –£–¥–∞–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    # delete_selected_text_internal –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä –≤ norm_start_coords
                    removed_segments = self.delete_selected_text_internal(
                        norm_start_coords[0], norm_start_coords[1],
                        norm_end_coords[0], norm_end_coords[1]
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    self.action_history.append({
                        "type": "delete_selection",
                        "text": removed_segments,    # list[str]
                        "start": norm_start_coords,
                        "end": norm_end_coords,
                    })
                    
                    # –ö—É—Ä—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ norm_start_coords –º–µ—Ç–æ–¥–æ–º delete_selected_text_internal
                    # self.cursor_y, self.cursor_x = norm_start_coords # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–∞–¥–µ–∂–µ–Ω

                    self.is_selecting = False
                    self.selection_start = None
                    self.selection_end = None
                    self._set_status_message("–ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω")
                    logging.debug(f"handle_backspace: –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x})")

                # ‚îÄ‚îÄ 2. –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª —Å–ª–µ–≤–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∫—É—Ä—Å–æ—Ä –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏) ‚îÄ‚îÄ
                elif self.cursor_x > 0:
                    y, x = self.cursor_y, self.cursor_x
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ y —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    if y >= len(self.text):
                        logging.warning(f"handle_backspace: cursor_y {y} –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ {len(self.text)}")
                        return

                    line = self.text[y]
                    deleted_char = line[x - 1]
                    self.text[y] = line[:x - 1] + line[x:]
                    self.cursor_x -= 1 # –°–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤–ª–µ–≤–æ

                    self.action_history.append({
                        "type": "delete_char", # –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (backspace)
                        "text": deleted_char,
                        "position": (y, self.cursor_x), # –ü–æ–∑–∏—Ü–∏—è –ö–£–î–ê –≤—Å—Ç–∞–ª –∫—É—Ä—Å–æ—Ä (—Ç.–µ. x-1)
                                                        # –∏–ª–∏ (y,x) - –ø–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ *–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è*?
                                                        # –î–ª—è Backspace, 'position' –æ–±—ã—á–Ω–æ —ç—Ç–æ (y, x-1) - –∫—É–¥–∞ –∫—É—Ä—Å–æ—Ä –≤—Å—Ç–∞–ª.
                                                        # 'text' - —ç—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª.
                                                        # undo(delete_char) –≤—Å—Ç–∞–≤–∏—Ç 'text' –≤ 'position' –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç –∫—É—Ä—Å–æ—Ä –≤ 'position'.
                                                        # –ï—Å–ª–∏ position (y,x-1), —Ç–æ –≤—Å—Ç–∞–≤–∏—Ç—Å—è line[:x-1] + char + line[x-1:]. –í–µ—Ä–Ω–æ.
                    })
                    self._set_status_message("–°–∏–º–≤–æ–ª —É–¥–∞–ª–µ–Ω")
                    logging.debug(f"handle_backspace: –°–∏–º–≤–æ–ª '{deleted_char}' –≤ ({y},{x-1}) —É–¥–∞–ª–µ–Ω (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π x –±—ã–ª {x})")

                # ‚îÄ‚îÄ 3. –í –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (cursor_x == 0), –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Å–∫–ª–µ–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π ‚îÄ‚îÄ
                elif self.cursor_y > 0: # cursor_x –∑–¥–µ—Å—å —Ä–∞–≤–µ–Ω 0
                    current_row_idx = self.cursor_y
                    prev_row_idx = current_row_idx - 1

                    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ
                    text_moved_up = self.text[current_row_idx]
                    
                    # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ –±—ã–≤—à–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                    new_cursor_x = len(self.text[prev_row_idx])
                    
                    self.text[prev_row_idx] += text_moved_up
                    del self.text[current_row_idx]

                    self.cursor_y = prev_row_idx
                    self.cursor_x = new_cursor_x

                    self.action_history.append({
                        "type": "delete_newline", # –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ (backspace –Ω–∞ newline)
                        "text": text_moved_up,    # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ–¥–Ω—è—Ç –Ω–∞–≤–µ—Ä—Ö
                        "position": (self.cursor_y, self.cursor_x), # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –ü–û–°–õ–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                                                                    # (—Ç.–µ. –º–µ—Å—Ç–æ, –≥–¥–µ –±—ã–ª newline)
                    })
                    self._set_status_message("–°—Ç—Ä–æ–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
                    logging.debug(f"handle_backspace: –°—Ç—Ä–æ–∫–∞ {current_row_idx} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞ —Å {prev_row_idx}. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y},{self.cursor_x})")

                else:
                    # –ö—É—Ä—Å–æ—Ä –≤ (0,0) - –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                    logging.debug("handle_backspace: –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ ‚Äì –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è")
                    self._set_status_message("–ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞")
                    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, modified –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –≤ –∏—Å—Ç–æ—Ä–∏—é –Ω–µ –ø–∏—à–µ–º

                # ‚îÄ‚îÄ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if self.modified: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    self.undone_actions.clear()
                    self._ensure_cursor_in_bounds() # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
                    self._clamp_scroll()            # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, backspace –≤ (0,0)), —Ç–æ modified=False, –∏ —ç—Ç–∏ —à–∞–≥–∏ –Ω–µ –Ω—É–∂–Ω—ã.
                # `self.modified = True` –¥–æ–ª–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ.
                # –í –±–ª–æ–∫–µ `else` (–∫—É—Ä—Å–æ—Ä –≤ (0,0)) `self.modified` –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.

            except Exception: # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                logging.exception("handle_backspace: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                self._set_status_message("–û—à–∏–±–∫–∞ Backspace (—Å–º. –ª–æ–≥)")


    def handle_delete(self):
        """
        –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –∏–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–º–µ–Ω—ã.
        """
        with self._state_lock:  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
            if self.is_selecting: # self.selection_start –∏ self.selection_end –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ None, –µ—Å–ª–∏ is_selecting=True
                normalized_range = self._get_normalized_selection_range()
                if not normalized_range:
                    # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ is_selecting=True –∏ selection_start/end —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã,
                    # –Ω–æ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
                    logging.warning("handle_delete: is_selecting=True, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.")
                    return

                norm_start_coords, norm_end_coords = normalized_range
                
                logging.debug(f"handle_delete: –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å {norm_start_coords} –ø–æ {norm_end_coords}")
                
                # –£–¥–∞–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                # delete_selected_text_internal –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                # –∏, –≤ –∏–¥–µ–∞–ª–µ, —Å–∞–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä –≤ norm_start_coords.
                deleted_text_lines = self.delete_selected_text_internal(
                    norm_start_coords[0], norm_start_coords[1],
                    norm_end_coords[0], norm_end_coords[1]
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                action = {
                    "type": "delete_selection",
                    "text": deleted_text_lines,         # –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (list[str])
                    "start": norm_start_coords,         # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ
                    "end": norm_end_coords            # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü
                }
                self.action_history.append(action)
                self.modified = True
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ) –≤—ã–¥–µ–ª–µ–Ω–∏—è.
                # –≠—Ç–æ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å delete_selected_text_internal. –ï—Å–ª–∏ —Ç–∞–∫, —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç, –Ω–æ –Ω–µ –≤—Ä–µ–¥–∏—Ç.
                # –ï—Å–ª–∏ delete_selected_text_internal –ù–ï —Å—Ç–∞–≤–∏—Ç –∫—É—Ä—Å–æ—Ä, —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ö–†–ò–¢–ò–ß–ù–ê.
                self.cursor_y, self.cursor_x = norm_start_coords
                
                self.is_selecting = False
                self.selection_start = None
                self.selection_end = None
                self.undone_actions.clear()  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é redo
                self._set_status_message("–í—ã–¥–µ–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                logging.debug(f"handle_delete: –í—ã–¥–µ–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ö—É—Ä—Å–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {self.cursor_y}, {self.cursor_x}")

            else:
                # –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, –æ–±—ã—á–Ω—ã–π Delete (—É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫)
                y, x = self.cursor_y, self.cursor_x
                
                if y >= len(self.text):
                    logging.warning(f"handle_delete: cursor_y {y} –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ {len(self.text)}")
                    return

                current_line_len = len(self.text[y])

                if x < current_line_len:
                    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
                    deleted_char = self.text[y][x]
                    self.text[y] = self.text[y][:x] + self.text[y][x + 1:]
                    self.modified = True

                    self.action_history.append({
                        "type": "delete_char",
                        "text": deleted_char,
                        "position": (y, x) # –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ
                    })
                    self.undone_actions.clear()
                    logging.debug(f"handle_delete: –£–¥–∞–ª–µ–Ω —Å–∏–º–≤–æ–ª '{deleted_char}' –≤ ({y}, {x})")

                elif y < len(self.text) - 1:
                    # –ö—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (x == current_line_len), —É–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                    next_line_idx = y + 1
                    next_line_content = self.text[next_line_idx]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ *–ø–µ—Ä–µ–¥* –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                    # –î–ª—è delete_newline, "position" —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –±—ã–ª newline,
                    # –∏ –∫—É–¥–∞ –≤—Å—Ç–∞–Ω–µ—Ç –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.
                    original_cursor_pos_for_history = (y, x) # x –∑–¥–µ—Å—å —ç—Ç–æ len(self.text[y])

                    self.text[y] += self.text.pop(next_line_idx)
                    self.modified = True
                    
                    # –ö—É—Ä—Å–æ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –≤ (y,x) –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                    self.cursor_y = y
                    self.cursor_x = x 

                    self.action_history.append({
                        "type": "delete_newline",
                        "text": next_line_content, # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                        "position": original_cursor_pos_for_history # –ü–æ–∑–∏—Ü–∏—è, –≥–¥–µ –±—ã–ª newline
                    })
                    self.undone_actions.clear()
                    logging.debug(f"handle_delete: –£–¥–∞–ª–µ–Ω newline –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {next_line_idx} –≤ {y}. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y}, {self.cursor_x})")
                else:
                    logging.debug("handle_delete: –ö—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è.")


    def delete_selected_text_internal(self, start_y: int, start_x: int, end_y: int, end_x: int) -> list[str]:
        """
        –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥: —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ (start_y, start_x) –∏ (end_y, end_x).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—Å–µ–≥–º–µ–Ω—Ç–æ–≤).
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –≤ (start_y, start_x).
        –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç self.modified = True.
        """
        logging.debug(f"delete_selected_text_internal: –£–¥–∞–ª–µ–Ω–∏–µ —Å ({start_y},{start_x}) –ø–æ ({end_y},{end_x})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–±–∞–∑–æ–≤–∞—è)
        if not (0 <= start_y < len(self.text) and 0 <= end_y < len(self.text) and \
                0 <= start_x <= len(self.text[start_y]) and 0 <= end_x <= len(self.text[end_y])):
            logging.error(f"delete_selected_text_internal: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ({start_y},{start_x}) –ø–æ ({end_y},{end_x})")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []

        deleted_segments = []

        if start_y == end_y:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            line_content = self.text[start_y]
            deleted_segments.append(line_content[start_x:end_x])
            self.text[start_y] = line_content[:start_x] + line_content[end_x:]
        else:
            # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (—á–∞—Å—Ç–∏—á–Ω–æ)
            line_start_content = self.text[start_y]
            deleted_segments.append(line_start_content[start_x:])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ start_y, –∫–æ—Ç–æ—Ä–∞—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è
            remaining_prefix_on_start_line = line_start_content[:start_x]

            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ (—á–∞—Å—Ç–∏—á–Ω–æ)
            line_end_content = self.text[end_y]
            deleted_segments.append(line_end_content[:end_x]) # –≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ, –µ—Å–ª–∏ start_y+1 == end_y, –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ end_y, –∫–æ—Ç–æ—Ä–∞—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è (–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –∫ prefix)
            remaining_suffix_on_end_line = line_end_content[end_x:]

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É start_y –∏ end_y (–Ω–µ –≤–∫–ª—é—á–∞—è –∏—Ö —Å–∞–º–∏)
            # –°—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: –æ—Ç start_y + 1 –¥–æ end_y - 1
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–µ–º –∏—Ö –¥–ª—è deleted_segments
            if end_y > start_y + 1:
                 # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é, —Ç.–∫. –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å
                deleted_segments[1:1] = self.text[start_y + 1 : end_y]


            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.text[start_y] = remaining_prefix_on_start_line + remaining_suffix_on_end_line
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: –æ—Ç start_y + 1 –¥–æ end_y –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
            del self.text[start_y + 1 : end_y + 1]
        
        self.cursor_y = start_y
        self.cursor_x = start_x
        self.modified = True
        logging.debug(f"delete_selected_text_internal: –£–¥–∞–ª–µ–Ω–æ. –ö—É—Ä—Å–æ—Ä –≤ ({self.cursor_y},{self.cursor_x}). –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: {deleted_segments!r}")
        return deleted_segments


    # –¥–ª—è key TAB –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    def handle_tab(self):
        """Inserts spaces or a tab character depending on configuration."""
        tab_size = self.config.get("editor", {}).get("tab_size", 4)
        use_spaces = self.config.get("editor", {}).get("use_spaces", True)
        # current_line = self.text[self.cursor_y] # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å

        # –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –º–µ—Ç–æ–¥–∞ self.insert_text
        text_to_insert_val = " " * tab_size if use_spaces else "\t" 

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º insert_text –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–±—Ä–æ—Å–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.insert_text(text_to_insert_val)
        logging.debug(f"handle_tab: Inserted {text_to_insert_val!r} into line {self.cursor_y}, text now: {self.text[self.cursor_y]!r}")
    
    # key TAB - –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
    # def handle_smart_tab(self):
    #     """
    #     –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (cursor_x == 0),
    #     –∫–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—Å—Ç—É–ø (–ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±) –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏.
    #     –ï—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–ª–∏ –æ—Ç—Å—Ç—É–ø –ø—É—Å—Ç–æ–π,
    #     –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø (tab_size –∏–ª–∏ '\t') –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏.
    #     –ò–Ω–∞—á–µ (–∫—É—Ä—Å–æ—Ä –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏) ‚Äì –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
    #     """
    #     # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ, Tab –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    #     # –ò–ª–∏ —Å–¥–≤–∏–Ω—É—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏? –ü–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É: —É–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∏—Ç—å Tab.
    #     if self.is_selecting:
    #          # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–±—Ä–æ—Å–∏—Ç undone_actions
    #          self.delete_selected_text_internal(*self.selection_start, *self.selection_end)
    #          self.selection_start = self.selection_end = None
    #          self.is_selecting = False
    #          # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Ç–∞–± –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    #          self.handle_tab() # handle_tab –≤—ã–∑–æ–≤–µ—Ç insert_text, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ
    #          return # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è

    #     # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
    #     if self.cursor_x > 0:
    #         # –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∞–± –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    #         # handle_tab –≤—ã–∑–æ–≤–µ—Ç insert_text, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ
    #         self.handle_tab()
    #         return

    #     # –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (self.cursor_x == 0)
    #     indentation_to_copy = ""
    #     if self.cursor_y > 0:
    #         # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ prev_line_idx –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    #         prev_line_idx = self.cursor_y - 1
    #         if 0 <= prev_line_idx < len(self.text):
    #             prev_line = self.text[prev_line_idx]
    #             m = re.match(r"^(\s*)", prev_line)
    #             if m:
    #                 indentation_to_copy = m.group(1)
    #         else:
    #             logging.warning(f"Smart tab: Invalid previous line index {prev_line_idx}")


    #     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞–±/–ø—Ä–æ–±–µ–ª—ã
    #     if not indentation_to_copy:
    #         # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞),
    #         # –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞–±/–ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    #         tab_size = self.config.get("editor", {}).get("tab_size", 4)
    #         use_spaces = self.config.get("editor", {}).get("use_spaces", True)
    #         insert_text = " " * tab_size if use_spaces else "\t"
    #     else:
    #         # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    #         insert_text = indentation_to_copy

    #     # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—Å—Ç—É–ø–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º insert_text –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ undo
    #     # insert_text —Å–∞–º –¥–æ–±–∞–≤–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–±—Ä–æ—Å–∏—Ç undone_actions
    #     self.insert_text(insert_text)
    #     logging.debug(f"handle_smart_tab: Inserted {insert_text!r} into line {self.cursor_y}, text now: {self.text[self.cursor_y]!r}")
    #     # –ö—É—Ä—Å–æ—Ä —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ insert_text

    #     logging.debug(f"Smart tab: Inserted indentation {insert_text!r} at line start")

    def handle_smart_tab(self):
        """
        –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—Ç—Å—Ç—É–ø —É –≤—Å–µ—Ö –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (cursor_x == 0) –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è,
        –∫–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—Å—Ç—É–ø (–ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±) –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π.
        –ò–Ω–∞—á–µ (–∫—É—Ä—Å–æ—Ä –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏—è) ‚Äì –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø.
        """
        if self.is_selecting:
            self.handle_block_indent()
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if self.cursor_x > 0:
            # –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∞–± –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            self.handle_tab() # handle_tab –≤—ã–∑–æ–≤–µ—Ç insert_text, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ
            return

        # –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (self.cursor_x == 0)
        indentation_to_copy = ""
        if self.cursor_y > 0:
            prev_line_idx = self.cursor_y - 1
            if 0 <= prev_line_idx < len(self.text):
                prev_line = self.text[prev_line_idx]
                m = re.match(r"^(\s*)", prev_line)
                if m:
                    indentation_to_copy = m.group(1)
            else:
                logging.warning(f"Smart tab: Invalid previous line index {prev_line_idx}")

        if not indentation_to_copy:
            tab_size = self.config.get("editor", {}).get("tab_size", 4)
            use_spaces = self.config.get("editor", {}).get("use_spaces", True)
            text_to_insert_val = " " * tab_size if use_spaces else "\t"
        else:
            text_to_insert_val = indentation_to_copy

        self.insert_text(text_to_insert_val) # insert_text —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π
        logging.debug(f"handle_smart_tab (no selection, line start): Inserted {text_to_insert_val!r}")


    def handle_char_input(self, key):
        """
        Handles all character‚Äêinput, separating control keys (Ctrl+‚Ä¶) from printable text.
        """
        try:
            #  Control keys (ASCII < 32)
            if isinstance(key, int) and key < 32:
                self.handle_control_key(key)
                return

            # Printable characters
            if isinstance(key, int):
                char = chr(key)
                self.insert_text(char)
            elif isinstance(key, str) and len(key) == 1:
                self.insert_text(key)
            else:
                logging.warning(f"handle_char_input received unexpected type: {type(key)}")

        except Exception as e:
            logging.exception(f"Error handling character input: {str(e)}")
            self._set_status_message(f"Input error: {str(e)[:80]}...")


    def handle_control_key(self, key_code):
        """
        Map control‚Äêkey codes to editor actions.
        """
        if key_code == 19:   # Ctrl+S
            self.save_file()
        elif key_code == 6:  # Ctrl+F
            self.find_prompt()
        elif key_code == 15: # Ctrl+O
            self.open_file()
        elif key_code == 3:  # Ctrl+Q
            self.exit_editor()
        else:
            logging.debug(f"Unhandled control key: {key_code}")


    def handle_enter(self):
        """Handles the Enter key, creating a new line at the cursor position."""
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ, Enter –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        with self._state_lock: # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ, Enter –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            if self.is_selecting:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç —Å–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–±—Ä–æ—Å–∏—Ç undone_actions
                self.delete_selected_text_internal(*self.selection_start, *self.selection_end)
                self.selection_start = self.selection_end = None
                self.is_selecting = False
                # –ö—É—Ä—Å–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ internal –º–µ—Ç–æ–¥–µ
            self.insert_text("\n")

        logging.debug("Handled Enter key")

    def parse_key(self, key_str: str) -> int:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É-–æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏ –≤ curses-–∫–æ–¥.
        """
        if isinstance(key_str, int):
            return key_str

        key_str = key_str.strip().lower()
        if not key_str:
            raise ValueError("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ named, –≤–∫–ª—é—á–∞—è shift-–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        # (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –≤ named)
        named = {
            "del": getattr(curses, 'KEY_DC', 330),
            "delete": getattr(curses, 'KEY_DC', 330),
            "backspace": getattr(curses, 'KEY_BACKSPACE', 127), # –û–±—ã—á–Ω–æ 263 –≤ keypad(True)
            "tab": ord("\t"), # curses.KEY_TAB (–æ–±—ã—á–Ω–æ 9)
            "enter": ord("\n"), # curses.KEY_ENTER (–æ–±—ã—á–Ω–æ 10 –∏–ª–∏ 13)
            "space": ord(" "),
            "esc": 27, # curses.KEY_EXIT –∏–ª–∏ 27
            "escape": 27,
            "up": getattr(curses, 'KEY_UP', 259),
            "down": getattr(curses, 'KEY_DOWN', 258),
            "left": getattr(curses, 'KEY_LEFT', 260),
            "right": getattr(curses, 'KEY_RIGHT', 261),
            "home": getattr(curses, 'KEY_HOME', 262),
            "end": getattr(curses, 'KEY_END', 360), # –ú–æ–∂–µ—Ç –±—ã—Ç—å KEY_LL –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            "pageup": getattr(curses, 'KEY_PPAGE', 339),
            "pgup": getattr(curses, 'KEY_PPAGE', 339),
            "pagedown": getattr(curses, 'KEY_NPAGE', 338),
            "pgdn": getattr(curses, 'KEY_NPAGE', 338),
            "insert": getattr(curses, 'KEY_IC', 331),
            # –Ø–≤–Ω—ã–µ Shift-–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü. –∫–ª–∞–≤–∏—à, –∫–æ—Ç–æ—Ä—ã–µ curses –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
            "sright": getattr(curses, 'KEY_SRIGHT', 402), # Shift+Right
            "sleft": getattr(curses, 'KEY_SLEFT', 393),   # Shift+Left
            "shome": getattr(curses, 'KEY_SHOME', 391),   # Shift+Home
            "send": getattr(curses, 'KEY_SEND', 386),    # Shift+End
            "spgup": getattr(curses, 'KEY_SPREVIOUS', 337), # Shift+PgUp (KEY_SR –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
            "spgdn": getattr(curses, 'KEY_SNEXT', 336),     # Shift+PgDn (KEY_SF –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
            # –î–æ–±–∞–≤–∏–º –≤–∞—à–∏:
            "shift+pgup": getattr(curses, 'KEY_SPREVIOUS', 337),
            "shift+pgdn": getattr(curses, 'KEY_SNEXT', 336),
        }
        named.update({f"f{i}": getattr(curses, f"KEY_F{i}", 256 + i) for i in range(1, 13)}) # KEY_F(i) –æ–±—ã—á–Ω–æ > 256

        if key_str in named:
            return named[key_str]

        parts = key_str.split('+')
        modifiers = []
        base_key_str = ""

        for part in parts:
            if part in ("ctrl", "alt", "shift"):
                modifiers.append(part)
            else:
                if base_key_str: # –£–∂–µ –Ω–∞—à–ª–∏ –æ–¥–Ω—É "–±–∞–∑–æ–≤—É—é" –∫–ª–∞–≤–∏—à—É
                    raise ValueError(f"–ù–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞–≤–∏—à –≤ —Ö–æ—Ç–∫–µ–µ: {key_str}")
                base_key_str = part
        
        if not base_key_str:
            raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏—à–∞ –≤ —Ö–æ—Ç–∫–µ–µ: {key_str}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏—à–∏
        base_code: int
        if base_key_str in named: # –ï—Å–ª–∏ "z" –≤ "shift+z" —ç—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "del"
            base_code = named[base_key_str]
        elif len(base_key_str) == 1:
            base_code = ord(base_key_str) # "z" -> ord('z')
        else: # –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏—à–∞ –Ω–µ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ –Ω–µ –≤ named (–Ω–∞–ø—Ä. "f1")
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏—à–∞: {base_key_str} –≤ {key_str}")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        # curses –Ω–µ –∏–º–µ–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è Alt+<–±—É–∫–≤–∞> –∏–ª–∏ Shift+<–±—É–∫–≤–∞> (–∫—Ä–æ–º–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö).
        # Ctrl+<–±—É–∫–≤–∞> –æ–±—ã—á–Ω–æ —ç—Ç–æ ord(–±—É–∫–≤–∞) & 0x1F –∏–ª–∏ ord(–±—É–∫–≤–∞) - ord('a') + 1.

        is_ctrl = "ctrl" in modifiers
        is_alt = "alt" in modifiers # Alt —á–∞—Å—Ç–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ Esc-–ø—Ä–µ—Ñ–∏–∫—Å, get_wch() –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É
        is_shift = "shift" in modifiers

        if is_alt:
            # Alt —á–∞—Å—Ç–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω int –∫–æ–¥, –∞ –º–µ–Ω—è–µ—Ç –±–∞–π—Ç–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
            # –ï—Å–ª–∏ get_wch() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è Alt-–∫–æ–º–±–∏–Ω–∞—Ü–∏–π, —ç—Ç–æ—Ç –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç
            # –∏—Ö –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ int, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ—Ç —Å–ø–µ—Ü. –∫–æ–¥–æ–≤ –æ—Ç curses (—Ä–µ–¥–∫–æ).
            # –ú–æ–∂–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è Alt, –∫–∞–∫ –≤—ã –¥–µ–ª–∞–ª–∏ (base_key | 0x200)
            # –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞—à input loop –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–∫–∏–µ int'—ã.
            # –î–ª—è Alt+X (–≥–¥–µ X —ç—Ç–æ –±—É–∫–≤–∞), —ç–º—É–ª—è—Ç–æ—Ä—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —á–∞—Å—Ç–æ —à–ª—é—Ç Esc + X.
            # parse_key –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ç–æ, —á—Ç–æ –û–ñ–ò–î–ê–ï–¢ action_map.
            # –ï—Å–ª–∏ action_map –æ–∂–∏–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è Alt, —Ç–æ –∑–¥–µ—Å—å –∏—Ö –Ω–∞–¥–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ base_code —ç—Ç–æ ord('x'), —Ç–æ alt+x -> ord('x') | 0x200.
            # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ base_code —ç—Ç–æ KEY_LEFT, —Ç–æ alt+left –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º.
            # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ `return base_key | 0x200` –±—ã–ª–∞ –¥–ª—è `alt+...`.
            # –ù–æ –æ–Ω–∞ —Å—Ç–æ—è–ª–∞ –ü–ï–†–ï–î —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏.
            # –ï—Å–ª–∏ key_str –±—ã–ª "alt+a", —Ç–æ base_key –ø–∞—Ä—Å–∏–ª—Å—è –∏–∑ "a".
            # –≠—Ç–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ctrl/shift.
            # –õ–∏–±–æ, –≤–∞—à get_wch() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–∞–∫–∏–µ –∫–æ–¥—ã.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ Alt, —Ç–æ —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –æ–¥–∏–Ω–æ—á–Ω—ã–π int –æ—Ç getch().
            # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –º–∞–ø–∏—Ç—å "alt+x" –Ω–∞ —á—Ç–æ-—Ç–æ, —ç—Ç–æ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ term_mappings –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏.
            logging.warning(f"–ü–∞—Ä—Å–∏–Ω–≥ Alt-–∫–æ–º–±–∏–Ω–∞—Ü–∏–π ('{key_str}') –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞/get_wch.")
            # –ï—Å–ª–∏ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è Alt, —Ç–æ –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏—Ö.
            # base_code |= 0x200 # –ü—Ä–∏–º–µ—Ä –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞

        if is_ctrl:
            if 'a' <= base_key_str <= 'z':
                char_code = ord(base_key_str)
                # Ctrl+–±—É–∫–≤–∞ (a-z) -> 1-26
                # Ctrl+Shift+–±—É–∫–≤–∞ (A-Z) -> –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä 257-282
                # (ord(ch) - ord('a') + 1)
                ctrl_val = char_code - ord('a') + 1
                if is_shift:
                    # –ü—Ä–∏–º–µ—Ä: Ctrl+Shift+A = 257 (0x101)
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–∫–∏–µ –∫–æ–¥—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å curses.KEY_*
                    # –≠—Ç–æ —É–∂–µ –±—ã–ª–æ –≤ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ:
                    base_code = ctrl_val | 0x100 # 256 + (1..26)
                else:
                    base_code = ctrl_val
            # elif base_key_str == '[': base_code = 27 # Ctrl+[ -> Esc
            # ... –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ Ctrl –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ ...
            else:
                raise ValueError(f"Ctrl –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∫ –±—É–∫–≤–∞–º a-z –≤ {key_str} (–∏–ª–∏ –Ω—É–∂–Ω—ã —è–≤–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏)")
        
        elif is_shift: # Shift –±–µ–∑ Ctrl
            if 'a' <= base_key_str <= 'z':
                # shift+z -> ord('Z')
                base_code = ord(base_key_str.upper())
            # –î–ª—è Shift + —Å–ø–µ—Ü.–∫–ª–∞–≤–∏—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Shift+Tab) - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ `named` –∫–∞–∫ "shift+tab"
            # –∏–ª–∏ –≤–∞—à get_wch() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–ª—è –Ω–∏—Ö —Å–ø–µ—Ü. –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª–æ–∂–∏—Ç–µ –≤ `named`
            # –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ `action_map`.
            # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ª–æ–≤–∏—Ç—å "shift+pgup", —Ç.–∫. –æ–Ω —É–∂–µ –≤ named.
            # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —á—Ç–æ-—Ç–æ —Ç–∏–ø–∞ "shift+1" –∏–ª–∏ "shift+]"
            # –î–ª—è –Ω–∏—Ö curses –æ–±—ã—á–Ω–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü. –∫–æ–¥—ã, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–∏ —Å–∏–º–≤–æ–ª—ã ('!', '}')
            # –ï—Å–ª–∏ base_key_str —ç—Ç–æ '1', —Ç–æ ord(base_key_str.upper()) –¥–∞—Å—Ç –æ—à–∏–±–∫—É.
            # –ó–Ω–∞—á–∏—Ç, `shift+<–Ω–µ_–±—É–∫–≤–∞>` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —è–≤–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ `named` –∏–ª–∏ `term_mappings`.
            # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞ —Å `shift+<–Ω–µ_–±—É–∫–≤–∞>`, –∏ –µ–≥–æ –Ω–µ—Ç –≤ `named`, —ç—Ç–æ –æ—à–∏–±–∫–∞.
            elif not ('a' <= base_key_str <= 'z'):
                 # –ï—Å–ª–∏ —ç—Ç–æ "shift+f1", —Ç–æ "f1" —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ `named`.
                 # –ï—Å–ª–∏ —ç—Ç–æ "shift+enter", —Ç–æ "enter" –≤ `named`, –Ω–æ shift+enter - –¥—Ä—É–≥–æ–π –∫–æ–¥.
                 # –≠—Ç–æ —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ. –õ—É—á—à–µ —è–≤–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏.
                raise ValueError(f"Shift —Å –Ω–µ-–±—É–∫–≤–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–µ–π '{base_key_str}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —è–≤–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ 'named_keys' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'shift+tab')")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Alt –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
        if is_alt:
             base_code |= 0x200 # –í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö Alt –∫–æ–¥–æ–≤

        return base_code
    

    def get_char_width(self, char):
        """
        Calculates the display width of a character using wcwidth.
        Returns 1 for control characters or characters with ambiguous width (-1).
        Uses unicodedata to check if it's a control character.
        """
        if not isinstance(char, str) or len(char) != 1:
            return 1 # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥, —Å—á–∏—Ç–∞–µ–º —à–∏—Ä–∏–Ω—É 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–∞ Tab, Enter)
        if unicodedata.category(char) in ('Cc', 'Cf'): # Cc: Control, Cf: Format
             # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '\t')
             if char == '\t':
                 # –®–∏—Ä–∏–Ω–∞ —Ç–∞–±—É–ª—è—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –∏ tab_size,
                 # –Ω–æ wcwidth('\t') –æ–±—ã—á–Ω–æ 0 –∏–ª–∏ 1.
                 # –î–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ Pygments —Ç–æ–∫–µ–Ω–æ–≤ –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å wcwidth –∏–ª–∏ 1.
                 # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ DrawScreen.
                 width = wcwidth(char)
                 return width if width >= 0 else 1
             return 0 # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –æ–±—ã—á–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∏ –∏–º–µ—é—Ç 0 —à–∏—Ä–∏–Ω—É
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∞)
        if unicodedata.combining(char):
             return 0 # –û–±—ä–µ–¥–∏–Ω—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—É—é —à–∏—Ä–∏–Ω—É

        width = wcwidth(char)
        # wcwidth –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1 –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —à–∏—Ä–∏–Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞,
        # –∏–ª–∏ 0 –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã (–∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏).
        # –î–ª—è -1 –∏–ª–∏ 0 (–µ—Å–ª–∏ –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π—Å—è), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1, —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –¥–≤–∏–≥–∞–ª—Å—è.
        # –ï—Å–ª–∏ wcwidth –≤–µ—Ä–Ω—É–ª >=0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ.
        return width if width >= 0 else 1


    def get_string_width(self, text):
        """
        Calculates the display width of a string using wcswidth.
        Handles potential errors by summing individual character widths.
        """
        if not isinstance(text, str):
             logging.warning(f"get_string_width received non-string input: {type(text)}")
             return 0

        try:
            width = wcswidth(text)
            if width >= 0:
                return width
        except Exception as e:
            logging.warning(f"wcswidth failed for '{text[:20]}...': {e}. Falling back to char sum.")
            pass # Fallback

        # Fallback: —Å—É–º–º–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        total_width = 0
        for char in text:
            total_width += self.get_char_width(char)
        return total_width
    

    def safe_open(self, filename: str, mode: str = "r", encoding: str | None = None, errors: str = "replace"):
        """
        Safely open a file in the given mode.
        ‚Ä¢ In binary mode, ignore encoding and errors.
        ‚Ä¢ In text mode, use the given encoding (or self.encoding) and the given errors policy.
        """
        try:
            if "b" in mode:
                # Binary mode: no encoding or errors
                return open(filename, mode)
            else:
                # Text mode: use specified or default encoding, with given errors policy
                return open(
                    filename,
                    mode,
                    encoding=encoding or self.encoding,
                    errors=errors,
                )
        except Exception as e:
            logging.error(f"Failed to safe_open file {filename!r} in mode {mode!r}: {e}")
            raise

#=============== Open file ============================
    def open_file(self, filename: str = None) -> None:
        """
        Opens a file, detects its encoding, and loads its contents.
        Shows an informative status message on error.
        Prompts to save unsaved changes before opening a new file.
        """
        logging.debug("open_file called")

        try:
            # 1. Prompt to save unsaved changes
            if self.modified:
                ans = self.prompt("Save changes? (y/n): ")
                if ans and ans.lower().startswith("y"):
                    self.save_file()

                if self.modified and not (ans and ans.lower().startswith("y")):
                    self._set_status_message("Open cancelled due to unsaved changes")
                    logging.debug("Open file cancelled due to unsaved changes")
                    return

            # 2. Get filename if not provided
            if not filename:
                filename = self.prompt("Enter file name to open: ")
            if not filename:
                self._set_status_message("Open cancelled")
                logging.debug("Open file cancelled: no filename provided")
                return

            # 3. Validate filename and permissions
            if not self.validate_filename(filename):
                self._set_status_message("Invalid filename or path")
                logging.warning(f"Open file failed: invalid filename {filename}")
                return
            if not os.path.exists(filename):
                self._set_status_message(f"File not found: {filename}")
                logging.warning(f"Open file failed: file not found {filename}")
                return
            if os.path.isdir(filename):
                self._set_status_message(f"Cannot open: {filename} is a directory")
                logging.warning(f"Open file failed: path is a directory {filename}")
                return
            if not os.access(filename, os.R_OK):
                self._set_status_message(f"No read permissions: {filename}")
                logging.warning(f"Open file failed: no read permissions {filename}")
                return

            # 4. Try to detect encoding and read file
            sample_size = 1024 * 10  # 10KB
            try:
                with self.safe_open(filename, mode="rb") as f:
                    raw_data = f.read(sample_size)
                detected = chardet.detect(raw_data)
                encoding = detected.get("encoding")
                confidence = detected.get("confidence", 0)
                logging.debug(f"Chardet detected encoding '{encoding}' with confidence {confidence} for {filename}")
            except Exception as e:
                self._set_status_message(f"Failed to read file sample: {e}")
                logging.exception(f"Failed to read file sample for encoding detection: {filename}")
                return

            # 5. Try to open file with detected or fallback encoding
            lines = None
            if not encoding or confidence < 0.5:
                logging.warning(
                    f"Low confidence ({confidence}) or unknown encoding detected for {filename}. Trying UTF-8 then Latin-1."
                )
                tried_encodings = ["utf-8", "latin-1"]
                for enc in tried_encodings:
                    try:
                        with self.safe_open(filename, mode="r", encoding=enc, errors="strict") as f:
                            lines = f.read().splitlines()
                            encoding = enc
                            logging.debug(f"Successfully read {filename} with encoding {enc}")
                            break
                    except (UnicodeDecodeError, OSError) as e:
                        logging.debug(f"Failed to read {filename} with encoding {enc}: {e}")
                if lines is None:
                    try:
                        with self.safe_open(filename, mode="r", encoding="utf-8", errors="replace") as f:
                            lines = f.read().splitlines()
                            encoding = "utf-8"
                            logging.warning(f"Read {filename} with utf-8 and errors='replace'")
                    except Exception as e_fallback:
                        self._set_status_message(f"Error reading {filename}: {e_fallback}")
                        logging.exception(f"Final fallback read failed for {filename}")
                        self.text = [""]
                        self.filename = None
                        self._lexer = TextLexer()
                        self.set_initial_cursor_position()
                        self.modified = False
                        return
            else:
                try:
                    with self.safe_open(filename, mode="r", encoding=encoding, errors="replace") as f:
                        lines = f.read().splitlines()
                    logging.debug(f"Successfully read {filename} with detected encoding {encoding}")
                except Exception as e_detected:
                    logging.warning(f"Failed to read {filename} with detected encoding {encoding}: {e_detected}. Trying utf-8 with errors='replace'.")
                    try:
                        with self.safe_open(filename, mode="r", encoding="utf-8", errors="replace") as f:
                            lines = f.read().splitlines()
                            encoding = "utf-8"
                            logging.debug(f"Successfully read {filename} with utf-8 errors='replace'")
                    except Exception as e_fallback2:
                        self._set_status_message(f"Error reading {filename}: {e_fallback2}")
                        logging.exception(f"Final fallback read failed for {filename}")
                        self.text = [""]
                        self.filename = None
                        self._lexer = TextLexer()
                        self.set_initial_cursor_position()
                        self.modified = False
                        return

            # 6. Update editor state after successful file opening
            self.text = lines if lines else [""]
            self.filename = filename
            self.modified = False
            self.encoding = encoding or "utf-8"
            self.set_initial_cursor_position()
            self.action_history.clear()
            self.undone_actions.clear()
            self._set_status_message(f"Opened {os.path.basename(filename)} (encoding: {self.encoding})")
            logging.debug(f"Opened file: {filename}, encoding: {self.encoding}, lines: {len(self.text)}")

            # Reset lexer, language, git info, and trigger async lint if needed
            self._lexer = None
            self.detect_language()
            self.update_git_info()
            if self._lexer and getattr(self._lexer, "name", "").lower() in ['python', 'python3']:
                self.run_lint_async(os.linesep.join(self.text))
            self.toggle_auto_save()

        except Exception as e:
            self._set_status_message(f"Error opening file: {e}")
            logging.exception(f"Unexpected error opening file: {filename}")
            self.text = [""]
            self.filename = None
            self._lexer = TextLexer()
            self.set_initial_cursor_position()
            self.modified = False


#================= SAVE_FILE ================================= 
    def save_file(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.
        –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç ¬´Save as:¬ª.
        """
        logging.debug("save_file called")

        if not self.filename or self.filename == "noname":
            logging.debug("Filename not set, invoking save_file_as")
            self.save_file_as()
            return

        if not self.validate_filename(self.filename):
            self._set_status_message("Invalid filename")
            logging.warning(f"Invalid filename: {self.filename}")
            return

        if os.path.isdir(self.filename):
            self._set_status_message(f"Cannot save: {self.filename} is a directory")
            logging.warning(f"Filename is a directory: {self.filename}")
            return

        if os.path.exists(self.filename) and not os.access(self.filename, os.W_OK):
            self._set_status_message(f"No write permissions: {self.filename}")
            logging.warning(f"No write permissions: {self.filename}")
            return

        try:
            self._write_file(self.filename)
            self.toggle_auto_save()
            self._set_status_message(f"Saved to {os.path.basename(self.filename)}")
        except Exception as e:
            self._set_status_message(f"Error saving file: {str(e)[:80]}...")


    def save_file_as(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º.
        """
        logging.debug("save_file_as called")

        default_name = self.filename if self.filename and self.filename != "noname" \
            else self.config.get("editor", {}).get("default_new_filename", "new_file.txt")

        new_filename = self.prompt(f"Save file as ({default_name}): ")
        if not new_filename:
            self._set_status_message("Save as cancelled")
            logging.debug("User cancelled save as prompt or timeout")
            return

        new_filename = new_filename.strip() or default_name

        if not self.validate_filename(new_filename):
            self._set_status_message("Invalid filename or path")
            logging.warning(f"Invalid filename: {new_filename}")
            return

        if os.path.isdir(new_filename):
            self._set_status_message(f"Cannot save: {new_filename} is a directory")
            logging.warning(f"Filename is a directory: {new_filename}")
            return

        if os.path.exists(new_filename):
            choice = self.prompt("File already exists. Overwrite? (y/n): ")
            if not choice or choice.lower() != 'y':
                self._set_status_message("Save as cancelled (file exists)")
                logging.debug("User cancelled overwrite confirmation or timeout")
                return
            if not os.access(new_filename, os.W_OK):
                self._set_status_message(f"No write permissions: {new_filename}")
                logging.warning(f"No write permissions for existing file: {new_filename}")
                return

        target_dir = os.path.dirname(new_filename) or '.'
        if not os.path.exists(target_dir):
            try:
                os.makedirs(target_dir, exist_ok=True)
                logging.debug(f"Created missing directory: {target_dir}")
            except Exception as e:
                self._set_status_message(f"Cannot create directory: {target_dir}")
                logging.error(f"Cannot create directory {target_dir}: {e}")
                return

        if not os.access(target_dir, os.W_OK):
            self._set_status_message(f"No write permissions for directory: {target_dir}")
            logging.warning(f"No write permissions for directory: {target_dir}")
            return

        try:
            self._write_file(new_filename)
            self.toggle_auto_save()
            self._set_status_message(f"Saved as {os.path.basename(new_filename)}")
        except Exception as e:
            self._set_status_message(f"Error saving file: {str(e)[:80]}...")


    def _write_file(self, target: str):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
        """
        try:
            with self.safe_open(target, "w", encoding=self.encoding) as f:
                content = os.linesep.join(self.text)
                f.write(content)

            self.filename = target
            self.modified = False
            self.detect_language()

            logging.debug(f"File saved successfully: {target}")

            self.toggle_auto_save()

            if self._lexer and self._lexer.name in ["python", "python3"]:
                threading.Thread(target=self.run_lint_async, args=(content,), daemon=True).start()

            self.update_git_info()

        except Exception as e:
            logging.error(f"Failed to write file '{target}': {e}", exc_info=True)
            raise


    def revert_changes(self):
        """
        Reverts unsaved changes by reloading from the last saved version.
        """
        logging.debug("revert_changes called")

        if not self.filename or self.filename == "noname":
            self._set_status_message("Cannot revert: file has not been saved yet")
            logging.debug("Revert failed: file not saved")
            return

        if not os.path.exists(self.filename):
            self._set_status_message(f"Cannot revert: {os.path.basename(self.filename)} does not exist")
            logging.warning(f"File does not exist: {self.filename}")
            return

        confirmation = self.prompt("Revert unsaved changes? (y/n): ")
        if not confirmation or confirmation.lower() != "y":
            self._set_status_message("Revert cancelled")
            logging.debug("Revert cancelled by user or timeout")
            return

        original_modified = self.modified
        self.modified = False

        try:
            self.open_file(self.filename)
            if not self.modified:
                self._set_status_message(f"Reverted to {os.path.basename(self.filename)}")
                logging.debug(f"Reverted changes for {self.filename}")
        except Exception as e:
            self._set_status_message(f"Error reverting file: {str(e)[:80]}...")
            logging.exception(f"Unexpected error during revert: {self.filename}")
            self.modified = original_modified

# -------------- Auto-save ------------------------------
    def toggle_auto_save(self):
        """
        –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
        –ò–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ self._auto_save_interval (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç).
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–∑–≤–∞–Ω –∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        """
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª—è
        if not hasattr(self, "_auto_save_enabled"):
            self._auto_save_enabled = False
        if not hasattr(self, "_auto_save_thread"):
            self._auto_save_thread = None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç
        try:
            interval = float(self.config.get("settings", {}).get("auto_save_interval", 5))
            if interval <= 0:
                interval = 5
        except Exception:
            interval = 5

        self._auto_save_interval = interval  # –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã)
        self._auto_save_enabled = not self._auto_save_enabled

        if self._auto_save_enabled:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ—Å—ç–π–≤–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if self._auto_save_thread is None or not self._auto_save_thread.is_alive():
                def auto_save_task():
                    logging.info("Auto-save thread started")
                    last_saved_text = None
                    while self._auto_save_enabled:
                        try:
                            # –ñ–¥—ë–º –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã)
                            sleep_sec = max(1, int(self._auto_save_interval * 60))
                            for _ in range(sleep_sec):
                                if not self._auto_save_enabled:
                                    break
                                time.sleep(1)
                            if not self._auto_save_enabled:
                                break

                            # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω
                            if not self.filename:
                                continue

                            current_text = os.linesep.join(self.text)
                            if self.modified and current_text != last_saved_text:
                                try:
                                    with open(self.filename, "w", encoding=self.encoding, errors="replace") as f:
                                        f.write(current_text)
                                    last_saved_text = current_text
                                    self.modified = False
                                    self._set_status_message(f"Auto-Saved to {self.filename}")
                                    logging.info(f"Auto-Saved to {self.filename}")
                                except Exception as e:
                                    self._set_status_message(f"Auto-save error: {e}")
                                    logging.exception("Auto-save failed")
                        except Exception as e:
                            logging.exception(f"Error in auto-save thread: {e}")
                            self._auto_save_enabled = False
                            self._set_status_message("Auto-save disabled due to error")
                    logging.info("Auto-save thread finished")

                self._auto_save_thread = threading.Thread(target=auto_save_task, daemon=True)
                self._auto_save_thread.start()
            self.status_message = f"Auto-save enabled (every {self._auto_save_interval} min)"
            self._set_status_message(self.status_message)
            logging.info(self.status_message)
        else:
            self.status_message = "Auto-save disabled"
            self._set_status_message(self.status_message)
            logging.info(self.status_message)


    def new_file(self) -> None:
        """
        Create a brand-new, empty buffer.

        ‚ñ∏ If there are unsaved changes (self.modified=True), prompt:
        ‚Ä¢ 'y' ‚Üí save current file, then create new
        ‚Ä¢ any other ‚Üí cancel new_file
        ‚ñ∏ Reset filename, lexer, git info, encoding.
        ‚ñ∏ Clear undo/redo histories, disable autosave.
        ‚ñ∏ Reset cursor/scrolling/search/selection.
        ‚ñ∏ Clamp scroll and force a full redraw.
        """

        logging.debug("new_file called")
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏, –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if self.modified:
                ans = self.prompt("Save changes before creating new file? (y/n): ")
                if ans and ans.lower().startswith("y"):
                    self.save_file()
                else:
                    self._set_status_message("New file cancelled")
                    logging.debug("New file cancelled by user")
                    return  # –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ¬´–ø—É—Å—Ç–æ–π¬ª –¥–æ–∫—É–º–µ–Ω—Ç
            self.text = [""]
            self.filename = None
            self._lexer = None
            self._last_git_filename = None
            self.git_info = ("", "", "0")
            self.modified = False
            self.encoding = "UTF-8"

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞, –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π, –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞
            self.set_initial_cursor_position()
            self.action_history.clear()
            self.undone_actions.clear()

            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            self._auto_save_enabled = False
            logging.debug("Auto-save disabled for new file")

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
            self._clamp_scroll()
            self._ensure_cursor_in_bounds()
            self.draw_screen()

            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
            self._set_status_message("New file created")
            logging.debug("New file created and screen redrawn")

        except Exception as e:
            logging.exception("Error in new_file", exc_info=True)
            self._set_status_message("Error creating new file")


    def cancel_operation(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´Esc-–æ—Ç–º–µ–Ω—ã¬ª, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handle_input()
        –∏ —á–µ—Ä–µ–∑ action_map/–≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É.

        ‚Ä¢ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äí —Å–Ω–∏–º–∞–µ—Ç –µ–≥–æ;
        ‚Ä¢ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ ‚Äí —Å–Ω–∏–º–∞–µ—Ç –µ–µ;
        ‚Ä¢ –∏–Ω–∞—á–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é (–ø—É—Å—Ç—É—é –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é).
        """
        if self.lint_panel_active:
            self.lint_panel_active = False
            self.lint_panel_message = ""
            return
        
        if self.is_selecting:
            self.is_selecting = False
            self.selection_start = self.selection_end = None
            self._set_status_message("Selection cancelled")
            logging.debug("Cancelled: selection")
        elif self.highlighted_matches: # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
            self.highlighted_matches = [] # –û—á–∏—â–∞–µ–º –µ–µ
            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º search_matches –∏ search_term —Å—Ä–∞–∑—É,
            # —á—Ç–æ–±—ã F3 (find_next) –º–æ–≥–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ Ctrl+F –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏.
            # –°–±—Ä–æ—Å–∏–º –∏—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–∏—Å–∫–µ (find_prompt) –∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.
            # self.search_matches = []
            # self.search_term = ""
            self.current_match_idx = -1 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            self._set_status_message("Search highlighting cancelled")
            logging.debug("Cancelled: search highlighting")
        else:
            # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –Ω–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self._set_status_message("Operation cancelled")
            logging.debug("Cancelled: generic operation")
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è


    def handle_escape(self):
            """
            –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Esc.

            ‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äí —É–±–∏—Ä–∞–µ–º –µ–≥–æ.
            ‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ ‚Äí —É–±–∏—Ä–∞–µ–º –µ–µ.
            ‚Ä¢ –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç prompt (–Ω–∞–∂–∞—Ç–∏–µ Esc –≤ prompt —É–∂–µ –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É) -
              –æ–± —ç—Ç–æ–º –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è prompt, –∏ –∑–∞—Ç–µ–º cancel_operation —Å–±—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ç—É—Å.
            ‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö "—Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç–º–µ–Ω—ã" (–≤—ã–¥–µ–ª–µ–Ω–∏–µ/–ø–æ–∏—Å–∫) –∏ –¥–≤–æ–π–Ω–æ–π Esc
              (–±—ã—Å—Ç—Ä–µ–µ 1.5 —Å) - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏.
            ‚Ä¢ –ò–Ω–∞—á–µ (–æ–¥–∏–Ω–æ—á–Ω—ã–π Esc –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π) ‚Äí –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å ¬´Cancelled¬ª.
            """
            now = time.monotonic()
            last = getattr(self, "_last_esc_time", 0) # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ Esc, –¥–µ—Ñ–æ–ª—Ç 0

            # 1) –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?
            if self.is_selecting or self.highlighted_matches:
                 # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É cancel_operation
                 self.cancel_operation()
                 # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ Esc, —á—Ç–æ–±—ã –¥–≤–æ–π–Ω–æ–π Esc —Ä–∞–±–æ—Ç–∞–ª,
                 # –¥–∞–∂–µ –µ—Å–ª–∏ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è/–ø–æ–∏—Å–∫–∞
                 self._last_esc_time = now
                 return # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

            # 2) –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç–º–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω–æ–π Esc.
            if now - last < 1.5:
                logging.debug("Double Esc detected, attempting to exit")
                # –î–≤–æ–π–Ω–æ–π Esc (–±—ã—Å—Ç—Ä–µ–µ 1.5 c) -> –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
                self.exit_editor() # exit_editor —Å–∞–º —Å–ø—Ä–æ—Å–∏—Ç –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É
                # –ï—Å–ª–∏ exit_editor –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ),
                # execution –≤–µ—Ä–Ω–µ—Ç—Å—è —Å—é–¥–∞, –∏ –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–π–¥–µ–º –∏–∑ handle_escape.

            # 3) –û–¥–∏–Ω–æ—á–Ω—ã–π Esc –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π -> –ø—Ä–æ—Å—Ç–æ "Cancelled"
            else:
                logging.debug("Single Esc detected, setting status to Cancelled")
                self._set_status_message("Cancelled")

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ Esc –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._last_esc_time = now


    def exit_editor(self):
        """
        Exits the editor with a prompt to save any unsaved changes.
        Handles closing curses gracefully.
        """
        logging.debug("Attempting to exit editor.")
        # ‚îÄ‚îÄ 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if self.modified:
            ans = self.prompt("Save changes before exiting? (y/n): ")
            if ans and ans.lower().startswith("y"):
                self.save_file()
                # –ï—Å–ª–∏ save_file –Ω–µ —É–¥–∞–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω Save As),
                # modified –æ—Å—Ç–∞–Ω–µ—Ç—Å—è True.
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª 'y', –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–π—Ç–∏.
            elif ans and ans.lower().startswith("n"):
                 logging.debug("Exit: User chose NOT to save.")
                 pass # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã—Ö–æ–¥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            else:
                 # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–Ω–∞–∂–∞–ª Esc –∏–ª–∏ Enter –±–µ–∑ –≤–≤–æ–¥–∞)
                 self._set_status_message("Exit cancelled")
                 logging.debug("Exit cancelled by user prompt.")
                 return # –û—Ç–º–µ–Ω—è–µ–º –≤—ã—Ö–æ–¥

        # ‚îÄ‚îÄ 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ (–∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self._auto_save_enabled = False  # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        logging.debug("Set auto_save_enabled to False")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
        # –ù–µ –±—É–¥–µ–º —è–≤–Ω–æ –¥–æ–∂–∏–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI –Ω–∞–¥–æ–ª–≥–æ.
        # Daemon=True –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

        # ‚îÄ‚îÄ 3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ curses ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º curses.endwin()
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ Curses –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
        if threading.current_thread() is threading.main_thread():
            logging.debug("Running in main thread, calling curses.endwin()")
            try:
                curses.endwin()
                logging.debug("curses.endwin() called.")
            except curses.error as e:
                logging.error(f"Error calling curses.endwin(): {e}")
            except Exception as e:
                logging.error(f"Unexpected error during curses.endwin(): {e}")
        else:
            logging.warning("curses.endwin() called from non-main thread. Skipping.")
            # –í –∏–¥–µ–∞–ª–µ —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.

        # ‚îÄ‚îÄ 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        sys.exit(0)


    def prompt(self, message: str, max_len: int = 1024, timeout: int = 60) -> Optional[str]:
        """
        –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è.

        ‚ñ∏ Enter    ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –≤–µ—Ä–Ω—É—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (strip)
        ‚ñ∏ Esc      ‚Äî –æ—Ç–º–µ–Ω–∞, –≤–µ—Ä–Ω—É—Ç—å None
        ‚ñ∏ Tab      ‚Äî –≤—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø (4 –ø—Ä–æ–±–µ–ª–∞)
        ‚ñ∏ Backspace/Delete, ‚Üê/‚Üí, Home/End ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        ‚ñ∏ Resize   ‚Äî –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        """
        logging.debug(f"Prompt –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: '{message}', –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_len}, —Ç–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫")
        locale.setlocale(locale.LC_CTYPE, '')  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –Æ–Ω–∏–∫–æ–¥–∞

        orig_curs = curses.curs_set(1)
        curses.noecho()
        self.stdscr.nodelay(False)
        self.stdscr.timeout(timeout * 1000)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        buf: list[str] = []
        pos = 0
        tab_width = 4

        try:
            while True:
                h, w = self.stdscr.getmaxyx()
                row = h - 1
                max_msg = max(0, w - 10)
                disp_msg = message[:max_msg]
                msg_len = len(disp_msg)

                self.stdscr.move(row, 0)
                self.stdscr.clrtoeol()
                self.stdscr.addstr(row, 0, disp_msg, self.colors.get("status", 0))

                text = "".join(buf)
                avail = w - msg_len - 1

                if self.get_string_width(text) > avail:
                    curr = 0; tail = []
                    for ch in reversed(buf):
                        cw = self.get_char_width(ch)
                        if curr + cw > avail:
                            break
                        curr += cw; tail.insert(0, ch)
                    display = "".join(tail)
                    disp_pos = self.get_string_width("".join(buf)[len(buf)-len(tail):pos])
                else:
                    display = text
                    disp_pos = self.get_string_width(text[:pos])

                self.stdscr.addstr(row, msg_len, display)
                self.stdscr.move(row, msg_len + disp_pos)
                self.stdscr.refresh()

                try:
                    key = self.stdscr.get_wch()
                    logging.debug(f"Prompt: get_wch() returned: {repr(key)} (type: {type(key)})")
                except curses.error as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ (get_wch()) –≤ prompt: {e}") # –ë—ã–ª–æ "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ (get_wch()): {e}"
                    if 'no input' in str(e).lower() or (isinstance(key, int) and key == curses.ERR): # –î–æ–±–∞–≤–∏–ª isinstance –¥–ª—è key
                        logging.warning(f"Prompt: get_wch() timed out or returned ERR. Message: '{message}'")
                        return None 
                    return None

                if key == 27 or key == '\x1b': # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ int 27, –∏ —Å—Ç—Ä–æ–∫—É '\x1b'
                    logging.debug(f"Prompt: Esc detected (key={repr(key)}). Cancelling.")
                    return None
                
                if key in ("\n", "\r", curses.KEY_ENTER, 10, 13): # –î–æ–±–∞–≤–∏–ª 10 –∏ 13 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    logging.debug(f"Prompt: Enter detected (key={repr(key)}). Returning buffer.")
                    return "".join(buf).strip()
                
                if key in (curses.KEY_BACKSPACE, "\b", "\x7f"):
                    if pos > 0:
                        pos -= 1; buf.pop(pos)
                elif key == curses.KEY_DC:
                    if pos < len(buf): buf.pop(pos)
                elif key == curses.KEY_LEFT:
                    pos = max(0, pos - 1)
                elif key == curses.KEY_RIGHT:
                    pos = min(len(buf), pos + 1)
                elif key == curses.KEY_HOME:
                    pos = 0
                elif key == curses.KEY_END:
                    pos = len(buf)
                elif key == curses.KEY_RESIZE:
                    continue
                elif key == "\t":
                    for _ in range(tab_width):
                        if len(buf) < max_len:
                            buf.insert(pos, " "); pos += 1
                elif isinstance(key, str) and key.isprintable():
                    if len(buf) < max_len:
                        buf.insert(pos, key); pos += 1
                else:
                    logging.debug(f"Ignored key: {key!r}")

        finally:
            self.stdscr.nodelay(True)
            self.stdscr.timeout(-1)  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            curses.noecho()
            curses.curs_set(orig_curs)
            h, _ = self.stdscr.getmaxyx()
            self.stdscr.move(h - 1, 0)
            self.stdscr.clrtoeol()
            self.stdscr.refresh()
            curses.flushinp()


    # === –ü–û–ò–°–ö ======== Search/Replace and Find ========================
    def search_and_replace(self):
        """
        Searches and replaces text throughout the document using regex.
        Prompts for a search pattern and replacement text, performs the replacement,
        and reports the number of occurrences replaced.
        Does NOT add to undo/redo history (history is cleared).
        """
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–∏—Å–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.highlighted_matches = []
        self.search_matches = []
        self.search_term = ""
        self.current_match_idx = -1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω
        original_status = self.status_message
        self._set_status_message("Search for (regex): ")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–∞
        search_pattern = self.prompt("Search for (regex): ")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–∂–∞–ª Esc –∏–ª–∏ Enter –±–µ–∑ –≤–≤–æ–¥–∞)
        if not search_pattern:
            self._set_status_message(original_status if original_status else "Search/Replace cancelled")
            logging.debug("Search/Replace cancelled: no search pattern provided.")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—ã—Ö–æ–¥–∏–º
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–º–µ–Ω—ã
        replace_with = self.prompt("Replace with: ")
        compiled_pattern = None
        try:
            compiled_pattern = re.compile(search_pattern, re.IGNORECASE)
            logging.debug(f"Compiled regex pattern: {search_pattern}")
        except re.error as e:
            # –û—à–∏–±–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
            error_msg = f"Regex error: {str(e)[:80]}..."
            self._set_status_message(error_msg)
            logging.warning(f"Search/Replace failed due to regex error: {e}")
            return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã ---
        new_text = []
        replacements = 0
        error_during_replace = False

        try:
            with self._state_lock:
                 # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫. 
                 text_snapshot = list(self.text)
            logging.debug(f"Starting replacement process on {len(text_snapshot)} lines.")

            for idx, line in enumerate(text_snapshot):
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
                    new_line, count = compiled_pattern.subn(replace_with, line)
                    new_text.append(new_line) # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é (–∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é) —Å—Ç—Ä–æ–∫—É
                    replacements += count
                except Exception as e_line:
                    logging.error(f"Error replacing in line {idx+1}: {e_line}")
                    new_text.append(line) # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
                    error_during_replace = True

            logging.debug(f"Finished replacement process. Found {replacements} replacements.")

            # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã ---
            with self._state_lock:
                # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –Ω–æ–≤—ã–º
                self.text = new_text
                self.modified = True # –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã
                self.action_history.clear()
                self.undone_actions.clear()
                logging.debug("Cleared undo/redo history after search/replace.")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–∏—Å–∫–∞, —Ç.–∫. —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å—Ç–∞—Ä—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã
                self.highlighted_matches = []
                self.search_matches = [] # –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è F3
                self.search_term = "" # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω –ø–æ–∏—Å–∫–∞

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
            if error_during_replace:
                 # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
                 self._set_status_message(f"Replaced {replacements} occurrences, but errors occurred in some lines.")
                 logging.warning("Search/Replace completed with errors in some lines.")
            elif replacements > 0:
                # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–º–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                self._set_status_message(f"Replaced {replacements} occurrence(s)")
                logging.info(f"Search/Replace successful: {replacements} replacements.")
            else:
                # –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                self._set_status_message("No occurrences found")
                logging.info("Search/Replace: No occurrences found.")

        except Exception as e:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ Search/Replace
            error_msg = f"Unexpected error during Search/Replace: {str(e)[:80]}..."
            self._set_status_message(error_msg)
            logging.exception(f"Unexpected error during search and replace for pattern '{search_pattern}'")


    def _collect_matches(self, term):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è term (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞) –≤ self.text.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: [(row_idx, col_start_idx, col_end_idx), ...].
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—Å—Ç—É.
        """
        matches = []
        if not term:
            return matches

        # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        low = term.lower()
        term_len = len(term)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ self.text
        with self._state_lock:
            # –î–µ–ª–∞–µ–º –∫–æ–ø–∏—é —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –¥–µ—Ä–∂–∞–ª–∞—Å—å –¥–æ–ª–≥–æ
            text_snapshot = list(self.text) # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞ —Å–Ω–∞–ø—à–æ—Ç–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        for row_idx, line in enumerate(text_snapshot):
            start_col_idx = 0
            line_lower = line.lower() # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∏–∂–Ω–µ–π –≤–µ—Ä—Å–∏–µ–π —Å—Ç—Ä–æ–∫–∏
            while True:
                # –ò—â–µ–º –≤ line_lower, –Ω–æ –∏–Ω–¥–µ–∫—Å—ã –±–µ—Ä–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π line (—Ç.–µ. —Å–Ω–∞–ø—à–æ—Ç–∞)
                found_idx = line_lower.find(low, start_col_idx)
                if found_idx == -1:
                    break
                match_end_idx = found_idx + term_len
                matches.append((row_idx, found_idx, match_end_idx))
                # –°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                # –ò–Ω–∞—á–µ –º–æ–∂–µ–º –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è –Ω–∞ –ø—É—Å—Ç—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö –¥–ª–∏–Ω–æ–π 1
                start_col_idx = match_end_idx if term_len > 0 else found_idx + 1 # –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö term

        logging.debug(f"Found {len(matches)} matches for search term '{term}'")
        return matches


    def find_prompt(self):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è,
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–º—É.
        """
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.highlighted_matches = []
        self.current_match_idx = -1
        self.search_matches = []
        self.search_term = ""

        term = self.prompt("Find: ")
        if term == "":
            self._set_status_message("Search cancelled")
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É–∂–µ –æ—á–∏—â–µ–Ω–∞ –≤—ã—à–µ
            return

        self.search_term = term
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        self.search_matches = self._collect_matches(term)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∂–µ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (highlighted_matches –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è draw)
        self.highlighted_matches = self.search_matches

        if not self.search_matches:
            self._set_status_message(f"'{term}' not found")
            self.current_match_idx = -1
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            self.current_match_idx = 0
            self._goto_match(self.current_match_idx) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            self._set_status_message(f"Found {len(self.search_matches)} match(es). Press F3 for next.")


    def find_next(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ø–æ —Ü–∏–∫–ª—É).
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–Ω–µ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ search_matches.
        –ù–µ –º–µ–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ highlighted_matches.
        """
        if not self.search_matches:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª F3 –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º search_term, —Ç.–∫. search_matches –º–æ–≥ –±—ã—Ç—å –æ—á–∏—â–µ–Ω –æ—Ç–º–µ–Ω–æ–π –ø–æ–∏—Å–∫–∞ (Esc)
            if not self.search_term:
                 self._set_status_message("No search term. Use Ctrl+F first.")
            else: # search_term –µ—Å—Ç—å, –Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç
                 self._set_status_message(f"No matches found for '{self.search_term}'.")
            # –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–∞—Å—å
            self.highlighted_matches = []
            self.current_match_idx = -1
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –ø–æ –∫—Ä—É–≥—É
        self.current_match_idx = (self.current_match_idx + 1) % len(self.search_matches)
        self._goto_match(self.current_match_idx) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        self._set_status_message(
            f"Match {self.current_match_idx + 1}/{len(self.search_matches)}"
        )


    def _goto_match(self, idx):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∫—É—Ä—Å–æ—Ä/–ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ‚Ññ idx –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ."""
        if not self.search_matches or not (0 <= idx < len(self.search_matches)):
             logging.warning(f"_goto_match called with invalid index {idx} for {len(self.search_matches)} matches")
             return # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å

        row, col_start, col_end = self.search_matches[idx]

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        self.cursor_y, self.cursor_x = row, col_start

        # Adjust vertical scroll (scroll_top)
        height, width = self.stdscr.getmaxyx()
        text_area_height = max(1, height - 2) # –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞

        if self.cursor_y < self.scroll_top:
            # –ö—É—Ä—Å–æ—Ä –≤—ã—à–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, —Å–¥–≤–∏–≥–∞–µ–º –≤–∏–¥ –≤–≤–µ—Ä—Ö
            self.scroll_top = max(0, self.cursor_y - text_area_height // 2) # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ —Å–¥–≤–∏–≥–∞–µ–º –≤–≤–µ—Ä—Ö
        elif self.cursor_y >= self.scroll_top + text_area_height:
            # –ö—É—Ä—Å–æ—Ä –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, —Å–¥–≤–∏–≥–∞–µ–º –≤–∏–¥ –≤–Ω–∏–∑
             self.scroll_top = min(
                 max(0, len(self.text) - text_area_height), # –ù–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∏–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
                 self.cursor_y - text_area_height // 2 + 1 # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ —Å–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑
            )
        # Ensure scroll_top is not negative
        self.scroll_top = max(0, self.scroll_top)


    def validate_filename(self, filename):
        """
        Validates the filename for length, correctness, and path.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
        """
        if not filename or len(filename) > 255: # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –§–°
            self._set_status_message("Filename too long or empty")
            logging.warning(f"Validation failed: filename empty or too long ({len(filename)})")
            return False

        # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        filename = filename.strip()
        if not filename:
             self._set_status_message("Filename cannot be just whitespace")
             logging.warning("Validation failed: filename is whitespace")
             return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
        # –≠—Ç–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –§–° –∏ –û–°.
        invalid_chars = r'[<>:"/\\|?*\x00-\x1F]' # –°–∏–º–≤–æ–ª—ã, –æ–±—ã—á–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤
        if re.search(invalid_chars, filename):
            self._set_status_message(f"Filename contains invalid characters")
            logging.warning(f"Validation failed: filename contains invalid characters: {filename}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, COM1, LPT1 –Ω–∞ Windows) - –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
        # –ë–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–æ —ç—Ç–æ –±–∞–∑–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
        if os.name == 'nt': # –î–ª—è Windows
             windows_reserved_names = ["CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"]
             name_part = os.path.splitext(os.path.basename(filename))[0].upper()
             if name_part in windows_reserved_names:
                 self._set_status_message(f"Filename '{name_part}' is reserved system name")
                 logging.warning(f"Validation failed: filename is reserved system name: {filename}")
                 return False
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ ..
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.path.normpath –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–∏ (—É–¥–∞–ª–µ–Ω–∏–µ ., .., —Å–ª—ç—à–µ–π –∏ —Ç.–ø.)
            absolute_path = os.path.normpath(os.path.abspath(filename))
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            current_dir = os.path.normpath(os.path.abspath(os.getcwd()))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞ —Å –ø—É—Ç–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            # –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if absolute_path == current_dir: # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∞ –Ω–µ —Ñ–∞–π–ª
                 return False # –ù–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏–º–µ–Ω–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            # –î–æ–±–∞–≤–ª—è–µ–º os.sep –∫ current_dir, —á—Ç–æ–±—ã –Ω–µ —Å–ø—É—Ç–∞—Ç—å "myproject" –∏ "myproject-new"
            if not absolute_path.startswith(current_dir + os.sep) and absolute_path != os.path.join(current_dir, os.path.basename(absolute_path)):
                 self._set_status_message(f"Path outside current directory: {filename}")
                 logging.warning(f"Validation failed: path outside current directory: {filename} (resolved to {absolute_path})")
                 return False

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ".." –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
            # os.path.normpath —É–∂–µ –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if ".." in absolute_path.split(os.sep):
                 self._set_status_message(f"Path contains '..'")
                 logging.warning(f"Validation failed: path contains '..': {filename} (resolved to {absolute_path})")
                 return False

            logging.debug(f"Filename '{filename}' validated successfully (resolved to {absolute_path})")
            return True

        except Exception as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –û–°)
            self._set_status_message(f"Error validating path: {str(e)[:80]}...")
            logging.error(f"Error validating filename '{filename}': {e}", exc_info=True)
            return False # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–π


    # =============–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –æ–±–æ–ª–æ—á–∫–∏ Shell commands =================================
    def _execute_shell_command_async(self, cmd_list):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±–æ–ª–æ—á–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        –≤ –æ—á–µ—Ä–µ–¥—å self._shell_cmd_q (–≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∞–Ω–µ—Ä–µ).
        """
        output = ""
        error = ""
        message = ""
        returncode = -1 # Default return code

        try:
            logging.debug(f"Executing shell command in thread: {' '.join(shlex.quote(c) for c in cmd_list)}")
            # –£–∫–∞–∑—ã–≤–∞–µ–º current working directory
            cwd = os.path.dirname(self.filename) if self.filename and os.path.exists(self.filename) else os.getcwd()
            logging.debug(f"Shell command cwd: {cwd}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess.Popen –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ø–æ—Ç–æ–∫–∞–º–∏ –≤—ã–≤–æ–¥–∞
            process = subprocess.Popen(
                cmd_list,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True, # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–∞–∫ —Ç–µ–∫—Å—Ç
                encoding="utf-8", # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
                errors="replace", # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                cwd=cwd # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π
            )

            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –∏ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            # Blocking communicate() –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            output, error = process.communicate(timeout=30) # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            returncode = process.returncode
            logging.debug(f"Shell command finished with code {returncode}. Output len: {len(output)}. Error len: {len(error)}")


        except FileNotFoundError:
            message = f"Executable not found: {cmd_list[0]}"
            logging.error(message)
        except subprocess.TimeoutExpired:
            message = "Command timed out (30s). Terminating."
            logging.warning(message)
            try:
                process.terminate() # –ü–æ–ø—ã—Ç–∫–∞ –º—è–≥–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                
            except:
                try:
                    process.kill() # –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, —É–±–∏–≤–∞–µ–º
                except Exception as kill_e:
                    logging.error(f"Failed to kill timed out process: {kill_e}")
            # Communicate again to get any remaining output/error after termination
            try:
                 output, error = process.communicate(timeout=5) # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—ã–≤–æ–¥
            except:
                 output = "(Output after termination)"
                 error = "(Error after termination)"

            returncode = process.returncode # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ terminate/kill

        except Exception as e:
            logging.exception(f"Error executing shell command {' '.join(shlex.quote(c) for c in cmd_list)}")
            message = f"Exec error: {str(e)[:80]}..."
        finally:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ output –∏ error, –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–∏
            if not message: # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ FileNotFoundError, Timeout, General Exception
                if returncode != 0:
                     # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥)
                     message = f"Cmd failed ({returncode}): {error.strip()[:100]}" if error.strip() else f"Cmd failed ({returncode}): (no stderr)"
                elif output.strip():
                    # –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–∞, –µ—Å—Ç—å –≤—ã–≤–æ–¥ –≤ stdout
                    message = f"Cmd successful: {output.strip().splitlines()[0][:100]}" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤—ã–≤–æ–¥–∞
                    if len(output.strip().splitlines()) > 1:
                         message += "..."
                else:
                    # –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–∞, –Ω–µ—Ç –≤—ã–≤–æ–¥–∞
                    message = "Command executed (no output)"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ!
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—á–µ—Ä–µ–¥–∏, –Ω–æ –Ω–µ –¥–ª—è –≤—Å–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                self._shell_cmd_q.put(message)
                logging.debug(f"Shell command result queued: {message}")
            except Exception as q_e:
                 logging.error(f"Failed to put shell command result into queue: {q_e}")


    def execute_shell_command(self):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—É, –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ –ø—Ä–æ–º–ø—Ç–∞
        original_status = self.status_message
        self._set_status_message("Enter command: ") # –°—Ç–∞—Ç—É—Å –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã

        command = self.prompt("Enter command: ")

        # –ü–æ—Å–ª–µ –ø—Ä–æ–º–ø—Ç–∞, status_message –º–æ–≥ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ prompt.finally –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏.
        # –ú—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏–¥–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å.
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å "Running command..." –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ shlex.split.

        if not command:
            self._set_status_message(original_status if original_status else "Command cancelled")
            logging.debug("Shell command cancelled by user.")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–≤—ã—á–∫–∏, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
        try:
            cmd_list = shlex.split(command)
            if not cmd_list:  # –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ split
                self._set_status_message("Empty command")
                logging.warning("Shell command failed: empty command after split")
                return
        except ValueError as e:
            self._set_status_message(f"Parse error: {e}")
            logging.error(f"Shell command parse error: {e}")
            return

        # --- –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ---
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
        # –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∏–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã.
        display_cmd = ' '.join(shlex.quote(c) for c in cmd_list)
        if len(display_cmd) > 50: display_cmd = display_cmd[:47] + "..."
        self._set_status_message(f"Running command: {display_cmd}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–º—è –ø–æ—Ç–æ–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏–ª–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        thread_name = f"ShellExecThread-{int(time.time())}"
        threading.Thread(target=self._execute_shell_command_async,
                        args=(cmd_list,),
                        daemon=True, # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        name=thread_name).start()

        logging.debug(f"Started shell command thread: {thread_name}")
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–∑–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ —á–µ—Ä–µ–∑ _shell_cmd_q


# === GIT ==================================================================
    def _run_git_command_async(self, cmd_list, command_name):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É Git –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å.
        cmd_list - —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è subprocess.run.
        command_name - –∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ.
        """
        message = ""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Git –∫–æ–º–∞–Ω–¥—ã
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–∫—É—â—É—é, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            repo_dir = os.path.dirname(self.filename) if self.filename and os.path.exists(self.filename) else os.getcwd()
            logging.debug(f"Running git command '{command_name}' in directory: {repo_dir}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_run –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã Git
            result = safe_run(cmd_list, cwd=repo_dir) # safe_run —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç cwd

            if result.returncode == 0:
                message = f"Git {command_name} successful."
                # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ (commit, pull, push) –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if command_name in ["pull", "commit", "push"]:
                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Git –∏–Ω—Ñ–æ
                    self._git_cmd_q.put("update_git_info")
                    logging.debug("Queued 'update_git_info' after successful Git command.")

                # –î–æ–±–∞–≤–ª—è–µ–º stdout –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π (–¥–ª—è status, diff)
                if result.stdout.strip():
                    lines = result.stdout.strip().splitlines()
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
                    if len(lines) > 0:
                         message += f" {lines[0][:100]}..." if len(lines[0]) > 100 or len(lines) > 1 else lines[0][:100]
                    # –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è status –∏–ª–∏ diff –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ/–±—É—Ñ–µ—Ä–µ,
                    # –Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

            else:
                # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
                stderr = result.stderr.strip()
                message = f"Git error ({result.returncode}): {stderr[:100]}..." if stderr else f"Git error ({result.returncode}): (no stderr)"
                logging.error(f"Git command '{command_name}' failed. Code: {result.returncode}. Stderr: {stderr}")

        except FileNotFoundError:
            message = "Git executable not found."
            logging.error(message)
        except Exception as e:
            logging.exception(f"Git command async error for '{command_name}'")
            message = f"Git error: {str(e)[:80]}..."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        try:
             self._git_cmd_q.put(message)
             logging.debug(f"Git command result queued: {message}")
        except Exception as q_e:
             logging.error(f"Failed to put Git command result into queue: {q_e}")


    def integrate_git(self):
        """–ú–µ–Ω—é Git –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏—à–µ–π F9. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
        logging.debug("integrate_git called")
        try:
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Git –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            if not self.config.get("git", {}).get("enabled", True):
                self._set_status_message("Git integration is disabled in config.")
                logging.debug("Git menu called but integration is disabled.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            repo_dir = os.path.dirname(self.filename) if self.filename and os.path.exists(self.filename) else os.getcwd()
            if not os.path.isdir(os.path.join(repo_dir, ".git")):
                self._set_status_message("Not a Git repository.")
                logging.debug(f"Git menu called but {repo_dir} is not a git repository.")
                return


            commands = {
                "1": ("status", ["git", "status", "--short"]), # –ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
                "2": ("commit", None),          # Commit message –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                "3": ("push",   ["git", "push"]),
                "4": ("pull",   ["git", "pull"]),
                "5": ("diff",   ["git", "diff", "--no-color", "--unified=0"]), # –ö–æ—Ä–æ—Ç–∫–∏–π diff –±–µ–∑ —Ü–≤–µ—Ç–∞
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–ø—Ü–∏–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            opts_str = " ".join(f"{k}:{v[0]}" for k, v in commands.items())
            choice = self.prompt(f"Git menu [{opts_str}] ‚Üí ")

            if not choice or choice not in commands:
                self._set_status_message("Git menu cancelled or invalid choice")
                logging.debug(f"Git menu cancelled or invalid choice: {choice}")
                return

            command_name, cmd_args_template = commands[choice]
            cmd_list = []

            if command_name == "commit":
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è commit, —Ç.–∫. –Ω—É–∂–µ–Ω message
                msg = self.prompt("Commit message: ")
                if not msg:
                    self._set_status_message("Commit cancelled (no message)")
                    logging.debug("Git commit cancelled: no message")
                    return
                # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É commit
                cmd_list = ["git", "commit", "-am", msg] # "-am" –¥–ª—è "add changes and commit"
            elif cmd_args_template is not None:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                cmd_list = list(cmd_args_template) # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ cmd_list —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
            if cmd_list:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread_name = f"GitExecThread-{command_name}-{int(time.time())}"
                threading.Thread(target=self._run_git_command_async,
                                args=(cmd_list, command_name),
                                daemon=True,
                                name=thread_name).start()
                # –°—Ç–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                self._set_status_message(f"Running git {command_name}...")
                logging.debug(f"Started Git command thread: {thread_name} for {cmd_list}")
            else:
                # –≠—Ç–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                logging.warning(f"Git menu: No command list generated for choice {choice}")
                self._set_status_message("Git menu internal error: command not prepared.")


            self._set_status_message("Git menu not implemented")
        except Exception as e:
            logging.error(f"Error in integrate_git: {e}", exc_info=True)
            self._set_status_message("Git menu error (see log)")


    def _fetch_git_info_async(self, file_path: str):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            file_path: –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É (–º–æ–∂–µ—Ç –±—ã—Ç—å None).
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (branch, user, commits) –≤ self._git_q.
        """
        branch = ""
        user_name = ""
        commits = "0"
        is_dirty = False

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π
            # –ï—Å–ª–∏ file_path None –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            start_dir = os.path.dirname(os.path.abspath(file_path)) if file_path and os.path.exists(file_path) else os.getcwd()

            # –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤–≤–µ—Ä—Ö –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            repo_dir = start_dir
            while repo_dir != os.path.dirname(repo_dir) and not os.path.isdir(os.path.join(repo_dir, ".git")):
                repo_dir = os.path.dirname(repo_dir)

            if not os.path.isdir(os.path.join(repo_dir, ".git")):
                logging.debug(f"_fetch_git_info_async: No .git directory found upwards from {start_dir}")
                # –ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                with self._state_lock:
                    self._git_q.put(("", "", "0"))
                return # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ—Ç–æ–∫–∞


            logging.debug(f"_fetch_git_info_async: Found git repo at {repo_dir}")

            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É
            try:
                # git branch --show-current –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ
                branch_result = subprocess.run(
                    ["git", "branch", "--show-current"],
                    capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace', timeout=5
                )
                branch = branch_result.stdout.strip()

            except subprocess.CalledProcessError:
                # Fallback: git symbolic-ref (–¥–ª—è detached HEAD –∏–ª–∏ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π)
                try:
                    branch_result = subprocess.run(
                        ["git", "symbolic-ref", "--short", "HEAD"],
                        capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace', timeout=5
                    )
                    branch = branch_result.stdout.strip()
                except subprocess.CalledProcessError:
                    # –ï—Å–ª–∏ HEAD –Ω–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ (detached HEAD)
                    try:
                         # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π SHA —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
                         branch_result = subprocess.run(
                            ["git", "rev-parse", "--short", "HEAD"],
                            capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace', timeout=5
                         )
                         branch = branch_result.stdout.strip()[:7] # –ü–µ—Ä–≤—ã–µ 7 —Å–∏–º–≤–æ–ª–æ–≤ SHA
                    except subprocess.CalledProcessError:
                         branch = "detached" # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SHA
                    except subprocess.TimeoutExpired:
                         logging.warning("Git rev-parse timed out during branch check.")
                         branch = "timeout" # –¢–∞–π–º–∞—É—Ç
                    except Exception as e:
                        logging.error(f"Unexpected error getting detached HEAD info: {e}")
                        branch = "error" # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SHA
                except subprocess.TimeoutExpired:
                     logging.warning("Git symbolic-ref timed out during branch check.")
                     branch = "timeout"
                except Exception as e:
                    logging.error(f"Unexpected error getting branch info: {e}")
                    branch = "error"

            except FileNotFoundError:
                 logging.warning("Git executable not found during async branch check")
                 branch = "" # –ù–µ—Ç git
            except subprocess.TimeoutExpired:
                 logging.warning("Git branch --show-current timed out.")
                 branch = "timeout"
            except Exception as e:
                logging.error(f"Unexpected error getting branch info: {e}")
                branch = "error"

            # 2. –ì—Ä—è–∑–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ?
            try:
                dirty_result = subprocess.run(
                    ["git", "status", "--porcelain", "--ignore-submodules"], # --porcelain –¥–ª—è –º–∞—à–∏–Ω–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
                    capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace', timeout=5
                )
                if dirty_result.returncode == 0 and dirty_result.stdout.strip():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–Ω–¥–µ–∫—Å (Untracked, Modified)
                    # –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–Ω–¥–µ–∫—Å (Staged).
                    # --porcelain –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ " M filename", "?? filename"
                    # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç, –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.
                    is_dirty = True
                    # –í–µ—Ç–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "*", –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≥—Ä—è–∑–Ω–æ—Å—Ç–∏
                    # –í–µ—Ç–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '*', –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≥—Ä—è–∑–Ω–æ—Å—Ç–∏
                    if '*' not in branch: # –ò–∑–±–µ–≥–∞–µ–º –¥–≤–æ–π–Ω—ã—Ö '*'
                         branch += "*"

            except FileNotFoundError:
                logging.warning("Git executable not found during async status check")
            except subprocess.CalledProcessError as e:
                logging.warning(f"Git status --porcelain failed: {e}")
            except subprocess.TimeoutExpired:
                logging.warning("Git status --porcelain timed out.")
            except Exception as e:
                logging.error(f"Unexpected error getting git status: {e}")

            # 3. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_result = subprocess.run(
                    ["git", "config", "user.name"],
                    capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace', timeout=5
                )
                user_name = user_result.stdout.strip() if user_result.returncode == 0 else ""
            except FileNotFoundError:
                logging.warning("Git executable not found during async user check")
            except subprocess.CalledProcessError:
                 user_name = ""
            except subprocess.TimeoutExpired:
                 logging.warning("Git config user.name timed out.")
                 user_name = "timeout"
            except Exception as e:
                logging.error(f"Unexpected error getting git user name: {e}")
                user_name = "error"

            # 4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
            try:
                commits_result = subprocess.run(
                    ["git", "rev-list", "--count", "HEAD"],
                    capture_output=True, text=True, check=True, cwd=repo_dir, encoding='utf-8', errors='replace', timeout=5
                )
                commits = commits_result.stdout.strip() if commits_result.returncode == 0 and commits_result.stdout.strip().isdigit() else "0"
            except FileNotFoundError:
                logging.warning("Git executable not found during async commits check")
                commits = "0"
            except subprocess.CalledProcessError:
                commits = "0"
            except subprocess.TimeoutExpired:
                logging.warning("Git rev-list --count timed out.")
                commits = "timeout"
            except Exception as e:
                logging.error(f"Unexpected error getting git commit count: {e}")
                commits = "error"

        except FileNotFoundError:
            logging.warning("Git executable not found in async thread (initial check)")
            # –ï—Å–ª–∏ git –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—á–∞–ª–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç
            branch, user_name, commits = "", "", "0"
        except Exception as e:
            logging.exception(f"Error fetching Git info in async thread: {e}")
            branch, user_name, commits = "fetch error", "", "0"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å
        try:
            with self._state_lock:
                self._git_q.put((branch, user_name, commits))
            logging.debug(f"Fetched async Git info and queued: {(branch, user_name, commits)}")
        except Exception as q_e:
            logging.error(f"Failed to put fetched Git info into queue: {q_e}")


    def update_git_info(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
        –∏ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è (–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ—Ç–∫—Ä—ã–ª —Ñ–∞–π–ª).
        –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Git –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        if not self.config.get("git", {}).get("enabled", True) or not self.config.get("settings", {}).get("show_git_info", True):
            # –ï—Å–ª–∏ Git –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Git –∏–Ω—Ñ–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º git_info
            with self._state_lock:
                if self.git_info != ("", "", "0"):
                     self.git_info = ("", "", "0")
                     logging.debug("Git integration or display disabled, git_info set to default")
            return # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫

        with self._state_lock:
            current_filename = self.filename
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ filename –∏–∑–º–µ–Ω–∏–ª—Å—è –ò–õ–ò –µ—Å–ª–∏ git_info –µ—â–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ (–ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç)
            # –ò–õ–ò –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –µ–≥–æ git_info –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å –¥–∞–≤–Ω–æ?
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ filename –∏–∑–º–µ–Ω–∏–ª—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Git –∏–Ω—Ñ–æ.
            # –ò–ª–∏ –µ—Å–ª–∏ filename –ù–ï None –∏ last_git_filename –ë–´–õ None (–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞)
            needs_update = False
            if current_filename != self._last_git_filename:
                needs_update = True
                logging.debug(f"Git update needed: filename changed from {self._last_git_filename} to {current_filename}")
            elif current_filename is not None and self._last_git_filename is None:
                needs_update = True
                logging.debug(f"Git update needed: filename set to {current_filename}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –ª–æ–≥–∏–∫—É (—Ç–∞–π–º–µ—Ä)

            if needs_update:
                 self._last_git_filename = current_filename # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—É—â–µ–Ω –∑–∞–ø—Ä–æ—Å
                 logging.debug(f"Starting Git info update for {current_filename}")
                 thread_name = f"GitInfoFetchThread-{int(time.time())}"
                 threading.Thread(
                    target=self._fetch_git_info_async,
                    args=(current_filename,),
                    daemon=True, # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    name=thread_name
                 ).start()
            # else:
                 # logging.debug(f"Git update skipped: filename unchanged ({current_filename}) and git_info not explicitly requested.")


    def _handle_git_info(self, git_data):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ git –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞.
        git_data: tuple (branch, user, commits)
        """
        with self._state_lock:
            self.git_info = git_data

        branch, user, commits = git_data
        git_status_msg = ""
        if branch or user or commits != "0":
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è Git –∏–Ω—Ñ–æ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
            git_color = self.colors.get("git_info", curses.color_pair(12))
            if '*' in branch:
                git_color = self.colors.get("git_dirty", curses.color_pair(13))
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ Git
            git_status_msg = f"Git: {branch}"
            if commits != "0":
                git_status_msg += f" ({commits} commits)"
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å user –ø–æ –∂–µ–ª–∞–Ω–∏—é:
            # if user: git_status_msg += f" by {user}"
            # –£–¥–∞–ª—è–µ–º –Ω–µ–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            git_status_msg = ''.join(c if c.isprintable() else '?' for c in git_status_msg)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
            self.status_message = git_status_msg
            logging.debug(f"Git status updated: {git_status_msg}")
        else:
            self.status_message = "Git: (no repo)"
            logging.debug("Git status updated: no repo found.")

#-------------- end GIT ------------------------------------------------------

    def goto_line(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç +N / -N –æ—Ç —Ç–µ–∫—É—â–µ–π."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        original_status = self.status_message
        self._set_status_message(f"Go to line (1-{len(self.text)}, ¬±N, %): ")

        raw = self.prompt(f"Go to line (1-{len(self.text)}, ¬±N, %): ")
        if not raw:
            self._set_status_message(original_status if original_status else "Goto cancelled")
            logging.debug("Goto cancelled by user.")
            return

        try:
            target_line = None
            total_lines = len(self.text)

            if raw.endswith('%'):
                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–ª–∏–Ω—ã —Ñ–∞–π–ª–∞
                try:
                    pct = float(raw.rstrip('%')) # –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä–æ–±–Ω—ã–º
                    if not (0 <= pct <= 100):
                         self._set_status_message("Percentage out of range (0-100)")
                         return
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–æ–∫—É (1-based)
                    target_line = max(1, min(total_lines, round(total_lines * pct / 100.0)))
                    logging.debug(f"Goto: Percentage {pct}%, target line {target_line}")
                except ValueError:
                    self._set_status_message("Invalid percentage format")
                    logging.warning(f"Goto: Invalid percentage format '{raw}'")
                    return
            elif raw.startswith(('+', '-')):
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Å–¥–≤–∏–≥
                try:
                    delta = int(raw)
                    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ (0-based) + 1 + delta -> —Ü–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (1-based)
                    target_line = self.cursor_y + 1 + delta
                    logging.debug(f"Goto: Relative delta {delta}, current line {self.cursor_y + 1}, target line {target_line}")
                except ValueError:
                    self._set_status_message("Invalid relative number format")
                    logging.warning(f"Goto: Invalid relative number format '{raw}'")
                    return
            else:
                # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                try:
                    target_line = int(raw)
                    logging.debug(f"Goto: Absolute target line {target_line}")
                except ValueError:
                    self._set_status_message("Invalid line number format")
                    logging.warning(f"Goto: Invalid line number format '{raw}'")
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (1-based)
            if target_line is None or not (1 <= target_line <= total_lines):
                 self._set_status_message(f"Line out of range (1‚Äì{total_lines})")
                 logging.warning(f"Goto: Target line {target_line} out of range (1-{total_lines})")
                 return

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–æ–∫—É (0-based)
            self.cursor_y = target_line - 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y])) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ

            # Adjust vertical scroll to bring the cursor into view, ideally centering it
            height, width = self.stdscr.getmaxyx()
            text_area_height = max(1, height - 2) # –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞

            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
            if self.cursor_y < self.scroll_top or self.cursor_y >= self.scroll_top + text_area_height:
                 # –°–¥–≤–∏–≥–∞–µ–º scroll_top —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                 self.scroll_top = max(0, self.cursor_y - text_area_height // 2)
                 # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ scroll_top –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                 self.scroll_top = min(self.scroll_top, max(0, len(self.text) - text_area_height))

            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ _position_cursor

            self._set_status_message(f"Moved to line {target_line}")
            logging.debug(f"Goto: Cursor moved to line {target_line}")

        except Exception as e:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            self._set_status_message(f"Goto error: {str(e)[:80]}...")
            logging.exception(f"Unexpected error in goto_line for input '{raw}'")


    def toggle_insert_mode(self) -> None:
        """
        Switch between *Insert* (default) and *Replace* modes.

        *Insert*  ‚Äì¬†–≤—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º, —Å–¥–≤–∏–≥–∞—è —Ö–≤–æ—Å—Ç —Å—Ç—Ä–æ–∫–∏ –≤–ø—Ä–∞–≤–æ.  
        *Replace* ‚Äì¬†–∑–∞–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å), –Ω–µ –º–µ–Ω—è—è –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏.
        """
        self.insert_mode = not self.insert_mode
        mode_txt = "Insert" if self.insert_mode else "Replace"
        logging.debug("Insert‚Äëmode toggled ‚Üí %s", mode_txt)
        self._set_status_message(f"Mode: {mode_txt}")


# ==================== bracket =======================
    def highlight_matching_brackets(self) -> None:
        """
        –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø–∞—Ä–Ω—É—é —Å–∫–æ–±–∫—É –∫ —Ç–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç –∫—É—Ä—Å–æ—Ä.
        –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∫ –∏ find_matching_bracket).
        """
        # ‚îÄ‚îÄ 1. –ö—É—Ä—Å–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—Å—Ç–∞ –∏ —ç–∫—Ä–∞–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        height, width = self.stdscr.getmaxyx()
        text_area_height = max(1, height - 2)

        if not (0 <= self.cursor_y < len(self.text)):
            return  # –∫—É—Ä—Å–æ—Ä –≤–Ω–µ —Ç–µ–∫—Å—Ç–∞

        if not (self.scroll_top <= self.cursor_y < self.scroll_top + text_area_height):
            return  # —Å—Ç—Ä–æ–∫–∞ –∫—É—Ä—Å–æ—Ä–∞ –Ω–µ –≤–∏–¥–Ω–∞

        line = self.text[self.cursor_y]
        if not line:  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            return

        # ‚îÄ‚îÄ 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª-—Å–∫–æ–±–∫—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º (–∏–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        col = self.cursor_x
        if col >= len(line):  # –∫—É—Ä—Å–æ—Ä ¬´–∑–∞¬ª –∫–æ–Ω—Ü–æ–º —Å—Ç—Ä–æ–∫–∏
            col = len(line) - 1

        if col < 0 or col >= len(line):  # –¥–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            return

        if line[col] not in '(){}[]':
            return  # –Ω–µ –Ω–∞ —Å–∫–æ–±–∫–µ

        bracket_char = line[col]

        # ‚îÄ‚îÄ 3. –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–Ω—É—é —Å–∫–æ–±–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        match = self.find_matching_bracket(line, col, bracket_char)
        if not match:
            return  # –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

        match_y, match_x = match  # –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É: match_y == self.cursor_y
        if not (0 <= match_x < len(self.text[match_y])):  # –∑–∞—â–∏—Ç–∞
            return

        # ‚îÄ‚îÄ 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è curses ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        line_num_width = len(str(max(1, len(self.text)))) + 1  # —à–∏—Ä–∏–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ¬´NN ¬ª
        def to_screen_x(row: int, col_: int) -> int:
            return line_num_width + self.get_string_width(self.text[row][:col_]) - self.scroll_left

        scr_y  = self.cursor_y - self.scroll_top
        scr_x1 = to_screen_x(self.cursor_y, col)
        scr_x2 = to_screen_x(match_y,     match_x)

        if not (line_num_width <= scr_x1 < width):
            return
        if not (line_num_width <= scr_x2 < width):
            return

        # ‚îÄ‚îÄ 5. –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ–±–µ —Å–∫–æ–±–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            self.stdscr.chgat(scr_y, scr_x1, self.get_char_width(bracket_char), curses.A_REVERSE)
            self.stdscr.chgat(scr_y, scr_x2, self.get_char_width(self.text[match_y][match_x]), curses.A_REVERSE)
        except curses.error:
            pass  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç


    def find_matching_bracket(self, line, col, bracket):
        """
        Searches for the matching bracket for the one under the cursor *within the same line*.
        Returns (row, col) of the matching bracket or None if not found.
        Limitations: does not search across lines.
        """
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã —Å–∫–æ–±–æ–∫
        brackets = {"(": ")", "{": "}", "[": "]", ")": "(", "}": "{", "]": "["}
        open_brackets = "({["
        close_brackets = ")}]"

        if not isinstance(bracket, str) or len(bracket) != 1 or bracket not in brackets:
            return None # –ù–µ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∫–æ–±–æ–∫

        is_open = bracket in open_brackets
        # –¶–µ–ª–µ–≤–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        target_bracket = brackets[bracket]

        stack = []
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞: –≤–ø—Ä–∞–≤–æ –¥–ª—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, –≤–ª–µ–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö
        direction = 1 if is_open else -1
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–∏—Å–∫–∞: —Å–ª–µ–¥—É—é—â–∏–π/–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∏–º–≤–æ–ª –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ `col`
        # col - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å —Å–∫–æ–±–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º –ø–∞—Ä—É.
        start_pos = col + direction

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ –≤ –Ω—É–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        if direction == 1: # –ü–æ–∏—Å–∫ –≤–ø—Ä–∞–≤–æ –æ—Ç col
            for i in range(start_pos, len(line)):
                char = line[i]
                if char in open_brackets:
                    stack.append(char) # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
                elif char in close_brackets:
                    # –í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                    if not stack:
                        # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç, —ç—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ä–æ–π –¥–ª—è –∏—Å–∫–æ–º–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
                        # (–µ—Å–ª–∏ –∏—Å–∫–æ–º–∞—è –±—ã–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π).
                        if char == target_bracket:
                            return (self.cursor_y, i) # –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞
                    else:
                        # –ï—Å–ª–∏ —Å—Ç–µ–∫ –Ω–µ –ø—É—Å—Ç, —ç—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π.
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∫–æ–±–∫–µ –≤ —Å—Ç–µ–∫–µ.
                        top_of_stack = stack[-1]
                        if brackets[top_of_stack] == char:
                             stack.pop() # –í—ã–Ω–∏–º–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é –∏–∑ —Å—Ç–µ–∫–∞
                        # –ï—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã.

        else: # direction == -1, –ø–æ–∏—Å–∫ –≤–ª–µ–≤–æ –æ—Ç col
             for i in range(start_pos, -1, -1):
                char = line[i]
                if char in close_brackets:
                    stack.append(char) # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
                elif char in open_brackets:
                    # –í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                    if not stack:
                        # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç, —ç—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ä–æ–π –¥–ª—è –∏—Å–∫–æ–º–æ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
                        # (–µ—Å–ª–∏ –∏—Å–∫–æ–º–∞—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π).
                        if char == target_bracket:
                            return (self.cursor_y, i) # –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞
                    else:
                         # –ï—Å–ª–∏ —Å—Ç–µ–∫ –Ω–µ –ø—É—Å—Ç, —ç—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π.
                        top_of_stack = stack[-1]
                        if brackets[char] == top_of_stack: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                            stack.pop() # –í—ã–Ω–∏–º–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∏–∑ —Å—Ç–µ–∫–∞
                        # –ï—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.

        return None # –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω


    def show_help(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π.
        """
        logging.debug("show_help called")
        try:
             
            # –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
            help_lines = [
                "  ‚îÄ‚îÄ  Sway-Pad Help  ‚îÄ‚îÄ  ",
                "",
                "  F1        : Help",
                "  F2        : New file",
                "  F3        : Find next",
                "  F4        : Linter",
                "  F5        : Save as‚Ä¶",
                "  F6        : Search/Replace",
                "  F9        : Git-–º–µ–Ω—é",

                "  Ctrl+S    : Save",
                "  Ctrl+O    : Open file",
                "  Ctrl+C    : Copy",
                "  Ctrl+X    : Cut",
                "  Ctrl+V    : Paste",

                "  Ctrl+Z    : Undo",
                "  Shift+Z   : Redo",

                "  Ctrl+F    : Find",
                "  Ctrl+G    : Go to line",
                "  Ctrl+Q    : Quit",
                "  Ctrl+A    : Select all",

                "  Shift+Arrows/Home/End: Extend selection",

                "----------------------------",
                "",
                "  ¬© 2025 Siergej Sobolewski ‚Äî Sway-Pad",
                "  Licensed under the GPLv3 License",
                "",
                "  Press any key to close", # –ò–∑–º–µ–Ω–µ–Ω–æ —Å Esc
            ]

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞ —Å–ø—Ä–∞–≤–∫–∏
            h = len(help_lines) + 2 # –í—ã—Å–æ—Ç–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ + –≤–µ—Ä—Ö–Ω—è—è/–Ω–∏–∂–Ω—è—è —Ä–∞–º–∫–∞
            w = max(self.get_string_width(l) for l in help_lines) + 4  # –®–∏—Ä–∏–Ω–∞ = –º–∞–∫—Å. —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ + –ª–µ–≤–∞—è/–ø—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞ –∏ –æ—Ç—Å—Ç—É–ø—ã
            max_y, max_x = self.stdscr.getmaxyx() # –†–∞–∑–º–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π –æ–∫–Ω–æ
            w = min(w, max_x - 2) # –ù–µ —à–∏—Ä–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–∏–Ω—É—Å —Ä–∞–º–∫–∞
            h = min(h, max_y - 2) # –ù–µ –≤—ã—à–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–∏–Ω—É—Å —Ä–∞–º–∫–∞

            # –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –æ–∫–Ω–∞ —Å–ø—Ä–∞–≤–∫–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ)
            y0 = max(0, (max_y - h) // 2)
            x0 = max(0, (max_x - w) // 2)

            win = None # –û–±—ä–µ–∫—Ç –æ–∫–Ω–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                win = curses.newwin(h, w, y0, x0)
                win.bkgd(" ", curses.color_pair(0))
                win.border() # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É

                # –ü–∏—à–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –≤ –æ–∫–Ω–æ
                for i, text in enumerate(help_lines):
                    display_text = text[:w - 4] # –û–±—Ä–µ–∑–∞–µ–º, –æ—Å—Ç–∞–≤–ª—è—è –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –∏ —Ä–∞–º–∫–∏
                    try:
                        # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å –æ—Ç—Å—Ç—É–ø–∞ 2 –æ—Ç –ª–µ–≤–æ–π —Ä–∞–º–∫–∏
                        win.addstr(i + 1, 2, display_text)
                    except curses.error as e:
                        logging.warning(f"Curses error drawing help text line {i}: {e}")
                        pass # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                win.noutrefresh() # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏, –Ω–æ –Ω–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å—Ä–∞–∑—É

            except curses.error as e:
                logging.error(f"Curses error creating or drawing help window: {e}")
                self._set_status_message(f"Error displaying help: {str(e)[:80]}...")
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

            # –ü—Ä—è—á–µ–º –∫—É—Ä—Å–æ—Ä –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–æ—Ä–∞
            prev_vis = 1 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–∏–¥–∏–º—ã–π)
            try:
                prev_vis = curses.curs_set(0)   # 0 = invisible, 1/2 = visible
                logging.debug(f"Hid cursor for help, previous state: {prev_vis}")
            except curses.error as e:
                logging.warning(f"Curses error hiding cursor for help: {e}. Terminal may not support cursor visibility changes.")
                # –ï—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, prev_vis –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω (–ø–æ–¥ –æ–∫–Ω–æ–º —Å–ø—Ä–∞–≤–∫–∏) –∏ –∑–∞—Ç–µ–º –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
            self.stdscr.noutrefresh()
            if win: # –ï—Å–ª–∏ –æ–∫–Ω–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ
                win.noutrefresh()
            curses.doupdate() # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —ç–∫—Ä–∞–Ω

            # –ñ–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–∞–≤–∫–∏
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è prompt, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            try:
                self.stdscr.nodelay(False)
                # curses.flushinp() # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–¥ getch
                logging.debug("Waiting for key press to close help window.")
                ch = self.stdscr.getch() # –ñ–¥–µ–º –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É
                KEY_LOGGER.debug(f"Help closed by key code: {ch}")

            except curses.error as e_getch:
                logging.error(f"Curses error getting char to close help: {e_getch}")
                # –ï—Å–ª–∏ getch —É–ø–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
                # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä –∏ –≤—ã–π—Ç–∏.
                pass # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –±–ª–æ–∫ finally

            # ‚òÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ—Ä–∞ –∏ –æ—á–∏—â–∞–µ–º –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏
            finally:
                logging.debug("Closing help window.")
                try:
                    # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏ curses
                    if win:
                        del win
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–æ—Ä–∞ –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    try:
                        curses.curs_set(prev_vis)
                        logging.debug(f"Restored cursor visibility to {prev_vis}")
                    except curses.error as e_curs_set:
                        logging.warning(f"Curses error restoring cursor after help: {e_curs_set}. Terminal may not support.")

                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    curses.flushinp()
                    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏
                    self.drawer.draw() # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏

                except curses.error as e_finally:
                    logging.critical(f"Critical Curses error during help window cleanup: {e_finally}", exc_info=True)
                    # –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É–ø–∞–ª–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.
                    print(f"\nCritical Curses error during help window cleanup: {e_finally}", file=sys.stderr)
                    # –ü—Ä–æ–±—Ä–æ—Å–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
                    raise RuntimeError(f"Critical Curses error during help window cleanup: {e_finally}") from e_finally

            self._set_status_message("Help displayed")
        except Exception as e:
            logging.error(f"Error in show_help: {e}", exc_info=True)
            self._set_status_message("Help error (see log)")


    # =============  –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞  =========================================

    def run(self) -> None:
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–≤–æ–¥–∞ –∏ —Ä–∞—Å–∫–ª–∞–¥–æ–∫.
        """
        logging.info("Editor main loop started")
        
        self.stdscr.nodelay(True)
        self.stdscr.keypad(True)

        needs_redraw   = True
        last_draw_time = 0.0
        FPS            = 30

        while True:
            try:
                if self._process_all_queues():
                    needs_redraw = True
            except Exception:
                logging.exception("queue-processing error")
                self._set_status_message("Queue error (see log)")
                curses.flushinp()
                needs_redraw = True

            try:
                key = self.stdscr.get_wch()  # str | int | -1
                logging.debug(f"Received key: {repr(key)} ({chr(key) if isinstance(key, int) and 0 < key < 256 else ''})")

                if key != -1:
                    if isinstance(key, str) and len(key) == 1:
                        key = ord(key)
                    self.handle_input(key)
                    needs_redraw = True

            except KeyboardInterrupt:
                self.exit_editor()
            except curses.error as e:
                if str(e) != "no input":
                    logging.error("curses input: %s", e)
                    self._set_status_message(f"Input error: {e}")
                    curses.flushinp()
                    needs_redraw = True
            except Exception:
                logging.exception("input error")
                self._set_status_message("Input error")
                curses.flushinp()
                needs_redraw = True

            now = time.time()
            if needs_redraw and now - last_draw_time >= 1 / FPS:
                try:
                    self.drawer.draw()
                except curses.error as e:
                    logging.error("draw: %s", e)
                    self._set_status_message("Draw error")
                except Exception:
                    logging.exception("draw error")
                    self._set_status_message("Draw error")
                last_draw_time = now
                needs_redraw = False

            time.sleep(0.005)


    def _process_all_queues(self) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞.
        """
        processed_any = False

        # --- –æ–±—â–∞—è –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π (_msg_q) ---
        while True:
            try:
                msg = self._msg_q.get_nowait()
            except queue.Empty:
                break

            processed_any = True

            if isinstance(msg, tuple):
                msg_type, *msg_data = msg

                if msg_type == "auto_save":
                    text_lines, filename, encoding = msg_data
                    try:
                        with open(filename, "w", encoding=encoding, errors="replace") as f:
                            f.write(os.linesep.join(text_lines))
                        with self._state_lock:
                            self.modified = False
                        self.status_message = f"Auto-saved {os.path.basename(filename)}"
                        logging.info(f"Auto-saved {filename}")
                        if self._lexer and getattr(self._lexer, "name", None) in ("python", "python3"):
                            threading.Thread(
                                target=self.run_lint_async,
                                args=(os.linesep.join(text_lines),),
                                daemon=True
                            ).start()
                        self.update_git_info()
                    except Exception as e:
                        logging.exception("Auto-save error")
                        self.status_message = f"Auto-save error: {e}"

                elif msg_type == "status":
                    self.status_message = msg_data[0]
                    logging.debug(f"Set status_message to: {msg_data[0]}")

                else:
                    logging.warning(f"Unknown queue tuple ignored: {msg!r}")

            elif isinstance(msg, str):
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å—Ç–∞—Ç—É—Å
                self.status_message = msg
                logging.debug(f"Set status_message to (legacy): {msg}")

            else:
                logging.warning(f"Unknown queue item ignored: {msg!r}")

        # --- –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ shell-–∫–æ–º–∞–Ω–¥ ---
        while True:
            try:
                result = self._shell_cmd_q.get_nowait()
            except queue.Empty:
                break
            processed_any = True
            self.status_message = str(result)
            logging.debug(f"Shell command result set to status: {result}")

        # --- –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ git_info ---
        while True:
            try:
                git_data = self._git_q.get_nowait()
            except queue.Empty:
                break
            processed_any = True
            if isinstance(git_data, tuple) and len(git_data) >= 3:
                self._handle_git_info(git_data)
            else:
                logging.warning(f"Unknown git_data format in _git_q: {git_data!r}")

        # --- –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ git-–∫–æ–º–∞–Ω–¥ ---
        while True:
            try:
                git_msg = self._git_cmd_q.get_nowait()
            except queue.Empty:
                break
            processed_any = True
            text = str(git_msg)
            if text == "update_git_info":
                self.update_git_info()
                logging.debug("Git info update requested from git_cmd_q.")
            else:
                self.status_message = text
                logging.debug(f"Git command result set to status: {text}")

        return processed_any



# Class DrawScreen ------------------------------------------------------
class DrawScreen:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
    –°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º curses.
    """

    def __init__(self, editor):
        self.editor = editor
        self.stdscr = editor.stdscr
        self.colors = editor.colors # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å —Ü–≤–µ—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞


    def draw(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞."""
        try:
            # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ—á–µ—Ä–µ–¥–∏ (auto-save, shell, git –∏ —Ç.–ø.)
            self.editor._process_all_queues()
            height, width = self.stdscr.getmaxyx()

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            if height < 5 or width < 20:
                self._show_small_window_error(height, width)
                self.editor.last_window_size = (height, width)
                self.stdscr.refresh()
                return

            # 3. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (height, width) != self.editor.last_window_size:
                self.editor.visible_lines = max(1, height - 2)
                self.editor.last_window_size = (height, width)
                self.editor.scroll_left = 0
                self._adjust_vertical_scroll()
                logging.debug(f"Window resized to {width}x{height}. Visible lines: {self.editor.visible_lines}. Scroll left reset.")

            # 4. –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            self.stdscr.clear()

            # 5. –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self._draw_line_numbers()
            self._draw_text_with_syntax_highlighting()
            self._draw_search_highlights()
            self._draw_selection()
            self._draw_matching_brackets()
            self._draw_status_bar()

            # 6. –†–∏—Å—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–∞–Ω–µ–ª—å –ª–∏–Ω—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞)
            self._draw_lint_panel()   # <--- –í—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

            # 7. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä (–µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞)
            if not getattr(self.editor, 'lint_panel_active', False):
                self._position_cursor()

            # 8. –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
            self._update_display()

        except curses.error as e:
            logging.error(f"Curses error in DrawScreen.draw(): {e}", exc_info=True)
            self.editor._set_status_message(f"Draw error: {str(e)[:80]}...")

        except Exception as e:
            logging.exception("Unexpected error in DrawScreen.draw()")
            self.editor._set_status_message(f"Draw error: {str(e)[:80]}...")



    # def draw(self):
    #     """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞."""
    #     try:
    #         # —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ—á–µ—Ä–µ–¥–∏ (auto-save, shell, git –∏ —Ç.–ø.)
    #         self.editor._process_all_queues()
    #         height, width = self.stdscr.getmaxyx()

    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    #         if height < 5 or width < 20:
    #              self._show_small_window_error(height, width)
    #              self.editor.last_window_size = (height, width) # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
    #              # –í —Å–ª—É—á–∞–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –æ–∫–Ω–∞, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    #              self.stdscr.refresh() # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    #              return

    #         # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏
    #         if (height, width) != self.editor.last_window_size:
    #             self.editor.visible_lines = max(1, height - 2) # –í—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ = –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ - 1 —Å—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä–∞ - 1 —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    #             self.editor.last_window_size = (height, width)
    #             # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É, —Ç.–∫. –µ–µ –ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
    #             self.editor.scroll_left = 0
    #             # –¢–∞–∫–∂–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º scroll_top, —á—Ç–æ–±—ã –∫—É—Ä—Å–æ—Ä –æ—Å—Ç–∞–ª—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    #             self._adjust_vertical_scroll()
    #             logging.debug(f"Window resized to {width}x{height}. Visible lines: {self.editor.visible_lines}. Scroll left reset.")

    #         # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞)
    #         self.stdscr.clear() # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
    #         # –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
    #         self._draw_line_numbers()
    #         # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç, –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –ø–æ–∏—Å–∫, –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    #         self._draw_text_with_syntax_highlighting()     
    #         # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–≤–µ—Ä—Ö —Ç–µ–∫—Å—Ç–∞
    #         self._draw_search_highlights()
    #         # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
    #         self._draw_selection()         
    #         # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–∞—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
    #         self._draw_matching_brackets() # NEW
    #         # –†–∏—Å—É–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä 
    #         self._draw_status_bar()
    #         # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä
    #         self._position_cursor()
    #         # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —ç–∫—Ä–∞–Ω
    #         self._update_display()

    #     except curses.error as e:
    #          # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ Curses –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ
    #          logging.error(f"Curses error in DrawScreen.draw(): {e}", exc_info=True)
    #          # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    #          self.editor._set_status_message(f"Draw error: {str(e)[:80]}...")

    #     except Exception as e:
    #         # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Curses, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    #         logging.exception("Unexpected error in DrawScreen.draw()")
    #         self.editor._set_status_message(f"Draw error: {str(e)[:80]}...")


    def _show_small_window_error(self, height, width):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–º –æ–∫–Ω–µ."""
        msg = f"Window too small ({width}x{height}). Minimum is 20x5."
        try:
            self.stdscr.clear() # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            msg_len = len(msg)
            start_col = max(0, (width - msg_len) // 2)
            self.stdscr.addstr(height // 2, start_col, msg)
        except curses.error:
            # –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            pass


    def _draw_line_numbers(self):
        """–†–∏—Å—É–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫."""
        height, width = self.stdscr.getmaxyx()
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ - —ç—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
        max_line_num = len(self.editor.text)
        max_line_num_digits = len(str(max(1, max_line_num))) # –ú–∏–Ω–∏–º—É–º 1 —Ü–∏—Ñ—Ä–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
        line_num_width = max_line_num_digits + 1 # +1 –¥–ª—è –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞—é—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –≤ —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
        if line_num_width >= width:
             logging.warning(f"Window too narrow to draw line numbers ({width} vs {line_num_width})")
             # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –Ω–æ–º–µ—Ä–æ–≤
             self._text_start_x = 0 # –¢–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0-–π –∫–æ–ª–æ–Ω–∫–∏
             return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
        self._text_start_x = line_num_width
        line_num_color = self.colors.get("line_number", curses.color_pair(7))
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∏–º—ã–º —Å—Ç—Ä–æ–∫–∞–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        for screen_row in range(self.editor.visible_lines):
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ self.text
            line_idx = self.editor.scroll_top + screen_row
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤ self.text
            if line_idx < len(self.editor.text):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-based)
                line_num_str = f"{line_idx + 1:>{max_line_num_digits}} " # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é + –ø—Ä–æ–±–µ–ª
                try:
                    # –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                    self.stdscr.addstr(screen_row, 0, line_num_str, line_num_color)
                except curses.error as e:
                    logging.error(f"Curses error drawing line number at ({screen_row}, 0): {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            else:
                 # —Ä–∏—Å—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º —Ñ–æ–Ω–æ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤
                 empty_num_str = " " * line_num_width
                 try:
                    self.stdscr.addstr(screen_row, 0, empty_num_str, line_num_color)
                 except curses.error as e:
                    logging.error(f"Curses error drawing empty line number background at ({screen_row}, 0): {e}")


    def _draw_lint_panel(self):
        """
        –†–∏—Å—É–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–∞–Ω–µ–ª—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ª–∏–Ω—Ç–µ—Ä–∞.
        """
        if not getattr(self.editor, 'lint_panel_active', False):
            return
        msg = self.editor.lint_panel_message
        if not msg:
            return
        h, w = self.stdscr.getmaxyx()
        panel_height = min(max(6, msg.count('\n') + 4), h - 2)
        panel_width = min(max(40, max(len(line) for line in msg.splitlines()) + 4), w - 4)
        start_y = max(1, (h - panel_height) // 2)
        start_x = max(2, (w - panel_width) // 2)

        # –†–∞–º–∫–∞ –æ–∫–Ω–∞
        try:
            for i in range(panel_height):
                line = ""
                if i == 0:
                    line = "‚îå" + "‚îÄ" * (panel_width - 2) + "‚îê"
                elif i == panel_height - 1:
                    line = "‚îî" + "‚îÄ" * (panel_width - 2) + "‚îò"
                else:
                    line = "‚îÇ" + " " * (panel_width - 2) + "‚îÇ"
                self.stdscr.addstr(start_y + i, start_x, line, curses.A_BOLD)

            # –°–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏—Ç–æ–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            msg_lines = msg.splitlines()
            for idx, line in enumerate(msg_lines[:panel_height - 3]):
                self.stdscr.addnstr(
                    start_y + idx + 1, start_x + 2,
                    line.strip(), panel_width - 4, curses.A_NORMAL
                )
            # Footer
            footer = "Press Esc to close"
            self.stdscr.addnstr(
                start_y + panel_height - 2, start_x + 2,
                footer, panel_width - 4, curses.A_DIM
            )
        except curses.error as e:
            logging.error(f"–û—à–∏–±–∫–∞ curses –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –ø–∞–Ω–µ–ª–∏ –ª–∏–Ω—Ç–µ—Ä–∞: {e}")


    def _draw_text_with_syntax_highlighting(self):
        """–†–∏—Å—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π."""
        height, width = self.stdscr.getmaxyx()
        # text_area_width –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
        # text_area_width = max(1, width - self._text_start_x) 

        start_line = self.editor.scroll_top
        end_line = min(start_line + self.editor.visible_lines, len(self.editor.text))

        if start_line >= end_line:
            logging.debug("DrawScreen draw_text: No visible lines to draw.")
            return

        visible_lines_content = self.editor.text[start_line:end_line]
        line_indices = list(range(start_line, end_line))

        logging.debug(
            f"DrawScreen draw_text: Drawing lines {start_line}-{end_line-1}. "
            f"scroll_left={self.editor.scroll_left}, text_start_x={self._text_start_x}, total_window_width={width}"
        )

        # highlighted_lines_tokens —ç—Ç–æ list[list[tuple[str, int]]]
        # –í–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫ - –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π - –ø–æ —Ç–æ–∫–µ–Ω–∞–º –≤ —Å—Ç—Ä–æ–∫–µ, –∫–æ—Ä—Ç–µ–∂ - (—Ç–µ–∫—Å—Ç_—Ç–æ–∫–µ–Ω–∞, –∞—Ç—Ä–∏–±—É—Ç_—Ü–≤–µ—Ç–∞)
        highlighted_lines_tokens = self.editor.apply_syntax_highlighting_with_pygments(visible_lines_content, line_indices)

        for screen_row, (text_line_index, tokens_for_this_line) in enumerate(zip(line_indices, highlighted_lines_tokens)):
            
            original_line_text_for_log = self.editor.text[text_line_index]
            logging.debug(
                f"  DrawScreen draw_text: Line {text_line_index} (screen_row {screen_row}), "
                f"Original content: '{original_line_text_for_log[:70].replace(chr(9), '/t/')}{'...' if len(original_line_text_for_log)>70 else ''}'"
            )
            # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            logging.debug(
                f"    DrawScreen draw_text: Tokens for line {text_line_index}: "
                f"{[(token_text.replace(chr(9), '/t/'), token_attr) for token_text, token_attr in tokens_for_this_line if isinstance(token_text, str)]}"
            )
            # logical_char_col_abs - —Å—É–º–º–∞—Ä–Ω–∞—è *–ª–æ–≥–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞* (–æ—Ç wcwidth) —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
            logical_char_col_abs = 0 
            
            for token_index, (token_text_content, token_color_attribute) in enumerate(tokens_for_this_line):
                logging.debug(
                    f"      DrawScreen draw_text: Token {token_index}: text='{token_text_content.replace(chr(9),'/t/')}', attr={token_color_attribute}"
                )
                if not token_text_content: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
                    logging.debug("        DrawScreen draw_text: Skipping empty token.")
                    continue

                for char_index_in_token, char_to_render in enumerate(token_text_content):
                    char_printed_width = self.editor.get_char_width(char_to_render)
                    
                    # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–≥–æ —à–∏—Ä–∏–Ω—ã
                    logging.debug(
                        f"        DrawScreen draw_text: Char '{char_to_render.replace(chr(9),'/t/')}' (idx_in_token {char_index_in_token}), "
                        f"current_logical_col_abs_BEFORE_this_char={logical_char_col_abs}, char_width={char_printed_width}"
                    )

                    if char_printed_width == 0: 
                        logging.debug("          DrawScreen draw_text: Skipping zero-width char.")
                        continue # logical_char_col_abs –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è

                    char_ideal_screen_start_x = self._text_start_x + (logical_char_col_abs - self.editor.scroll_left)
                    char_ideal_screen_end_x = char_ideal_screen_start_x + char_printed_width

                    is_char_visible_on_screen = (char_ideal_screen_end_x > self._text_start_x and
                                                 char_ideal_screen_start_x < width)

                    if is_char_visible_on_screen:
                        actual_draw_x = max(self._text_start_x, char_ideal_screen_start_x)

                        if actual_draw_x < width:
                            try:
                                logging.debug(
                                    f"          DrawScreen draw_text: DRAWING Char '{char_to_render.replace(chr(9),'/t/')}' "
                                    f"at screen ({screen_row}, {actual_draw_x}), "
                                    f"ideal_X={char_ideal_screen_start_x}, "
                                    f"final_attr={token_color_attribute}"
                                )
                                self.stdscr.addch(screen_row, actual_draw_x, char_to_render, token_color_attribute)
                            except curses.error as e:
                                logging.warning(
                                    f"          DrawScreen draw_text: CURSES ERROR drawing char '{char_to_render.replace(chr(9),'/t/')}' (ord: {ord(char_to_render)}) "
                                    f"at ({screen_row}, {actual_draw_x}) with attr {token_color_attribute}. Error: {e}"
                                )
                                break 
                        else:
                            logging.debug(
                                f"          DrawScreen draw_text: Char '{char_to_render.replace(chr(9),'/t/')}' not drawn, actual_draw_x={actual_draw_x} >= width={width}."
                            )
                    else:
                        logging.debug(
                            f"          DrawScreen draw_text: Char '{char_to_render.replace(chr(9),'/t/')}' not visible. "
                            f"Ideal screen X range: [{char_ideal_screen_start_x} - {char_ideal_screen_end_x}). "
                            f"Visible text area X range: [{self._text_start_x} - {width-1}]."
                        )
                    
                    logical_char_col_abs += char_printed_width
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –æ–∫–Ω–∞ –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —à–∏—Ä–∏–Ω–µ
                    next_char_ideal_screen_start_x = self._text_start_x + (logical_char_col_abs - self.editor.scroll_left)
                    if next_char_ideal_screen_start_x >= width:
                        logging.debug(
                            f"        DrawScreen draw_text: Next char would start at or beyond window width ({next_char_ideal_screen_start_x} >= {width}). "
                            f"Breaking inner char loop."
                        )
                        break 
                
                # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª (–ø–æ —Å–∏–º–≤–æ–ª–∞–º) –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω (break), —Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏ –≤–Ω–µ—à–Ω–∏–π (–ø–æ —Ç–æ–∫–µ–Ω–∞–º)
                else: # –≠—Ç–æ—Ç 'else' –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ 'for char_index_in_token...'
                    continue 
                logging.debug(f"      DrawScreen draw_text: Broken from char loop, breaking token loop as well.")
                break 
            logging.debug(f"    DrawScreen draw_text: Finished processing tokens for line {text_line_index}. Final logical_char_col_abs = {logical_char_col_abs}")


    def _draw_search_highlights(self):
        """–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π."""
        if not self.editor.highlighted_matches:
            return # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏

        # –¶–≤–µ—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A_REVERSE –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞)
        search_color = self.colors.get("search_highlight", curses.A_REVERSE)
        height, width = self.stdscr.getmaxyx()
        line_num_width = len(str(max(1, len(self.editor.text)))) + 1 # –®–∏—Ä–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ + –ø—Ä–æ–±–µ–ª
        text_area_width = max(1, width - line_num_width)

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å
        for match_row, match_start_idx, match_end_idx in self.editor.highlighted_matches:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
            if match_row < self.editor.scroll_top or match_row >= self.editor.scroll_top + self.editor.visible_lines:
                continue # –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            screen_y = match_row - self.editor.scroll_top # –≠–∫—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            line = self.editor.text[match_row] # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞

            # –ü–æ–∑–∏—Ü–∏—è X –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            match_screen_start_x_before_scroll = self.editor.get_string_width(line[:match_start_idx])
            match_screen_start_x = line_num_width + match_screen_start_x_before_scroll - self.editor.scroll_left

            # –ü–æ–∑–∏—Ü–∏—è X –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª)
            match_screen_end_x_before_scroll = self.editor.get_string_width(line[:match_end_idx])
            match_screen_end_x = line_num_width + match_screen_end_x_before_scroll - self.editor.scroll_left

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∏–º—É—é —á–∞—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            # –ù–∞—á–∞–ª—å–Ω–∞—è X –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (–Ω–µ –º–µ–Ω—å—à–µ, —á–µ–º _text_start_x)
            draw_start_x = max(line_num_width, match_screen_start_x)

            # –ö–æ–Ω–µ—á–Ω–∞—è X –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ (–Ω–µ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –æ–∫–Ω–∞)
            draw_end_x = min(width, match_screen_end_x)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            highlight_width_on_screen = max(0, draw_end_x - draw_start_x)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –µ—Å–ª–∏ –≤–∏–¥–∏–º–∞—è —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ 0
            if highlight_width_on_screen > 0:
                try:
                    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    current_char_screen_x = line_num_width - self.editor.scroll_left # –ù–∞—á–∞–ª—å–Ω–∞—è X –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å—Ç—Ä–æ–∫–∏
                    for char_idx, char in enumerate(line):
                        char_width = self.editor.get_char_width(char)
                        char_screen_end_x = current_char_screen_x + char_width

                        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ –≤–∏–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                        if match_start_idx <= char_idx < match_end_idx and \
                           current_char_screen_x < width and char_screen_end_x > line_num_width: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏

                            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                            draw_char_x = max(line_num_width, current_char_screen_x)
                            draw_char_width = min(char_width, width - draw_char_x)

                            if draw_char_width > 0:
                               try:
                                  # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                                  # chgat(y, x, num_chars, attr). num_chars=1 –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                                  self.stdscr.chgat(screen_y, draw_char_x, 1, search_color) # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ–¥–Ω—É —è—á–µ–π–∫—É
                               except curses.error as e:
                                  # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                                  logging.warning(f"Curses error highlighting single char at ({screen_y}, {draw_char_x}): {e}")
                        current_char_screen_x += char_width # –°–¥–≤–∏–≥–∞–µ–º X –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
                except curses.error as e:
                    logging.error(f"Curses error applying search highlight: {e}")
 


    def _draw_selection(self):
        """–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –∑–∞–¥–∞–Ω—ã –ª–∏ –µ–≥–æ –≥—Ä–∞–Ω–∏—Ü—ã
        if not self.editor.is_selecting or not self.editor.selection_start or not self.editor.selection_end:
            return # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        start_y, start_x = self.editor.selection_start
        end_y, end_x = self.editor.selection_end

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞–ª–æ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ "—Ä–∞–Ω—å—à–µ" –∫–æ–Ω—Ü–∞
        if start_y > end_y or (start_y == end_y and start_x > end_x):
            start_y, start_x, end_y, end_x = end_y, end_x, start_y, start_x

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–∞—Ö —Å—Ç—Ä–æ–∫
        height, width = self.stdscr.getmaxyx()
        line_num_width = len(str(max(1, len(self.editor.text)))) + 1
        text_area_width = max(1, width - line_num_width)

        # –¶–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        selection_color = curses.A_REVERSE # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–¥–µ–ª–µ–Ω–∏—è
        for y in range(start_y, end_y + 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
            if y < self.editor.scroll_top or y >= self.editor.scroll_top + self.editor.visible_lines:
                continue # –°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            screen_y = y - self.editor.scroll_top # –≠–∫—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ.
            sel_start_char_idx = start_x if y == start_y else 0
            sel_end_char_idx = end_x if y == end_y else len(self.editor.text[y])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (start_x < end_x –∏–ª–∏ start_idx < end_idx)
            if sel_start_char_idx >= sel_end_char_idx:
                continue

            line = self.editor.text[y] # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞

            # –≠–∫—Ä–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
            sel_screen_start_x_before_scroll = self.editor.get_string_width(line[:sel_start_char_idx])
            sel_screen_start_x = line_num_width + sel_screen_start_x_before_scroll - self.editor.scroll_left

            # –≠–∫—Ä–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ–Ω—Ü–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
            sel_screen_end_x_before_scroll = self.editor.get_string_width(line[:sel_end_char_idx])
            sel_screen_end_x = line_num_width + sel_screen_end_x_before_scroll - self.editor.scroll_left

            draw_start_x = max(line_num_width, sel_screen_start_x)
            draw_end_x = min(width, sel_screen_end_x)

            highlight_width_on_screen = max(0, draw_end_x - draw_start_x)

            if highlight_width_on_screen > 0:
                try:

                    self.stdscr.chgat(screen_y, draw_start_x, highlight_width_on_screen, selection_color)

                except curses.error as e:
                    logging.error(f"Curses error applying selection highlight at ({screen_y}, {draw_start_x}) with width {highlight_width_on_screen}: {e}")
 

    def _draw_matching_brackets(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç highlight_matching_brackets –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏."""
        self.editor.highlight_matching_brackets()


    def truncate_string(self, s: str, max_width: int) -> str:
        """
        –û–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É s —Ç–∞–∫, —á—Ç–æ–±—ã –µ—ë
        –≤–∏–∑—É–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (wcwidth) –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ max_width.
        """
        result = ""
        curr = 0
        for ch in s:
            w = wcwidth(ch)
            if w < 0:
                w = 1
            if curr + w > max_width:
                break
            result += ch
            curr += w
        return result


    def _draw_status_bar(self) -> None:
        """–†–∏—Å—É–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä, –∏–∑–±–µ–≥–∞—è ERR –æ—Ç addnstr()."""

        logging.debug("Drawing status bar")
        try:
            h, w = self.stdscr.getmaxyx()
            if h <= 0 or w <= 1:
                return

            y = h - 1
            max_col = w - 1

            # ‚îÄ‚îÄ —Ü–≤–µ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            c_norm = self.colors.get("status", curses.color_pair(10) | curses.A_BOLD)
            c_err = self.colors.get("status_error", curses.color_pair(11) | curses.A_BOLD)
            c_git = self.colors.get("git_info", curses.color_pair(12))
            c_dirty = self.colors.get("git_dirty", curses.color_pair(13) | curses.A_BOLD)

            self.stdscr.move(y, 0)
            self.stdscr.clrtoeol()
            self.stdscr.bkgdset(" ", c_norm)

            # ‚îÄ‚îÄ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–ª–æ–∫–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            icon = get_file_icon(self.editor.filename, self.editor.config)
            fname = os.path.basename(self.editor.filename) if self.editor.filename else "No Name"
            lexer_name = self.editor._lexer.name if self.editor._lexer else "plain text"

            left = f" {icon} {fname}{'*' if self.editor.modified else ''} | {lexer_name} | UTF-8 | Ln {self.editor.cursor_y+1}/{len(self.editor.text)}, Col {self.editor.cursor_x+1} | {'INS' if self.editor.insert_mode else 'REP'} "

            g_branch, _, g_commits = self.editor.git_info
            git_txt = f"Git: {g_branch} ({g_commits})" if g_branch else ""
            git_col = c_dirty if "*" in g_branch else c_git

            msg = self.editor.status_message or "Ready"
            msg_col = c_err if msg.startswith("Error") else c_norm

            # ‚îÄ‚îÄ —à–∏—Ä–∏–Ω—ã –±–ª–æ–∫–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            gw_left = self.editor.get_string_width(left)
            gw_msg = self.editor.get_string_width(msg)
            gw_git = self.editor.get_string_width(git_txt)

            # ‚îÄ‚îÄ –ª–µ–≤—ã–π –±–ª–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            x = 0
            self.stdscr.addnstr(y, x, left, min(gw_left, max_col - x), c_norm)
            x += gw_left

            # ‚îÄ‚îÄ git –±–ª–æ–∫ —Å–ø—Ä–∞–≤–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            if git_txt:
                x_git = max_col - gw_git
                self.stdscr.addnstr(y, x_git, git_txt, gw_git, git_col)
                right_limit = x_git
            else:
                right_limit = max_col

            # ‚îÄ‚îÄ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É (–æ–±—Ä–µ–∑–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            space_for_msg = right_limit - x
            if space_for_msg > 0:
                msg = self.truncate_string(msg, space_for_msg)
                gw_msg = self.editor.get_string_width(msg)
                x_msg = x + (space_for_msg - gw_msg) // 2
                self.stdscr.addnstr(y, x_msg, msg, gw_msg, msg_col)

        except Exception as e:
            logging.error(f"Error in _draw_status_bar: {e}", exc_info=True)
            self.editor._set_status_message("Status bar error (see log)")


    def _position_cursor(self) -> None:
        """–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫—É—Ä—Å–æ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –Ω–µ –ø–æ–∑–≤–æ–ª—è—è –µ–º—É ¬´—É–ª–µ—Ç–∞—Ç—å¬ª –∑–∞ Git-—Å—Ç–∞—Ç—É—Å."""
        height, width = self.stdscr.getmaxyx()
        max_row       = height - 2                 # –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ (height-1 ‚Äì —Å—Ç–∞—Ç—É—Å-–±–∞—Ä)
        line_num_width = len(str(max(1, len(self.editor.text)))) + 1  # ¬´NN‚ê†¬ª
        text_area_width = max(1, width - line_num_width)

        # --- 1. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ---------------------------------
        self.editor.cursor_y = max(0, min(self.editor.cursor_y, len(self.editor.text) - 1))
        current_line         = self.editor.text[self.editor.cursor_y]
        self.editor.cursor_x = max(0, min(self.editor.cursor_x, len(current_line)))

        cursor_line_idx = self.editor.cursor_y
        cursor_char_idx = self.editor.cursor_x

        # --- 2. –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ ----------------------------------------------
        screen_y = cursor_line_idx - self.editor.scroll_top
        if screen_y < 0:
            self.editor.scroll_top = cursor_line_idx
            screen_y = 0
        elif screen_y >= self.editor.visible_lines:
            self.editor.scroll_top = min(
                len(self.editor.text) - self.editor.visible_lines,
                cursor_line_idx - self.editor.visible_lines + 1
            )
            self.editor.scroll_top = max(0, self.editor.scroll_top)
            screen_y = self.editor.visible_lines - 1
        screen_y = max(0, min(screen_y, max_row))

        # --- 3. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ --------------------------------------------
        cursor_px_before_scroll = self.editor.get_string_width(current_line[:cursor_char_idx])
        current_cursor_screen_x = line_num_width + cursor_px_before_scroll - self.editor.scroll_left

        view_start_x = line_num_width
        view_end_x   = width - 1                   # –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–æ–ª–±–µ—Ü

        if current_cursor_screen_x < view_start_x:
            self.editor.scroll_left = cursor_px_before_scroll
        elif current_cursor_screen_x > view_end_x:
            self.editor.scroll_left = max(0, cursor_px_before_scroll - text_area_width + 1)

        # --- 4. –ò—Ç–æ–≥–æ–≤—ã–µ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ----------------------------------------
        final_cursor_screen_x = (
            line_num_width
            + cursor_px_before_scroll
            - self.editor.scroll_left
        )
        draw_cursor_x = max(view_start_x, min(view_end_x, final_cursor_screen_x))

        # --- 5. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä ----------------------------------------------------
        try:
            logging.debug(f"Positioning cursor: screen_y={screen_y}, draw_cursor_x={draw_cursor_x}. Logical: ({self.editor.cursor_y}, {self.editor.cursor_x}). Line: '{current_line}'")
            self.stdscr.move(screen_y, draw_cursor_x)
        except curses.error:
            # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äì —Å—Ç–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            try:
                self.stdscr.move(screen_y, view_start_x)
            except curses.error:
                pass

    def _adjust_vertical_scroll(self):
        """
        Adjusts vertical scroll (scroll_top) to ensure the cursor is visible.
        Called after window resize or other events that might push cursor off-screen.
        """
        height, width = self.stdscr.getmaxyx()
        text_area_height = max(1, height - 2)

        # –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, scroll_top –≤—Å–µ–≥–¥–∞ 0
        if len(self.editor.text) <= text_area_height:
             self.editor.scroll_top = 0
             return

        # –¢–µ–∫—É—â–∞—è —ç–∫—Ä–∞–Ω–Ω–∞—è Y –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        screen_y = self.editor.cursor_y - self.editor.scroll_top

        # –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        if screen_y < 0:
             # –°–¥–≤–∏–≥–∞–µ–º scroll_top —Ç–∞–∫, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ —Å –∫—É—Ä—Å–æ—Ä–æ–º —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤–æ–π –≤–∏–¥–∏–º–æ–π
             self.editor.scroll_top = self.editor.cursor_y
             logging.debug(f"Adjusted vertical scroll: cursor above view. New scroll_top: {self.editor.scroll_top}")
        elif screen_y >= text_area_height:
             # –°–¥–≤–∏–≥–∞–µ–º scroll_top —Ç–∞–∫, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ —Å –∫—É—Ä—Å–æ—Ä–æ–º —Å—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∏–¥–∏–º–æ–π
             self.editor.scroll_top = self.editor.cursor_y - text_area_height + 1
             logging.debug(f"Adjusted vertical scroll: cursor below view. New scroll_top: {self.editor.scroll_top}")

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ scroll_top –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã (0 –¥–æ len(text) - visible_lines)
        self.editor.scroll_top = max(0, min(self.editor.scroll_top, len(self.editor.text) - text_area_height))
        logging.debug(f"Final adjusted scroll_top: {self.editor.scroll_top}")


    def _update_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —ç–∫—Ä–∞–Ω."""
        try:
            # noutrefresh() - –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
            self.stdscr.noutrefresh()
            # doupdate() - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —ç–∫—Ä–∞–Ω–µ
            curses.doupdate()
        except curses.error as e:
            logging.error(f"Curses doupdate error: {e}")
            pass # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–∞–¥–µ—è—Å—å, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç


def main(stdscr):
    """
    Initializes locale, stdout encoding, and handles command-line
    arguments before starting the main editor loop.
    """
    try:
        signal.signal(signal.SIGTSTP, signal.SIG_IGN)  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å Ctrl+Z
        signal.signal(signal.SIGINT, signal.SIG_IGN)   # Ctrl+C (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        logging.debug("SIGTSTP and SIGINT ignored")
    except Exception as e:
        logging.warning(f"Couldn't ignore SIGTSTP/SIGINT: {e}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏ –≤–∞–∂–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å UTF-8 –∏ wcwidth
    # os.environ["LANG"] = "en_US.UTF-8" # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏     
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
        locale.setlocale(locale.LC_ALL, "")
        logging.info(f"Locale set to {locale.getlocale()}.")
    except locale.Error as e:
        logging.error(f"Failed to set locale: {e}. Character width calculation may be incorrect.")

    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É stdout –¥–ª—è Python 3
    try:
        editor = SwayEditor(stdscr)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞)
        if len(sys.argv) > 1:
            filename_arg = sys.argv[1]
            logging.info(f"Attempting to open file from command line: {filename_arg}")
            # open_file —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å
            editor.open_file(filename_arg)
        else:
             logging.info("No file specified on command line. Starting with new buffer.")
             # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –±—É—Ñ–µ—Ä–∞.
             # New file state is set in __init__.

        # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        logging.debug("Starting editor run() loop.")
        editor.run() # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª

    except Exception as e:
        logging.exception("Unhandled exception in main function after editor setup.")
        print("\nAn unexpected error occurred.", file=sys.stderr)
        print("See editor.log for details.", file=sys.stderr)
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É —Å—Ç–µ–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–∞–ª–æ –∏–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        error_log_path = os.path.join(os.path.dirname(__file__), "critical_error.log")
        try:
            with open(error_log_path, "a", encoding="utf-8", errors="replace") as error_file:
                error_file.write(f"\n{'='*20} {time.asctime()} {'='*20}\n")
                traceback.print_exc(file=error_file)
                error_file.write(f"{'='*50}\n")
            print(f"Detailed error logged to {error_log_path}", file=sys.stderr)
        except Exception as log_e:
            print(f"Failed to write detailed error log: {log_e}", file=sys.stderr)
            traceback.print_exc(file=sys.stderr) # –ü–µ—á–∞—Ç–∞–µ–º –≤ stderr –∫–∞–∫ fallback

        sys.exit(1) # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç
if __name__ == "__main__":
    import signal
    signal.signal(signal.SIGTSTP, signal.SIG_IGN)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º curses, —Ç.–∫. –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–æ–Ω—Ñ–∏–≥–∞
    try:
        config = load_config()
        logging.info("Configuration loaded successfully.")
    except Exception as e:
        print(f"Failed to load config: {e}", file=sys.stderr)
        config = {
            "editor": {"use_system_clipboard": True, "tab_size": 4, "use_spaces": True},
            "keybindings": {},
            "git": {"enabled": True},
            "settings": {"auto_save_interval": 5, "show_git_info": True},
            "file_icons": {"text": "üìù"},
            "supported_formats": {}
        }
        logging.error("Using fallback minimal config.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º curses –æ–±—ë—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–æ–≤–µ—Ç main
    try:
        curses.wrapper(main)
    except Exception as e:
        logging.critical("Unhandled exception caught outside curses.wrapper.", exc_info=True)
        print("\nAn unhandled critical error occurred.", file=sys.stderr)
        print("See editor.log for details.", file=sys.stderr)
        error_log_path = os.path.join(os.path.dirname(__file__), "critical_error.log")
        try:
            with open(error_log_path, "a", encoding="utf-8", errors="replace") as error_file:
                error_file.write(f"\n{'='*20} {time.asctime()} {'='*20}\n")
                error_file.write("Error caught outside curses.wrapper:\n")
                traceback.print_exc(file=error_file)
                error_file.write(f"{'='*50}\n")
            print(f"Detailed error logged to {error_log_path}", file=sys.stderr)
        except Exception as log_e:
            print(f"Failed to write detailed error log: {log_e}", file=sys.stderr)
            traceback.print_exc(file=sys.stderr)

        sys.exit(1)
