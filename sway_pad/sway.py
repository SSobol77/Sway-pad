#!/usr/bin/env python3
# Sway-Pad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
import curses
import locale
import toml
import os
import re
import queue 
import shlex    
import sys
import time
import pyperclip
import logging
import chardet
import unicodedata
import codecs
import traceback
import subprocess
import tempfile
import threading

from pygments import lex
from pygments.lexers import get_lexer_by_name, guess_lexer, TextLexer
from pygments.token import Token


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def _set_default_encoding():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Python 3.8 –∏ –≤—ã—à–µ."""
    os.environ.setdefault("PYTHONIOENCODING", "utf-8")
    os.environ.setdefault("PYTHONLEGACYWINDOWSSTDIO", "1")

_set_default_encoding()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é Flake8
def run_flake8_on_code(code_string, filename="<buffer>"):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Flake8 –Ω–∞ code_string —á–µ—Ä–µ–∑ subprocess, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
    """
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    if len(code_string) > 100_000:
        return ["File is too large for flake8 analysis"]

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å .py
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as tmp:
        tmp_name = tmp.name
        tmp.write(code_string)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º flake8 –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.
        # --max-line-length=88 –∑–¥–µ—Å—å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä;
        # –¥–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º –æ–ø—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ .flake8
        cmd = ["flake8", "--max-line-length=88", tmp_name]

        process = subprocess.run(
            cmd,
            capture_output=True,  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout/err, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å curses
            text=True
        )
        
        # –ü–∞—Ä—Å–∏–º stdout
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–µ–∑ –æ—à–∏–±–æ–∫, flake8 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        # (–∏–ª–∏ –¥–∞–∂–µ –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ 0 –∏–ª–∏ 1, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç warning)
        output = process.stdout.strip()
        if not output:
            return ["Flake8: No issues found."]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        return output.split("\n")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(tmp_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
def deep_merge(base: dict, override: dict) -> dict:
    """
    Recursively merges 'override' dict into 'base' dict, returning a new dict.
    """
    result = dict(base)
    for k, v in override.items():
        if (
            k in result
            and isinstance(result[k], dict)
            and isinstance(v, dict)
        ):
            result[k] = deep_merge(result[k], v)
        else:
            result[k] = v
    return result

# --- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ---------------------------------------
def safe_run(cmd: list[str]) -> subprocess.CompletedProcess:
    """
    –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ subprocess.run –±–µ–∑ shell=True, —Å –∑–∞—Ö–≤–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞.
    –ù–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–Ω—É–ª–µ–≤–æ–º –∫–æ–¥–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ (check=False).
    """
    return subprocess.run(cmd, capture_output=True, text=True, check=False)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ñ–∞–π–ª–∞
def get_file_icon(filename: str, config: dict) -> str:
    """
    Returns the icon for a file based on its extension.
    """
    file_lower = filename.lower()
    if "file_icons" not in config or "supported_formats" not in config:
        return "üìù"  # Fallback –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    for key, icon in config["file_icons"].items():
        extensions = config["supported_formats"].get(key, [])
        if file_lower.endswith(tuple(ext.lower() for ext in extensions)):
            return icon

    return config["file_icons"].get("text", "üìù")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Git (–≤–µ—Ç–∫–∞, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤)
def get_git_info(file_path: str) -> tuple[str, str, str]:
    repo_dir = os.path.dirname(os.path.abspath(file_path)) if file_path else os.getcwd()
    if not os.path.isdir(os.path.join(repo_dir, ".git")):
        logging.debug(f"No .git directory found in {repo_dir}")
        return "", "", "0"

    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É
    try:
        branch = subprocess.run(
            ["git", "branch", "--show-current"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
    except FileNotFoundError:
        logging.warning("Git executable not found")
        return "", "", "0"
    except subprocess.CalledProcessError:
        # fallback: git symbolic-ref
        try:
            branch = subprocess.run(
                ["git", "symbolic-ref", "--short", "HEAD"],
                capture_output=True, text=True, check=True, cwd=repo_dir
            ).stdout.strip()
        except (subprocess.CalledProcessError, FileNotFoundError):
            branch = "main"

    # 2. –ì—Ä—è–∑–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ?
    try:
        dirty = subprocess.run(
            ["git", "status", "--short"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
        if dirty:
            branch += "*"
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        logging.warning(f"Git status failed: {e}")

    # 3. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_name = subprocess.run(
            ["git", "config", "user.name"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        user_name = ""

    # 4. –ö–æ–ª-–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
    try:
        commits = subprocess.run(
            ["git", "rev-list", "--count", "HEAD"],
            capture_output=True, text=True, check=True, cwd=repo_dir
        ).stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        commits = "0"

    return branch, user_name, commits


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config() -> dict:
    """
    Loads configuration from 'config.toml', falling back to minimal defaults if not found or invalid.
    """
    minimal_default = {
        "colors": {
            "error": "red",
            "status": "bright_white",
            "green": "green"  # –î–ª—è Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        },
        "fonts": {"font_family": "monospace", "font_size": 12},
        "keybindings": {
            "delete": "del",
            "paste": "ctrl+v",
            "copy": "ctrl+c",
            "cut": "ctrl+x",
            "undo": "ctrl+z",
            "open_file": "ctrl+o",
            "save_file": "ctrl+s",
            "select_all": "ctrl+a",
            "quit": "ctrl+q",
            "redo": "ctrl+shift+z",
        },
        "editor": {
            "use_system_clipboard": True,
            "default_new_filename": "new_file.py"          
        },
        "file_icons": {
            "python": "üêç",
            "javascript": "üìú",
            "text": "üìù",
            "html": "üåê",
            "css": "üé®"
        },
        "supported_formats": {
            "python": ["py", "pyw"],
            "javascript": ["js", "mjs", "cjs", "jsx"],
            "text": ["txt"],
            "html": ["html", "htm"],
            "css": ["css"]
        }
    }

    try:
        with open("config.toml", "r", encoding="utf-8") as f:
            file_content = f.read()
            user_config = toml.loads(file_content)
            final_config = deep_merge(minimal_default, user_config)
            return final_config
    except FileNotFoundError:
        logging.warning("Config file 'config.toml' not found. Using minimal defaults.")
        return minimal_default
    except toml.TomlDecodeError as e:
        logging.error(f"TOML parse error: {str(e)}")
        logging.error("Falling back to minimal defaults.")
        return minimal_default

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:
logging.basicConfig(
    filename="editor.log",
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)",
    force=True,
)

logger = logging.getLogger(__name__)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
KEY_LOGGER = logging.getLogger("sway2.keyevents")
KEY_LOGGER.propagate = False
KEY_LOGGER.setLevel(logging.DEBUG)
KEY_LOGGER.addHandler(logging.NullHandler())

if os.environ.get("SWAY2_KEYTRACE", "").lower() in {"1", "true", "yes"}:
    from logging.handlers import RotatingFileHandler
    handler = RotatingFileHandler("keytrace.log", maxBytes=1_000_000, backupCount=3)
    handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
    KEY_LOGGER.addHandler(handler)
    KEY_LOGGER.propagate = True
else:
    KEY_LOGGER.disabled = True


class SwayEditor:
    """Main class for the Sway editor."""
    def __init__(self, stdscr):
        # ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è curses ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.stdscr = stdscr
        self.stdscr.keypad(True)
        curses.raw(); curses.nonl(); curses.noecho()

        # ‚îÄ‚îÄ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ù–£–ñ–ù–´ –î–ê–õ–¨–®–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.insert_mode = True
        self.status_message = ""
        self._msg_q = queue.Queue() 
        self.action_history, self.undone_actions = [], []

        # ‚îÄ‚îÄ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.search_term        = ""   # —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.search_matches     = []   # [(row,col_start,col_end), ‚Ä¶]
        self.current_match_idx  = -1   # –∏–Ω–¥–µ–∫—Å –≤ search_matches

        # ‚îÄ‚îÄ –ø—Ä–æ—á–∏–µ –ø–æ–ª—è/–∑–∞–≥–ª—É—à–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.config   = load_config()
        self.filename = ""  
        self.text     = [""]
        self.cursor_x = self.cursor_y = 0
        self.scroll_top = self.scroll_left = 0
        self.modified = False
        self.encoding = "UTF-8"
        self.selection_start = self.selection_end = None
        self.is_selecting = False
        self.git_info = None
        self._lexer, self._token_cache = None, {}
        self.visible_lines, self.last_window_size = 0, (0, 0)

        # ‚îÄ‚îÄ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.stdscr.nodelay(False)
        locale.setlocale(locale.LC_ALL, "")
        curses.start_color(); curses.use_default_colors(); curses.curs_set(1)

        # ‚îÄ‚îÄ clipboard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.use_system_clipboard = self.config.get("editor", {}).get("use_system_clipboard", True)
        self.pyclip_available = self._check_pyclip_availability()

        # ‚îÄ‚îÄ keybindings (–≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.keybindings = {
            # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            "delete":      self.parse_key(self.config["keybindings"].get("delete", "del")),
            "paste":       self.parse_key(self.config["keybindings"].get("paste",  "ctrl+v")),
            "copy":        self.parse_key(self.config["keybindings"].get("copy",   "ctrl+c")),
            "cut":         self.parse_key(self.config["keybindings"].get("cut",    "ctrl+x")),
            "undo":        self.parse_key(self.config["keybindings"].get("undo",   "ctrl+z")),
            "new_file":    self.parse_key(self.config["keybindings"].get("new_file", "f4")),
            "open_file":   self.parse_key(self.config["keybindings"].get("open_file", "ctrl+o")),
            "save_file":   self.parse_key(self.config["keybindings"].get("save_file", "ctrl+s")),
            "save_as": self.parse_key(self.config["keybindings"].get("save_as", "f5")),
            "select_all":  self.parse_key(self.config["keybindings"].get("select_all","ctrl+a")),
            "quit":        self.parse_key(self.config["keybindings"].get("quit",   "ctrl+q")),
            "redo":        self.parse_key(self.config["keybindings"].get("redo",   "ctrl+shift+z")),
            # –∫—É—Ä—Å–æ—Ä / –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            "extend_selection_right": curses.KEY_SRIGHT,
            "extend_selection_left":  curses.KEY_SLEFT,
            "select_to_home":         curses.KEY_SHOME,
            "select_to_end":          curses.KEY_SEND,
            "extend_selection_up":    curses.KEY_SR,
            "extend_selection_down":  curses.KEY_SF,
            # Git-–º–µ–Ω—é
            "git_menu": self.parse_key(self.config["keybindings"].get("git_menu", "f2")),
            # ‚òÖ Esc-–æ—Ç–º–µ–Ω–∞
            "cancel_operation": self.parse_key(self.config["keybindings"].get("cancel_operation", "esc")),
            # –ü–æ–∏—Å–∫
            "find":       self.parse_key(self.config["keybindings"].get("find", "ctrl+f")),
            "find_next":  self.parse_key(self.config["keybindings"].get("find_next", "f3")),
            "help": self.parse_key(self.config["keybindings"].get("help", "f1")),
        }

        # ‚îÄ‚îÄ action_map ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.action_map = {
            "copy": self.copy, "paste": self.paste, "cut": self.cut,
            "undo": self.undo, "redo": self.redo, "select_all": self.select_all,
            "extend_selection_right": self.extend_selection_right,
            "extend_selection_left":  self.extend_selection_left,
            "select_to_home": self.select_to_home, "select_to_end": self.select_to_end,
            "extend_selection_up": self.extend_selection_up,
            "extend_selection_down": self.extend_selection_down,
            "new_file": self.new_file,
            "open_file": lambda: print("Open file"),
            "save_file": lambda: print("Save file"),
            "save_as": self.save_file_as,
            "delete": lambda: print("Delete"),
            "quit":   lambda: print("Quit"),
            "git_menu": self.integrate_git,
            # ‚òÖ Esc-–æ—Ç–º–µ–Ω–∞
            "cancel_operation": self.cancel_operation,
            "help": self.show_help,
        }

        # ‚îÄ‚îÄ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.init_colors()
        self.load_syntax_highlighting()
        self.set_initial_cursor_position()
        self.update_git_info()


    def _check_pyclip_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pyperclip –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
        try:
            pyperclip.copy("")
            pyperclip.paste()
            return True
        except pyperclip.PyperclipException as e:
            logging.warning(f"System clipboard unavailable: {str(e)}")
            return False

    def update_git_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞."""
        self.git_info = get_git_info(self.filename)

    def get_selected_text(self):
        if not self.is_selecting or self.selection_start is None or self.selection_end is None:
            return ""
        start_row, start_col = self.selection_start
        end_row, end_col = self.selection_end
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –Ω–∞—á–∞–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω—Ü–∞
        if start_row > end_row or (start_row == end_row and start_col > end_col):
            start_row, start_col, end_row, end_col = end_row, end_col, start_row, start_col
        
        selected_lines = []
        if start_row == end_row:
            line = self.text[start_row]
            selected_lines.append(line[start_col:end_col])
        else:
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            selected_lines.append(self.text[start_row][start_col:])
            # –°—Ä–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            for row in range(start_row + 1, end_row):
                selected_lines.append(self.text[row])
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
            selected_lines.append(self.text[end_row][:end_col])
        
        return "\n".join(selected_lines)


    def delete_selected_text(self):
        if not self.is_selecting or self.selection_start is None or self.selection_end is None:
            return
        start_row, start_col = self.selection_start
        end_row, end_col = self.selection_end
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        if start_row > end_row or (start_row == end_row and start_col > end_col):
            start_row, start_col, end_row, end_col = end_row, end_col, start_row, start_col
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è undo
        deleted_text = self.get_selected_text()
        self.action_history.append({
            "type": "delete",
            "text": deleted_text,
            "start": start_row,
            "start_col": start_col,
            "end": end_row,
            "end_col": end_col
        })
        
        if start_row == end_row:
            self.text[start_row] = self.text[start_row][:start_col] + self.text[start_row][end_col:]
            self.cursor_x = start_col
        else:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫–∏
            self.text[start_row] = self.text[start_row][:start_col] + self.text[end_row][end_col:]
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            del self.text[start_row + 1:end_row + 1]
            self.cursor_y = start_row
            self.cursor_x = start_col
        
        self.selection_start = None
        self.selection_end = None
        self.is_selecting = False
        self.modified = True
        self.undone_actions.clear()


    def copy(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        selected_text = self.get_selected_text()
        if not selected_text:
            self.status_message = "Nothing to copy"
            return
        self.internal_clipboard = selected_text
        if self.use_system_clipboard and self.pyclip_available:
            try:
                pyperclip.copy(selected_text)
                self.status_message = "Copied to system clipboard"
            except pyperclip.PyperclipException as e:
                logging.error(f"Failed to copy to system clipboard: {str(e)}")
                self.status_message = "Copied to internal clipboard (system clipboard error)"
        else:
            self.status_message = "Copied to internal clipboard"


    def cut(self):
        """–í—ã—Ä–µ–∑–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        selected_text = self.get_selected_text()
        if not selected_text:
            self.status_message = "Nothing to cut"
            return
        self.internal_clipboard = selected_text
        if self.use_system_clipboard and self.pyclip_available:
            try:
                pyperclip.copy(selected_text)
                self.status_message = "Cut to system clipboard"
            except pyperclip.PyperclipException as e:
                logging.error(f"Failed to cut to system clipboard: {str(e)}")
                self.status_message = "Cut to internal clipboard (system clipboard error)"
        self.delete_selected_text()


    def paste(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
        if self.use_system_clipboard and self.pyclip_available:
            try:
                text = pyperclip.paste()
                if not text:
                    text = self.internal_clipboard
                    self.status_message = "Pasted from internal clipboard (system clipboard empty)"
                else:
                    self.status_message = "Pasted from system clipboard"
            except pyperclip.PyperclipException as e:
                logging.error(f"Failed to paste from system clipboard: {str(e)}")
                text = self.internal_clipboard
                self.status_message = "Pasted from internal clipboard (system clipboard error)"
        else:
            text = self.internal_clipboard
            self.status_message = "Pasted from internal clipboard"

        if not text:
            self.status_message = "Clipboard is empty"
            return

        if self.is_selecting:
            self.delete_selected_text()
        self.insert_text(text)


    def extend_selection_right(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_x < len(self.text[self.cursor_y]):
            self.cursor_x += 1
        self.selection_end = (self.cursor_y, self.cursor_x)

    def extend_selection_left(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_x > 0:
            self.cursor_x -= 1
        self.selection_end = (self.cursor_y, self.cursor_x)


    def select_to_home(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        self.cursor_x = 0
        self.selection_end = (self.cursor_y, self.cursor_x)

    def select_to_end(self):
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        self.cursor_x = len(self.text[self.cursor_y])
        self.selection_end = (self.cursor_y, self.cursor_x)

    def select_all(self):
        self.selection_start = (0, 0)
        self.selection_end = (len(self.text) - 1, len(self.text[-1]))
        self.is_selecting = True


    def undo(self):
        if not self.action_history:
            self.status_message = "Nothing to undo"
            return
        last_action = self.action_history.pop()
        
        if last_action["type"] == "insert":
            text = last_action["text"]
            row, col = last_action["position"]
            lines = text.split('\n')
            end_row = row + len(lines) - 1
            end_col = col + len(lines[-1]) if len(lines) == 1 else len(lines[-1])
            self.delete_text(row, col, end_row, end_col)
            self.cursor_y = row
            self.cursor_x = col
        elif last_action["type"] == "delete":
            text = last_action["text"]
            start_row = last_action["start"]
            start_col = last_action["start_col"]
            self.insert_text_at_position(text, start_row, start_col)
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            lines = text.split('\n')
            self.cursor_y = start_row + len(lines) - 1
            self.cursor_x = start_col + len(lines[-1]) if len(lines) == 1 else len(lines[-1])
        
        self.undone_actions.append(last_action)
        self.modified = True
        self.is_selecting = False
        self.selection_start = None
        self.selection_end = None
        self.status_message = "Undo performed"


    def extend_selection_up(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        self.selection_end = (self.cursor_y, self.cursor_x)

    def extend_selection_down(self):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."""
        if not self.is_selecting:
            self.selection_start = (self.cursor_y, self.cursor_x)
            self.is_selecting = True
        if self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        self.selection_end = (self.cursor_y, self.cursor_x)

    
    def redo(self):
        if not self.undone_actions:
            self.status_message = "Nothing to redo"
            return
        last_undone = self.undone_actions.pop()
        
        if last_undone["type"] == "insert":
            text = last_undone["text"]
            row, col = last_undone["position"]
            self.insert_text_at_position(text, row, col)
        elif last_undone["type"] == "delete":
            start_row = last_undone["start"]
            start_col = last_undone["start_col"]
            end_row = last_undone["end"]
            end_col = last_undone["end_col"]
            self.delete_text(start_row, start_col, end_row, end_col)
        
        self.action_history.append(last_undone)
        self.modified = True
        self.status_message = "Redo performed"
    

    def insert_text_at_position(self, text, row, col):
        lines = text.split('\n')
        if row < len(self.text):
            self.text[row] = self.text[row][:col] + lines[0] + self.text[row][col:]
        else:
            while len(self.text) <= row:
                self.text.append("")
            self.text[row] = lines[0]
        for i in range(1, len(lines)):
            new_row = row + i
            if new_row < len(self.text):
                self.text[new_row] = lines[i]
            else:
                self.text.append(lines[i])
        if lines:
            last_row = row + len(lines) - 1
            if len(lines) == 1:
                self.cursor_y = row
                self.cursor_x = col + len(lines[0])
            else:
                self.cursor_y = last_row
                self.cursor_x = len(lines[-1])
        else:
            self.cursor_y = row
            self.cursor_x = col


    def delete_text(self, start_row, start_col, end_row, end_col):
        if start_row == end_row:
            line = self.text[start_row]
            self.text[start_row] = line[:start_col] + line[end_col:]
        else:
            self.text[start_row] = self.text[start_row][:start_col] + self.text[end_row][end_col:]
            del self.text[start_row + 1:end_row + 1]
        self.modified = True


    def insert_text(self, text):
        if self.is_selecting:
            self.delete_selected_text()
        lines = text.split('\n')
        current_line = self.text[self.cursor_y]
        start_x = self.cursor_x  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        start_y = self.cursor_y
        self.text[self.cursor_y] = current_line[:self.cursor_x] + lines[0] + current_line[self.cursor_x:]
        self.cursor_x += len(lines[0])
        for i in range(1, len(lines)):
            self.cursor_y += 1
            self.text.insert(self.cursor_y, lines[i])
            self.cursor_x = len(lines[i])
        self.modified = True
        self.action_history.append({
            "type": "insert",
            "text": text,
            "position": (start_y, start_x)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        })
        self.status_message = "Text inserted"    


    def apply_syntax_highlighting_with_pygments(self, line):
        """
        Uses Pygments for automatic language detection and tokenization.
        The resulting tokens are mapped to curses color pairs for syntax highlighting.
        """
        if self._lexer is None:
            try:
                if self.filename and self.filename != "noname":
                    self._lexer = get_lexer_by_name(self.detect_language())
                else:
                    self._lexer = guess_lexer(line)
            except Exception:
                self._lexer = TextLexer()

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        line_hash = hash(line)
        cache_key = (line_hash, id(self._lexer))
        if cache_key in self._token_cache:
            return self._token_cache[cache_key]

        tokens = list(lex(line, self._lexer))

        token_color_map = {
            Token.Keyword: curses.color_pair(2),
            Token.Keyword.Constant: curses.color_pair(2),
            Token.Keyword.Declaration: curses.color_pair(2),
            Token.Keyword.Namespace: curses.color_pair(2),
            Token.Keyword.Pseudo: curses.color_pair(2),
            Token.Keyword.Reserved: curses.color_pair(2),
            Token.Keyword.Type: curses.color_pair(2),
            Token.Name.Builtin: curses.color_pair(2),
            Token.Name.Function: curses.color_pair(3),
            Token.Name.Class: curses.color_pair(3),
            Token.Name.Decorator: curses.color_pair(5),
            Token.Name.Exception: curses.color_pair(4),
            Token.Name.Variable: curses.color_pair(7),
            Token.Name.Namespace: curses.color_pair(2),
            Token.Name.Attribute: curses.color_pair(7),
            Token.Name.Tag: curses.color_pair(5),
            Token.Literal.String: curses.color_pair(3),
            Token.Literal.String.Doc: curses.color_pair(3),
            Token.Literal.String.Interpol: curses.color_pair(3),
            Token.Literal.String.Escape: curses.color_pair(3),
            Token.Literal.String.Backtick: curses.color_pair(3),
            Token.Literal.String.Delimiter: curses.color_pair(3),
            Token.Literal.Number: curses.color_pair(4),
            Token.Literal.Number.Float: curses.color_pair(4),
            Token.Literal.Number.Hex: curses.color_pair(4),
            Token.Literal.Number.Integer: curses.color_pair(4),
            Token.Literal.Number.Oct: curses.color_pair(4),
            Token.Comment: curses.color_pair(1),
            Token.Comment.Multiline: curses.color_pair(1),
            Token.Comment.Preproc: curses.color_pair(1),
            Token.Comment.Special: curses.color_pair(1),
            Token.Operator: curses.color_pair(6),
            Token.Operator.Word: curses.color_pair(6),
            Token.Punctuation: curses.color_pair(6),
            Token.Text: curses.color_pair(0),
            Token.Text.Whitespace: curses.color_pair(0),
            Token.Error: curses.color_pair(8),
            Token.Generic.Heading: curses.color_pair(5) | curses.A_BOLD,
            Token.Generic.Subheading: curses.color_pair(5),
            Token.Generic.Deleted: curses.color_pair(8),
            Token.Generic.Inserted: curses.color_pair(4),
            Token.Generic.Emph: curses.color_pair(3) | curses.A_BOLD,
            Token.Generic.Strong: curses.color_pair(2) | curses.A_BOLD,
            Token.Generic.Prompt: curses.color_pair(7),
        }
        default_color = curses.color_pair(0)
        highlighted = []

        for token, text_val in tokens:
            color = default_color
            for token_type, curses_color in token_color_map.items():
                if token in token_type:
                    color = curses_color
                    break
            highlighted.append((text_val, color))

        self._token_cache[cache_key] = highlighted
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 —Å—Ç—Ä–æ–∫)
        if len(self._token_cache) > 1000:
            self._token_cache.pop(next(iter(self._token_cache)))
        
        return highlighted


    def run_lint_async(self, code):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç Flake8 –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        –≤ –æ—á–µ—Ä–µ–¥—å self._msg_q, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ curses –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
        """
        lint_results = run_flake8_on_code(code, self.filename)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        if (not lint_results or
            (len(lint_results) == 1 and
            lint_results[0].startswith("Flake8: No issues"))):
            message = f"No issues found in {self.filename}"
        else:
            # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á—ë—Ç–∞
            message = " | ".join(lint_results[:2])

        # –ö–ª–∞–¥—ë–º –µ–≥–æ –≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–µ—Ä–µ–¥—å;
        # –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏ –ø–æ–∫–∞–∂–µ—Ç.
        self._msg_q.put(message)




    def set_initial_cursor_position(self):
        """Sets the initial cursor position and scrolling offsets."""
        self.cursor_x = 0
        self.cursor_y = 0
        self.scroll_top = 0
        self.scroll_left = 0


    def init_colors(self):
        """Initializes curses color pairs for syntax highlighting."""
        bg_color = -1
        curses.init_pair(1, curses.COLOR_BLUE, bg_color)
        curses.init_pair(2, curses.COLOR_GREEN, bg_color)
        curses.init_pair(3, curses.COLOR_MAGENTA, bg_color)
        curses.init_pair(4, curses.COLOR_YELLOW, bg_color)
        curses.init_pair(5, curses.COLOR_CYAN, bg_color)
        curses.init_pair(6, curses.COLOR_WHITE, bg_color)
        curses.init_pair(7, curses.COLOR_YELLOW, bg_color)
        curses.init_pair(8, curses.COLOR_BLACK, curses.COLOR_YELLOW)
        self.colors = {
            "error": curses.color_pair(8),
            "line_number": curses.color_pair(7),
            "status": curses.color_pair(6),
            "comment": curses.color_pair(1),
            "keyword": curses.color_pair(2),
            "string": curses.color_pair(3),
            "variable": curses.color_pair(6),
            "punctuation": curses.color_pair(6),
            "literal": curses.color_pair(4),
            "decorator": curses.color_pair(5),
            "type": curses.color_pair(4),
            "selector": curses.color_pair(2),
            "property": curses.color_pair(5),
            "tag": curses.color_pair(2),
            "attribute": curses.color_pair(3),
            "builtins": curses.color_pair(4), 
            "escape": curses.color_pair(5),     
            "magic": curses.color_pair(3),      
            "exception": curses.color_pair(8),   
            "function": curses.color_pair(2),    
            "class": curses.color_pair(4),       
            "number": curses.color_pair(3),      
            "operator": curses.color_pair(6),    
            "green": curses.color_pair(2), 
        }

    def apply_syntax_highlighting(self, line, lang):
        """
        Applies syntax highlighting using Pygments. Language is auto-detected by filename or content.
        """
        return self.apply_syntax_highlighting_with_pygments(line)

    def load_syntax_highlighting(self):
        """Loads and compiles syntax highlighting rules from the configuration."""
        self.syntax_highlighting = {}
        try:
            syntax_cfg = self.config.get("syntax_highlighting", {})
            for lang, rules in syntax_cfg.items():
                patterns = rules.get("patterns", [])
                for rule in patterns:
                    try:
                        compiled = re.compile(rule["pattern"])
                        color_pair = self.colors.get(
                            rule["color"], curses.color_pair(0)
                        )
                        self.syntax_highlighting.setdefault(lang, []).append(
                            (compiled, color_pair)
                        )
                    except Exception as e:
                        logging.exception(
                            f"Error in syntax highlighting rule for {lang}: {rule}"
                        )
        except Exception as e:
            logging.exception("Error loading syntax highlighting")

                
    def draw_screen(self):
        """Renders the editor screen, including text lines, line numbers, status bar, and cursor."""
        self.stdscr.erase()  # –≤–º–µ—Å—Ç–æ clear()
        height, width = self.stdscr.getmaxyx()

        # –û–±–Ω–æ–≤–ª—è–µ–º visible_lines –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if self.last_window_size != (height, width):
            self.visible_lines = height - 2
            self.last_window_size = (height, width)

        if height < 24 or width < 80:
            try:
                self.stdscr.addstr(
                    0, 0, "Window too small (min: 80x24)", self.colors["error"]
                )
                self.stdscr.noutrefresh()  # –≤–º–µ—Å—Ç–æ refresh()
                curses.doupdate()
                return
            except curses.error:
                pass
                return

        max_line_num = len(str(len(self.text)))
        line_num_format = f"{{:>{max_line_num}}} "
        line_num_width = len(line_num_format.format(0))
        text_width = width - line_num_width

        if self.cursor_x < self.scroll_left:
            self.scroll_left = max(0, self.cursor_x)
        elif self.cursor_x >= self.scroll_left + text_width:
            self.scroll_left = max(0, self.cursor_x - text_width + 1)

        if self.cursor_y < self.scroll_top:
            self.scroll_top = self.cursor_y
        elif self.cursor_y >= self.scroll_top + self.visible_lines:
            self.scroll_top = self.cursor_y - self.visible_lines + 1

        for screen_row in range(self.visible_lines):
            line_num = self.scroll_top + screen_row + 1
            if line_num > len(self.text):
                break
            try:
                self.stdscr.addstr(
                    screen_row,
                    0,
                    line_num_format.format(line_num),
                    self.colors["line_number"],
                )
            except curses.error:
                pass

            line = self.text[line_num - 1] if line_num <= len(self.text) else ""
            syntax_line = self.apply_syntax_highlighting(line, self.detect_language())
            x_pos = 0
            for text_part, color in syntax_line:
                text_len = len(text_part.encode("utf-8"))
                if x_pos + text_len <= self.scroll_left:
                    x_pos += text_len
                    continue
                visible_start = max(0, self.scroll_left - x_pos)
                visible_part = text_part[visible_start:]
                visible_width = len(visible_part.encode("utf-8"))
                visible_part = visible_part[: text_width - (x_pos - self.scroll_left)]
                screen_x = line_num_width + (x_pos - self.scroll_left)
                try:
                    self.stdscr.addstr(screen_row, screen_x, visible_part, color)
                except curses.error:
                    pass
                x_pos += visible_width

        try:
            status_y = height - 1
            file_type = self.detect_language()
            file_icon = get_file_icon(self.filename, self.config)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            git_branch, git_user, git_commits = self.git_info

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            left_status = (
                f"File: {self.filename} | "
                f"Type: {file_icon} {file_type} | "
                f"Encoding: {self.encoding} | "
                f"Line: {self.cursor_y + 1}/{len(self.text)} | "
                f"Column: {self.cursor_x + 1} | "
                f"Mode: {'Insert' if self.insert_mode else 'Replace'}"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            if git_branch or git_user:
                right_status = f"Git :: branch: {git_branch} | {git_user} | commits: {git_commits}"
            else:
                right_status = "Git :: none"

            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞
            self.stdscr.addstr(status_y, 0, " " * (width - 1), self.colors["status"])

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å
            max_left_length = width - len(right_status) - 2
            self.stdscr.addstr(status_y, 0, left_status[:max_left_length], self.colors["status"])

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å (Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) –≤ –∑–µ–ª—ë–Ω–æ–º —Ü–≤–µ—Ç–µ
            if right_status:
                self.stdscr.addstr(
                    status_y,
                    width - len(right_status) - 1,
                    right_status,
                    self.colors.get("green", self.colors["status"])
                )
        except curses.error:
            pass

        cursor_screen_y = self.cursor_y - self.scroll_top
        cursor_screen_x = self.cursor_x - self.scroll_left + line_num_width
        if 0 <= cursor_screen_y < self.visible_lines and 0 <= cursor_screen_x < width:
            try:
                self.stdscr.move(cursor_screen_y, cursor_screen_x)
            except curses.error:
                pass

        # –±–ª–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if self.is_selecting and self.selection_start and self.selection_end:
            start_y, start_x = self.selection_start
            end_y, end_x = self.selection_end
            
            if start_y > end_y or (start_y == end_y and start_x > end_x):
                start_y, start_x, end_y, end_x = end_y, end_x, start_y, start_x
            
            for y in range(start_y, end_y + 1):
                if y < self.scroll_top or y >= self.scroll_top + self.visible_lines:
                    continue
                screen_y = y - self.scroll_top
                line = self.text[y]
                line_len = len(line)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                if y == start_y and y == end_y:
                    sel_start = max(start_x, self.scroll_left)
                    sel_end = min(end_x, self.scroll_left + text_width)
                elif y == start_y:
                    sel_start = max(start_x, self.scroll_left)
                    sel_end = min(line_len, self.scroll_left + text_width)
                elif y == end_y:
                    sel_start = self.scroll_left
                    sel_end = min(end_x, self.scroll_left + text_width)
                else:
                    sel_start = self.scroll_left
                    sel_end = min(line_len, self.scroll_left + text_width)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º chgat
                if sel_start < sel_end:
                    try:
                        self.stdscr.chgat(
                            screen_y,
                            line_num_width + (sel_start - self.scroll_left),
                            sel_end - sel_start,
                            curses.A_REVERSE
                        )
                    except curses.error:
                        pass
                elif line_len == 0 and y >= start_y and y <= end_y:
                    # –î–ª—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤—ã–¥–µ–ª—è–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
                    try:
                        self.stdscr.chgat(screen_y, line_num_width, 1, curses.A_REVERSE)
                    except curses.error:
                        pass

        self.highlight_matching_brackets()
        self.stdscr.noutrefresh()  # –≤–º–µ—Å—Ç–æ refresh()
        curses.doupdate()  # –µ–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤ –≤ –∫–æ–Ω—Ü–µ

    def detect_language(self):
        """Detects the file's language based on its extension."""
        ext = os.path.splitext(self.filename)[1].lstrip('.').lower()
        logging.debug(f"Detecting language for extension: {ext}")
        for lang, exts in self.config.get("supported_formats", {}).items():
            if ext in exts:
                logging.debug(f"Detected language: {lang}")
                return lang
        logging.debug("No language detected, defaulting to 'text'")
        return "text"


    def handle_input(self, key):
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            logging.debug(f"Key pressed: {key}")

            # === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à ===
            if key == curses.KEY_ENTER or key == 10 or key == 13:      # Enter
                self.handle_enter()
            elif key == curses.KEY_UP or key == 259 or key == 450:     # Up Arrow
                self.handle_up()
            elif key == curses.KEY_DOWN or key == 258 or key == 456:   # Down Arrow
                self.handle_down()
            elif key == curses.KEY_LEFT or key == 260 or key == 452:   # Left Arrow
                self.handle_left()
            elif key == curses.KEY_RIGHT or key == 261 or key == 454:   # Right Arrow
                self.handle_right()
            elif key == curses.KEY_BACKSPACE or key == 127 or key == 8:   # Backspace
                self.handle_backspace()
            elif key == curses.KEY_DC or key == 330 or key == 462:    # Delete
                self.handle_delete()
            elif key == curses.KEY_HOME or key == 262 or key == 449:   # Home
                self.handle_home()
            elif key == curses.KEY_END or key == 360 or key == 455:    # End
                self.handle_end()
            elif key == curses.KEY_PPAGE or key == 339 or key == 451:  # Page Up
                self.handle_page_up()
            elif key == curses.KEY_NPAGE or key == 338 or key == 457:  # Page Down
                self.handle_page_down()
            elif key == 9:                                              # Tab
                self.handle_smart_tab()                                
            elif key == self.keybindings["help"]:                       # F1
                self.show_help()
            elif key == self.keybindings["new_file"]:                   # F4
                self.new_file()
            elif key == self.keybindings["save_file"]:     # Ctrl+S
                self.save_file()
            elif key == self.keybindings["save_as"]:       # F5
                self.save_file_as()
            elif key == self.keybindings["open_file"]:     # Ctrl+O
                self.open_file()
            elif key == self.keybindings["copy"]:          # Ctrl+C
                self.copy()
            elif key == self.keybindings["cut"]:           # Ctrl+X
                self.cut()
            elif key == self.keybindings["paste"]:         # Ctrl+V
                self.paste()
            elif key == self.keybindings["redo"]:          # Ctrl+Y
                self.redo()
            elif key == self.keybindings["undo"]:          # Ctrl+Z
                self.undo()
            elif key == self.keybindings["find"]:          # Ctrl+F
                self.find_prompt()
            elif key == self.keybindings["find_next"]:     # F3
                self.find_next()


            elif key >= 32 and key <= 255:                 # Printable characters
                self.handle_char_input(key)
            elif key == self.keybindings["select_all"]:    # Ctrl+A
                self.select_all()
            elif key == curses.KEY_SRIGHT:                 # Shift+Right Arrow
                self.extend_selection_right()
            elif key == curses.KEY_SLEFT:                  # Shift+Left Arrow
                self.extend_selection_left()
            elif key == curses.KEY_SHOME:                  # Shift+Home
                self.select_to_home()
            elif key == curses.KEY_SEND:                   # Shift+End
                self.select_to_end()
            elif key == 337:                               # Shift+Page Up
                self.extend_selection_up()
            elif key == 336:                               # Shift+Page Down
                self.extend_selection_down()           
            elif key == self.keybindings["quit"]:          # Ctrl+Q
                self.exit_editor()
            elif key == self.keybindings["cancel_operation"]:  # Esc
                self.cancel_operation()
            elif key == self.keybindings["git_menu"]:      #  F2 Git menu
                self.integrate_git()
            
        
        except Exception as e:
                self.status_message = f"Error: {str(e)}"
                logging.error(f"Input handling error: {str(e)}")
                logging.error(traceback.format_exc())


    def handle_up(self):
        """Moves the cursor up by one line."""
        self.is_selecting = False  #—Å–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        if self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))


    def handle_down(self):
        """Moves the cursor down by one line."""
        self.is_selecting = False  #—Å–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        if self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))


    def handle_left(self):
        """Moves the cursor left by one character or to the previous line end."""
        if self.cursor_x > 0:
            self.cursor_x -= 1
        elif self.cursor_y > 0:
            self.cursor_y -= 1
            self.cursor_x = len(self.text[self.cursor_y])


    def handle_right(self):
        """Moves the cursor right by one character or to the beginning of the next line."""
        if self.cursor_x < len(self.text[self.cursor_y]):
            self.cursor_x += 1
        elif self.cursor_y < len(self.text) - 1:
            self.cursor_y += 1
            self.cursor_x = 0


    def handle_home(self):
        """Moves the cursor to the beginning of the current line."""
        self.cursor_x = 0


    def handle_end(self):
        """Moves the cursor to the end of the current line."""
        self.cursor_x = len(self.text[self.cursor_y])


    def handle_page_up(self):
        """Moves the cursor up by one screen height."""
        height = self.stdscr.getmaxyx()[0]
        self.cursor_y = max(0, self.cursor_y - height)
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        self.scroll_top = max(0, self.scroll_top - height)


    def handle_page_down(self):
        """Moves the cursor down by one screen height."""
        height = self.stdscr.getmaxyx()[0]
        self.cursor_y = min(len(self.text) - 1, self.cursor_y + height)
        self.cursor_x = min(self.cursor_x, len(self.text[self.cursor_y]))
        if self.cursor_y >= self.scroll_top + height:
            self.scroll_top = max(0, min(len(self.text) - height, self.scroll_top + height))


    def handle_backspace(self):
        if self.is_selecting and self.selection_start and self.selection_end:
            self.delete_selected_text()
        else:
            if self.cursor_x > 0:
                line = self.text[self.cursor_y]
                deleted_char = line[self.cursor_x - 1]
                self.text[self.cursor_y] = line[:self.cursor_x - 1] + line[self.cursor_x:]
                self.cursor_x -= 1
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": deleted_char,
                    "start": self.cursor_y,
                    "start_col": self.cursor_x,
                    "end": self.cursor_y,
                    "end_col": self.cursor_x + 1
                })
            elif self.cursor_y > 0:
                deleted_line = self.text.pop(self.cursor_y)
                self.cursor_y -= 1
                self.cursor_x = len(self.text[self.cursor_y])
                self.text[self.cursor_y] += deleted_line
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": "\n" + deleted_line,
                    "start": self.cursor_y,
                    "start_col": self.cursor_x,
                    "end": self.cursor_y + 1,
                    "end_col": 0
                })
        self.undone_actions.clear()


    def handle_delete(self):
        if self.is_selecting and self.selection_start and self.selection_end:
            self.delete_selected_text()
        else:
            if self.cursor_x < len(self.text[self.cursor_y]):
                line = self.text[self.cursor_y]
                deleted_char = line[self.cursor_x]
                self.text[self.cursor_y] = line[:self.cursor_x] + line[self.cursor_x + 1:]
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": deleted_char,
                    "start": self.cursor_y,
                    "start_col": self.cursor_x,
                    "end": self.cursor_y,
                    "end_col": self.cursor_x + 1
                })
            elif self.cursor_y < len(self.text) - 1:
                deleted_line = self.text.pop(self.cursor_y + 1)
                self.text[self.cursor_y] += deleted_line
                self.modified = True
                self.action_history.append({
                    "type": "delete",
                    "text": "\n" + deleted_line,
                    "start": self.cursor_y,
                    "start_col": len(self.text[self.cursor_y]) - len(deleted_line),
                    "end": self.cursor_y + 1,
                    "end_col": 0
                })
        self.undone_actions.clear()


    def handle_tab(self):
        """Inserts spaces or a tab character depending on configuration."""
        tab_size = self.config.get("editor", {}).get("tab_size", 4)
        use_spaces = self.config.get("editor", {}).get("use_spaces", True)
        current_line = self.text[self.cursor_y]

        if use_spaces:
            spaces = " " * tab_size
            self.text[self.cursor_y] = (
                current_line[: self.cursor_x] + spaces + current_line[self.cursor_x :]
            )
            self.cursor_x += tab_size
        else:
            self.text[self.cursor_y] = (
                current_line[: self.cursor_x] + "\t" + current_line[self.cursor_x :]
            )
            self.cursor_x += 1

        self.modified = True


    def handle_smart_tab(self):
        """
        –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (cursor_x == 0),
        –∫–æ–ø–∏—Ä—É–µ—Ç –æ—Ç—Å—Ç—É–ø (–ø—Ä–æ–±–µ–ª—ã/—Ç–∞–±) –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏.
        –ò–Ω–∞—á–µ ‚Äì –ø–∞–¥–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ handle_tab().
        """
        if self.cursor_y > 0:
            prev_line = self.text[self.cursor_y - 1]
            m = re.match(r"^(\s*)", prev_line)
            if m and self.cursor_x == 0:
                # –∫–æ–ø–∏—Ä—É–µ–º leading_spaces –∏–∑ prev_line
                self.text[self.cursor_y] = m.group(1) + self.text[self.cursor_y]
                self.cursor_x = len(m.group(1))
                self.modified = True
                return
        # –∏–Ω–∞—á–µ ‚Äì –æ–±—ã—á–Ω—ã–π —Ç–∞–±
        self.handle_tab()



    def handle_char_input(self, key):
        """Handles regular character input and supports undo."""

        try:
            char = chr(key)
            current_line = self.text[self.cursor_y]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è undo
            start_y, start_x = self.cursor_y, self.cursor_x

            if self.insert_mode:
                self.text[self.cursor_y] = (
                    current_line[:self.cursor_x] + char + current_line[self.cursor_x:]
                )
            else:
                self.text[self.cursor_y] = (
                    current_line[:self.cursor_x]
                    + char
                    + (
                        current_line[self.cursor_x + 1:]
                        if self.cursor_x < len(current_line)
                        else ""
                    )
                )

            self.cursor_x += 1
            self.modified = True

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
            self.action_history.append({
                "type": "insert",
                "text": char,
                "position": (start_y, start_x)
            })
            self.undone_actions.clear()  # –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

            logging.debug(f"Inserted char '{char}' at ({start_y}, {start_x})")

        except (ValueError, UnicodeEncodeError):
            logging.error(f"Cannot encode character: {key}")
        except Exception as e:
            logging.exception(f"Error handling character input: {str(e)}")
            self.status_message = f"Input error: {str(e)}"



    def handle_enter(self):
        """Handles the Enter key, creating a new line at the cursor position."""
        self.text.insert(self.cursor_y + 1, "")
        content = self.text[self.cursor_y][self.cursor_x :]
        self.text[self.cursor_y] = self.text[self.cursor_y][: self.cursor_x]
        self.text[self.cursor_y + 1] = content
        self.cursor_y += 1
        self.cursor_x = 0
        self.modified = True


    def parse_key(self, key_str: str) -> int:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É-–æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏ –≤ curses-–∫–æ–¥.

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:
        ‚Ä¢ F1‚ÄìF12, —Å—Ç—Ä–µ–ª–∫–∏, Home/End, PgUp/PgDn, Insert/Delete, Backspace
        ‚Ä¢ Ctrl+<–±—É–∫–≤–∞>, Ctrl+Shift+<–±—É–∫–≤–∞>
        ‚Ä¢ Alt+<‚Ä¶> (–±—É–∫–≤–∞, —Ü–∏—Ñ—Ä–∞, —Å–∏–º–≤–æ–ª, F-–∫–ª–∞–≤–∏—à–∞, –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è), –ø–æ–º–µ—á–∞–µ—Ç—Å—è –±–∏—Ç–æ–º 0x200
        –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ‚Äî –≤–æ–∑–±—É–∂–¥–∞–µ—Ç ValueError.
        """
        if not key_str:
            raise ValueError("empty hotkey")

        key_str = key_str.strip().lower()

        # ---------- —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ ----------
        named = {
            "del":        curses.KEY_DC,
            "delete":     curses.KEY_DC,
            "backspace":  curses.KEY_BACKSPACE,
            "tab":        ord("\t"),
            "enter":      ord("\n"),
            "return":     ord("\n"),
            "space":      ord(" "),
            "esc":        27,
            "escape":     27,
            "up":         curses.KEY_UP,
            "down":       curses.KEY_DOWN,
            "left":       curses.KEY_LEFT,
            "right":      curses.KEY_RIGHT,
            "home":       curses.KEY_HOME,
            "end":        curses.KEY_END,
            "pageup":     curses.KEY_PPAGE,
            "pgup":       curses.KEY_PPAGE,
            "pagedown":   curses.KEY_NPAGE,
            "pgdn":       curses.KEY_NPAGE,
            "insert":     curses.KEY_IC,
        }
        # –î–æ–±–∞–≤–ª—è–µ–º F1‚ÄìF12
        named.update({f"f{i}": getattr(curses, f"KEY_F{i}") for i in range(1, 13)})

        # ---------- Alt-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä ----------
        if key_str.startswith("alt+"):
            base = self.parse_key(key_str[4:])      # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º ¬´—Ö–≤–æ—Å—Ç¬ª
            return base | 0x200                     # –∑–∞–¥–∞—ë–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏—Ç Alt

        parts = key_str.split("+")

        # ---------- Ctrl –∏ Ctrl+Shift ----------
        if len(parts) == 2 and parts[0] == "ctrl":
            ch = parts[1]
            if len(ch) == 1 and ch.isalpha():
                return ord(ch) - ord("a") + 1       # —Å—Ç–∞–Ω–¥–∞—Ä—Ç ASCII Ctrl
            raise ValueError(f"unsupported Ctrl combination: {key_str}")

        if len(parts) == 3 and parts[:2] == ["ctrl", "shift"]:
            ch = parts[2]
            if len(ch) == 1 and ch.isalpha():
                return (ord(ch) - ord("a") + 1) | 0x100   # —Å–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            raise ValueError(f"unsupported Ctrl+Shift combination: {key_str}")

        # ---------- –ø—Ä–æ—Å—Ç–æ –∏–º—è ----------
        if key_str in named:
            return named[key_str]

        # ---------- –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª ----------
        if len(key_str) == 1:
            return ord(key_str)

        raise ValueError(f"cannot parse hotkey: {key_str}")


    def get_char_width(self, char):
        """
        Calculates the display width of a character, accounting for full-width and half-width characters.
        """
        try:
            if ord(char) < 128:
                return 1
            width = unicodedata.east_asian_width(char)
            if width in ("F", "W"):
                return 2
            elif width == "A":
                return 2
            else:
                return 1
        except (UnicodeEncodeError, TypeError):
            return 1


    def open_file(self):
        """
        Opens a file with automatic encoding detection using chardet,
        or UTF-8 fallback if chardet is not available.
        """
        if self.modified:
            choice = self.prompt("Save changes? (y/n): ")
            if choice and choice.lower().startswith("y"):
                self.save_file()

        filename = self.prompt("Open file: ")
        if not self.validate_filename(filename):
            self.status_message = "Invalid filename"
            return
        if not filename:
            self.status_message = "Open cancelled"
            return

        try:
            with open(filename, "rb") as f:
                result = chardet.detect(f.read())
                self.encoding = result["encoding"] or "UTF-8"

            with open(filename, "r", encoding=self.encoding, errors="replace") as f:
                self.text = f.read().splitlines()
                if not self.text:
                    self.text = [""]
            self.filename = filename
            self.modified = False
            self.set_initial_cursor_position()
            self.status_message = f"Opened {filename} with encoding {self.encoding}"
            self.update_git_info()  # –û–±–Ω–æ–≤–ª—è–µ–º Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞
            curses.flushinp()
        except ImportError:
            try:
                with open(filename, "r", encoding="utf-8", errors="replace") as f:
                    self.text = f.read().splitlines()
                    if not self.text:
                        self.text = [""]
                self.filename = filename
                self.encoding = "UTF-8"
                self.modified = False
                self.set_initial_cursor_position()
                self.status_message = f"Opened {filename}"
                self.update_git_info()  # –û–±–Ω–æ–≤–ª—è–µ–º Git-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞
                curses.flushinp()
            except FileNotFoundError:
                self.status_message = f"File not found: {filename}"
                logging.error(f"File not found: {filename}")
            except OSError as e:
                self.status_message = f"Error opening file: {e}"
                logging.exception(f"Error opening file: {filename}")
            except Exception as e:
                self.status_message = f"Error opening file: {e}"
                logging.exception(f"Error opening file: {filename}")
        except FileNotFoundError:
            self.status_message = f"File not found: {filename}"
            logging.error(f"File not found: {filename}")
        except OSError as e:
            self.status_message = f"Error opening file: {e}"
            logging.exception(f"Error opening file: {filename}")
        except Exception as e:
            self.status_message = f"Error opening file: {e}"
            logging.exception(f"Error opening file: {filename}")
 

    def save_file(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª.  –ï—Å–ª–∏ –∏–º—è –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äì —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ¬´Save as:¬ª.
        –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª.
        """
        # 1. –∏–º—è –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ? -> —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        if not self.filename:                       # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            new_name = self.prompt("Save as: ")
            if not new_name:
                self.status_message = "Save cancelled"
                return
            if not self.validate_filename(new_name):
                self.status_message = "Invalid filename"
                return
            self.filename = new_name                # –∏–º—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏

        # 2. –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–º–µ–Ω–∏
        if os.path.isdir(self.filename):
            self.status_message = f"Cannot save: {self.filename} is a directory"
            return
        if os.path.exists(self.filename) and not os.access(self.filename, os.W_OK):
            self.status_message = f"No write permissions: {self.filename}"
            return

        # 3. –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
        try:
            with open(self.filename, "w", encoding=self.encoding, errors="replace") as f:
                f.write(os.linesep.join(self.text))
            self.modified = False
            self.status_message = f"Saved to {self.filename}"

            code = os.linesep.join(self.text)
            threading.Thread(target=self.run_lint_async, args=(code,), daemon=True).start()
            self.update_git_info()
        except Exception as e:
            self.status_message = f"Error saving file: {e}"
            logging.exception(f"Error saving file: {self.filename}")


    def save_file_as(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º.
        ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ validate_filename().
        ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç self.filename –∏ —Ñ–ª–∞–≥ modified.
        ‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–∏–Ω—Ç–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        new_filename = self.prompt("Save file as: ")
        if not new_filename:
            self.status_message = "Save cancelled"
            return

        # ‚îÄ‚îÄ 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if not self.validate_filename(new_filename):
            self.status_message = "Invalid filename"
            return

        if os.path.isdir(new_filename):
            self.status_message = f"Cannot save: {new_filename} is a directory"
            return

        if os.path.exists(new_filename) and not os.access(new_filename, os.W_OK):
            self.status_message = f"No write permissions: {new_filename}"
            return

        # ‚îÄ‚îÄ 2. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        try:
            with open(new_filename, "w", encoding=self.encoding, errors="replace") as f:
                f.write(os.linesep.join(self.text))

            self.filename = new_filename
            self.modified = False
            self.status_message = f"Saved as {new_filename}"

            # –õ–∏–Ω—Ç–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
            code = os.linesep.join(self.text)
            threading.Thread(target=self.run_lint_async, args=(code,), daemon=True).start()

        except OSError as e:
            self.status_message = f"Error saving file: {e}"
            logging.exception(f"Error saving file: {new_filename}")
        except Exception as e:
            self.status_message = f"Error saving file: {e}"
            logging.exception(f"Error saving file: {new_filename}")


    def revert_changes(self):
        """
        Reverts unsaved changes by reloading from the last saved version.
        """
        if self.filename == "noname":
            self.status_message = "Cannot revert: file has not been saved yet"
            return

        if not os.path.exists(self.filename):
            self.status_message = f"Cannot revert: file {self.filename} does not exist"
            return

        confirmation = self.prompt("Revert to last saved version? (y/n): ")
        if not confirmation or confirmation.lower() != "y":
            self.status_message = "Revert cancelled"
            return

        try:
            with open(self.filename, "r", encoding=self.encoding, errors="replace") as f:
                self.text = f.read().splitlines()
                if not self.text:
                    self.text = [""]

            self.modified = False
            self.set_initial_cursor_position()
            self.status_message = f"Reverted to last saved version of {self.filename}"
        except OSError as e:
            self.status_message = f"Error reverting file: {e}"
            logging.exception(f"Error reverting file: {self.filename}")
        except Exception as e:
            self.status_message = f"Unexpected error: {e}"
            logging.exception(f"Unexpected error reverting file: {self.filename}")


    def new_file(self):
        """
        Creates a new empty document, prompting the user to save changes if any.
        """
        if self.modified:
            choice = self.prompt("Save changes? (y/n): ")
            if choice and choice.lower().startswith("y"):
                self.save_file()

        try:
            self.text = [""]
            self.filename = ""           # —Ç–æ–∂–µ –ø—É—Å—Ç–æ
            self.modified = False
            self.set_initial_cursor_position()
            self.status_message = "New file created"
        except Exception as e:
            self.status_message = f"Error creating new file: {e}"
            logging.exception("Error creating new file")



    def cancel_operation(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´Esc-–æ—Ç–º–µ–Ω—ã¬ª, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handle_input()
        –∏ —á–µ—Ä–µ–∑ action_map/–≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É.

        ‚Ä¢ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äí —Å–Ω–∏–º–∞–µ—Ç –µ–≥–æ;  
        ‚Ä¢ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç prompt (–Ω–∞–∂–∞—Ç–∏–µ Esc —É–∂–µ –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É) ‚Äì
        –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç —Å—Ç–∞—Ç—É—Å ¬´Cancelled¬ª;  
        ‚Ä¢ –∏–Ω–∞—á–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞.
        """
        if self.is_selecting:
            self.is_selecting = False
            self.selection_start = self.selection_end = None
            self.status_message = "Selection cancelled"
        else:
            self.status_message = "Cancelled"


    def handle_escape(self):
            """
            –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Esc.

            ‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Äí –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –µ–≥–æ.  
            ‚Ä¢ –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è Esc –±—ã–ª–∞ –º–µ–Ω–µ–µ —á–µ–º 1.5 —Å –Ω–∞–∑–∞–¥,
            —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –≤—ã–π—Ç–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º—Å—è.  
            ‚Ä¢ –ò–Ω–∞—á–µ  ‚Äí –ª–∏—à—å —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å ¬´Cancelled¬ª.
            """
            now = time.monotonic()
            last = getattr(self, "_last_esc_time", 0)

            # 1) –∏–¥—ë—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            if self.is_selecting:
                self.is_selecting = False
                self.selection_start = self.selection_end = None
                self.status_message = "Selection cancelled"

            # 2) –¥–≤–æ–π–Ω–æ–π Esc (–±—ã—Å—Ç—Ä–µ–µ 1.5 c) ‚Üí –≤—ã—Ö–æ–¥
            elif now - last < 1.5:
                if self.modified:
                    choice = self.prompt("Save changes before exit? (y/n): ")
                    if choice and choice.lower().startswith("y"):
                        self.save_file()
                self.exit_editor()

            # 3) –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí –ø—Ä–æ—Å—Ç–æ ¬´Cancelled¬ª
            else:
                self.status_message = "Cancelled"

            # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è Esc
            self._last_esc_time = now


    def exit_editor(self):
        """
        Exits the editor with a prompt to save any unsaved changes.
        """
        if self.modified:
            choice = self.prompt("Save changes? (y/n): ")
            if choice and choice.lower().startswith("y"):
                self.save_file()
        curses.endwin()
        sys.exit(0)


    def prompt(self, message: str, max_len: int = 1024) -> str:
        """
        –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å-—Å—Ç—Ä–æ–∫–µ.

        ‚ñ∏ Esc      ‚Äî –æ—Ç–º–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ""  
        ‚ñ∏ Enter    ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ  
        ‚ñ∏ Backspace, ‚Üê/‚Üí, Home/End —Ä–∞–±–æ—Ç–∞—é—Ç ¬´–∫–∞–∫ –ø—Ä–∏–≤—ã—á–Ω–æ¬ª  
        """
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º curses –≤ ¬´–æ–±—ã—á–Ω—ã–π¬ª —Ä–µ–∂–∏–º
        self.stdscr.nodelay(False)
        curses.echo(False)

        # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞
        row = curses.LINES - 1
        col = 0
        try:
            # —Ä–∏—Å—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            self.stdscr.move(row, col)
            self.stdscr.clrtoeol()
            self.stdscr.addstr(row, col, message)
            self.stdscr.refresh()

            # –±—É—Ñ–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
            buf: list[str] = []
            pos = 0

            while True:
                ch = self.stdscr.get_wch()   # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç UTF-8

                # ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏—à–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                if ch in ("\n", "\r"):                    # Enter
                    break
                elif ch == "\x1b":                       # Esc (0x1B)
                    buf = []          # –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç = –æ—Ç–º–µ–Ω–∞
                    break
                elif ch in ("\x08", "\x7f", curses.KEY_BACKSPACE):
                    if pos > 0:
                        pos -= 1
                        buf.pop(pos)
                elif ch in (curses.KEY_LEFT,):
                    pos = max(0, pos - 1)
                elif ch in (curses.KEY_RIGHT,):
                    pos = min(len(buf), pos + 1)
                elif ch in (curses.KEY_HOME,):
                    pos = 0
                elif ch in (curses.KEY_END,):
                    pos = len(buf)

                # ‚îÄ‚îÄ‚îÄ –ø–µ—á–∞—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                elif isinstance(ch, str) and ch.isprintable():
                    if len(buf) < max_len:
                        buf.insert(pos, ch)
                        pos += 1

                # ‚îÄ‚îÄ‚îÄ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                # –æ—á–∏—â–∞–µ–º —Ö–≤–æ—Å—Ç, —á—Ç–æ–±—ã —Å—Ç–∏—Ä–∞–ª–∏—Å—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                self.stdscr.move(row, len(message))
                self.stdscr.clrtoeol()
                self.stdscr.addstr(row, len(message), "".join(buf))
                # –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä
                self.stdscr.move(row, len(message) + pos)
                self.stdscr.refresh()

        except Exception:
            logging.exception("Prompt error")
            buf = []          # —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–º

        finally:
            curses.flushinp()            # –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞
            curses.noecho()
            self.stdscr.nodelay(False)

        return "".join(buf).strip()


    # === –ü–û–ò–°–ö ====================================================================

    def _collect_matches(self, term):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö (row, col_start, col_end) –¥–ª—è term (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)."""
        matches = []
        if not term:
            return matches
        low = term.lower()
        for row, line in enumerate(self.text):
            start = 0
            while True:
                idx = line.lower().find(low, start)
                if idx == -1:
                    break
                matches.append((row, idx, idx + len(term)))
                start = idx + len(term)
        return matches


    def find_prompt(self):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, –≤—ã–¥–µ–ª—è–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–µ—Ä–≤–æ–º—É.
        """
        term = self.prompt("Find: ")
        if term == "":
            self.status_message = "Search cancelled"
            return

        self.search_term    = term
        self.search_matches = self._collect_matches(term)
        if not self.search_matches:
            self.status_message = f"'{term}' not found"
            self.current_match_idx = -1
            return

        self.current_match_idx = 0
        self._goto_match(self.current_match_idx)
        self.status_message = f"Found {len(self.search_matches)} match(es)"


    def find_next(self):
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ø–æ —Ü–∏–∫–ª—É).
        """
        if not self.search_matches:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª F3 –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            self.find_prompt()
            return

        self.current_match_idx = (self.current_match_idx + 1) % len(self.search_matches)
        self._goto_match(self.current_match_idx)
        self.status_message = (
            f"Match {self.current_match_idx + 1}/{len(self.search_matches)}"
        )


    def _goto_match(self, idx):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –∫—É—Ä—Å–æ—Ä/–ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ‚Ññ idx –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ."""
        row, col_start, col_end = self.search_matches[idx]
        self.cursor_y, self.cursor_x = row, col_start
        height = self.stdscr.getmaxyx()[0]
        # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        if self.cursor_y < self.scroll_top:
            self.scroll_top = max(0, self.cursor_y - height // 2)
        elif self.cursor_y >= self.scroll_top + self.visible_lines:
            self.scroll_top = min(
                len(self.text) - self.visible_lines,
                self.cursor_y - height // 2,
            )
        # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        width = self.stdscr.getmaxyx()[1]
        ln_width = len(str(len(self.text))) + 1   # —à–∏—Ä–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ + –ø—Ä–æ–±–µ–ª
        text_width = width - ln_width
        if self.cursor_x < self.scroll_left:
            self.scroll_left = self.cursor_x
        elif self.cursor_x >= self.scroll_left + text_width:
            self.scroll_left = max(0, self.cursor_x - text_width + 1)


    def search_text(self, search_term):
        """
        Searches for all occurrences of the specified term across all lines
        of the document and returns a list of matches.
        """
        matches = []
        for line_num, line in enumerate(self.text):
            for match in re.finditer(re.escape(search_term), line):
                matches.append((line_num, match.start(), match.end()))
        return matches


    def validate_filename(self, filename):
        """
        Validates the filename for length, correctness, and path.
        """
        if not filename or len(filename) > 255:
            return False
        if os.path.isabs(filename):
            base_dir = os.path.dirname(os.path.abspath(filename))
            return os.path.commonpath([base_dir, os.getcwd()]) == os.getcwd()
        return True


    def execute_shell_command(self):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—É, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ—ë –±–µ–∑ shell=True
        –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã stdout/stderr –≤ —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞.
        """
        command = self.prompt("Enter command: ")
        if not command:
            self.status_message = "Command cancelled"
            return

        # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–≤—ã—á–∫–∏, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
        try:
            cmd_list = shlex.split(command)
        except ValueError as e:
            self.status_message = f"Parse error: {e}"
            return

        # –±–ª–æ–∫–∏—Ä—É–µ–º curses-—ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        try:
            curses.def_prog_mode()
            curses.endwin()

            # –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ shell=True
            process = subprocess.Popen(
                cmd_list,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
            )
            output, error = process.communicate(timeout=30)

        except subprocess.TimeoutExpired:
            self.status_message = "Command timed out"
            return
        except FileNotFoundError:
            self.status_message = f"Executable not found: {cmd_list[0]}"
            return
        except Exception as e:
            self.status_message = f"Exec error: {e}"
            return
        finally:
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ curses-—Ä–µ–∂–∏–º
            curses.reset_prog_mode()
            self.stdscr.refresh()

        # –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if error and error.strip():
            self.status_message = f"Error: {error[:50]}..."
        else:
            self.status_message = f"Command executed: {output[:50]}..."

    
    def integrate_git(self):
        """
        –ú–µ–Ω—é Git –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏—à–µ–π F2.
        """
        commands = {
            "1": ("status", "git status"),
            "2": ("commit", None),          # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            "3": ("push",   "git push"),
            "4": ("pull",   "git pull"),
            "5": ("diff",   "git diff"),
        }

        # –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö \n
        opts = " ".join(f"{k}:{v[0]}" for k, v in commands.items())
        choice = self.prompt(f"Git menu [{opts}] ‚Üí ")

        if choice not in commands:
            self.status_message = "Invalid choice"
            return

        if choice == "2":                               # commit
            msg = self.prompt("Commit message: ")
            if not msg:
                self.status_message = "Commit cancelled"
                return
            cmd = ["git", "commit", "-am", msg]         # —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        else:
            cmd = commands[choice][1].split()           # "git status" ‚Üí ["git","status"]

        try:
            curses.def_prog_mode()
            curses.endwin()
            proc = safe_run(cmd)                     
            curses.reset_prog_mode()
            self.stdscr.refresh()

            if proc.returncode == 0:
                self.status_message = f"Git {commands[choice][0]} successful"
                self.update_git_info()        # –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –≤–µ—Ç–∫—É / —Å—á—ë—Ç—á–∏–∫
            else:
                self.status_message = f"Git error: {proc.stderr.strip()[:120]}"

        except FileNotFoundError:
            self.status_message = "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
        except Exception as e:
            self.status_message = f"Git error: {e}"


    def goto_line(self):
        """
        Moves the cursor to the specified line number within the document.
        """
        line_num = self.prompt("Go to line: ")
        try:
            line_num = int(line_num)
            if 1 <= line_num <= len(self.text):
                self.cursor_y = line_num - 1
                self.cursor_x = 0
                height = self.stdscr.getmaxyx()[0]
                if self.cursor_y < self.scroll_top:
                    self.scroll_top = max(0, self.cursor_y - height // 2)
                elif self.cursor_y >= self.scroll_top + height - 2:
                    self.scroll_top = min(
                        len(self.text) - height + 2, self.cursor_y - height // 2
                    )
            else:
                self.status_message = f"Line number out of range (1-{len(self.text)})"
        except ValueError:
            self.status_message = "Invalid line number"


    def find_and_replace(self):
        """
        Performs find and replace with optional regex support.
        """
        search_term = self.prompt("Search for: ")
        if not search_term:
            return

        replace_term = self.prompt("Replace with: ")
        if replace_term is None:
            return

        try:
            count = 0
            for i in range(len(self.text)):
                new_line = re.sub(search_term, replace_term, self.text[i])
                if new_line != self.text[i]:
                    count += len(re.findall(search_term, self.text[i]))
                    self.text[i] = new_line
                    self.modified = True
            self.status_message = f"Replaced {count} occurrences"
        except re.error as e:
            self.status_message = f"Invalid regex pattern: {str(e)}"
        except Exception as e:
            self.status_message = f"Error during replace: {str(e)}"


    def toggle_insert_mode(self):
        """Toggles between Insert and Replace modes."""
        self.insert_mode = not self.insert_mode
        self.status_message = f"Mode: {'Insert' if self.insert_mode else 'Replace'}"


    def find_matching_bracket(self, line, col, bracket):
        """
        Searches for the matching bracket for the one under the cursor.
        Returns (row, col) of the matching bracket or None if not found.
        """
        brackets = {"(": ")", "{": "}", "[": "]", ")": "(", "}": "{", "]": "["}
        stack = []
        direction = 1 if bracket in "({[" else -1
        start = col + direction

        if direction == 1:
            for i in range(start, len(line)):
                char = line[i]
                if char in "({[":
                    stack.append(char)
                elif char in ")}]":
                    if not stack:
                        return None
                    top = stack.pop()
                    if brackets[top] != char:
                        return None
                    if not stack:
                        return (self.cursor_y, i)
        else:
            for i in range(start, -1, -1):
                char = line[i]
                if char in ")}]":
                    stack.append(char)
                elif char in "({[":
                    if not stack:
                        return None
                    top = stack.pop()
                    if brackets[char] != top:
                        return None
                    if not stack:
                        return (self.cursor_y, i)
        return None


    def highlight_matching_brackets(self):
        """
        Highlights matching brackets if the cursor is currently on a bracket.
        """
        if not (
            0 <= self.cursor_y < len(self.text)
            and 0 <= self.cursor_x < len(self.text[self.cursor_y])
        ):
            return

        line = self.text[self.cursor_y]
        char = line[self.cursor_x]

        if char in "(){}[]":
            match_pos = self.find_matching_bracket(line, self.cursor_x, char)
            if match_pos:
                height, width = self.stdscr.getmaxyx()
                if (
                    0 <= self.cursor_y - self.scroll_top < height
                    and 0 <= self.cursor_x - self.scroll_left < width
                ):
                    self.stdscr.addch(
                        self.cursor_y - self.scroll_top,
                        self.cursor_x - self.scroll_left,
                        char,
                        curses.A_REVERSE,
                    )
                match_y, match_x = match_pos
                if (
                    0 <= match_y - self.scroll_top < height
                    and 0 <= match_x - self.scroll_left < width
                ):
                    self.stdscr.addch(
                        match_y - self.scroll_top,
                        match_x - self.scroll_left,
                        line[match_x],
                        curses.A_REVERSE,
                    )


    def search_and_replace(self):
        """
        Searches and replaces text throughout the document using regex.
        Prompts for a search pattern and replacement text, performs the replacement,
        and reports the number of occurrences replaced.
        """
        search_pattern = self.prompt("Enter search pattern (regex): ")
        if not search_pattern:
            self.status_message = "Search cancelled"
            return

        replace_with = self.prompt("Enter replacement string: ")
        if replace_with is None:
            self.status_message = "Replacement cancelled"
            return

        try:
            compiled_pattern = re.compile(search_pattern)
            new_text = []
            replacements = 0

            for line in self.text:
                new_line, count = compiled_pattern.subn(replace_with, line)
                new_text.append(new_line)
                replacements += count

            self.text = new_text
            self.modified = True
            self.status_message = f"Replaced {replacements} occurrence(s)"
        except re.error as e:
            self.status_message = f"Invalid regex pattern: {e}"
        except Exception as e:
            self.status_message = f"Error during search and replace: {e}"

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    def toggle_auto_save(self):
        """ TODO: Enables or disables auto-save functionality."""
        self.auto_save = getattr(self, "auto_save", False)
        self.auto_save = not self.auto_save

        if self.auto_save:

            def auto_save_thread():
                while self.auto_save:
                    time.sleep(60)
                    if self.modified:
                        self.save_file()

            threading.Thread(target=auto_save_thread, daemon=True).start()
            self.status_message = "Auto-save enabled"
        else:
            self.status_message = "Auto-save disabled"


    def show_help(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π.
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ Esc.  –ù–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∫—É—Ä—Å–æ—Ä —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
        """
        help_lines = [
            "  ‚îÄ‚îÄ  Sway-Pad Help  ‚îÄ‚îÄ  ",
            "",
            "  F1        : Help (—ç—Ç–æ –æ–∫–Ω–æ)",
            "  F2        : Git-–º–µ–Ω—é",
            "  F3        : Find next",
            "  F4        : New file",
            "  F5        : Save as‚Ä¶",
            "  Ctrl+S    : Save",
            "  Ctrl+O    : Open file",
            "  Ctrl+Q    : Quit",
            "  Ctrl+Z/Y  : Undo / Redo",
            "  Ctrl+F    : Find",
            "",
            "  ¬© 2025 Siergej Sobolewski ‚Äî Sway-Pad",
            "  Licensed under the Apache License 2.0",
            "",
            "  Esc ‚Äî –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ",
        ]

        # —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—è
        h = len(help_lines) + 2
        w = max(len(l) for l in help_lines) + 4
        max_y, max_x = self.stdscr.getmaxyx()
        y0 = (max_y - h) // 2
        x0 = (max_x - w) // 2

        win = curses.newwin(h, w, y0, x0)
        win.bkgd(" ", curses.color_pair(6))
        win.border()

        for i, text in enumerate(help_lines, start=1):
            win.addstr(i, 2, text)

        win.refresh()

        # ‚òÖ –ø—Ä—è—á–µ–º –∫—É—Ä—Å–æ—Ä –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            prev_vis = curses.curs_set(0)   # 0 = invisible, 1/2 = visible
        except curses.error:
            prev_vis = 1                     # –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç

        # –∂–¥—ë–º Esc
        while True:
            ch = win.getch()
            if ch == 27:                     # Esc
                break

        # ‚òÖ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
        try:
            curses.curs_set(prev_vis)
        except curses.error:
            pass

        del win
        self.draw_screen()

    def run(self):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:
        ‚Ä¢ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ —á–µ—Ä–µ–∑ self._msg_q
        ‚Ä¢ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω
        ‚Ä¢ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏—à–∏
        ‚Ä¢ –ª–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        while True:
            # ‚îÄ‚îÄ 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            try:
                while not self._msg_q.empty():
                    self.status_message = self._msg_q.get_nowait()
            except queue.Empty:
                pass

            # ‚îÄ‚îÄ 2. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            try:
                self.draw_screen()
            except Exception as e:
                logging.exception("Draw error")
                self.status_message = f"Draw error: {e}"

            # ‚îÄ‚îÄ 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            try:
                self.stdscr.keypad(True)
                key = self.stdscr.getch()          # –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
                self.handle_input(key)
            except KeyboardInterrupt:
                self.exit_editor()
            except Exception as e:
                logging.exception("Unhandled exception in main loop")
                self.status_message = f"Error: {e}"



def main(stdscr):
    """
    Initializes locale, stdout encoding, and handles command-line
    arguments before starting the main editor loop.
    """
    os.environ["LANG"] = "en_US.UTF-8"
    locale.setlocale(locale.LC_ALL, "")
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, errors="replace")
    editor = SwayEditor(stdscr)

    try:
        if len(sys.argv) > 1:
            editor.filename = sys.argv[1]
            editor.open_file()
    except Exception as e:
        logging.exception(f"Error opening file from command line: {e}")

    editor.run()


if __name__ == "__main__":
    config = load_config()
    print("Configuration loaded:")
    print(config)
    try:
        curses.wrapper(main)
    except Exception as e:
        logging.exception("Unhandled exception in main")
        print("An error occurred. See editor.log for details.")
        error_log_path = os.path.join(os.path.dirname(__file__), "error.log")
        with open(error_log_path, "a") as error_file:
            error_file.write(traceback.format_exc())

        print(f"Editor launch error: {e}")
        print(f"See {error_log_path} for details.")
        sys.exit(1)
