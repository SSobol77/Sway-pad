# config.toml
# Sway-Pad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.


[colors]
line_number = "yellow"
cursor = "yellow"
keyword = "blue"
string = "green"
comment = "white"
literal = "magenta"
decorator = "cyan"
type = "yellow"
selector = "magenta"
property = "cyan"
punctuation = "white"
background = "#1E1E1E"
foreground = "#D4D4D4"
error = "red"           
status = "bright_white"
variable = "white"    
tag = "blue"          
attribute = "cyan"    
magic = "magenta"      
builtin = "yellow"     
exception = "red"      
function = "blue"     
class = "yellow"       
number = "magenta"      
operator = "white"     
escape = "cyan"       

[fonts]
font_family = "monospace"
font_size = 12

[keybindings]
# ── базовые операции ──────────────────────────────────────────────
copy                 = "ctrl+c"
cut                  = "ctrl+x"
paste                = "ctrl+v"
undo                 = "ctrl+z"
redo                 = "ctrl+shift+z"
quit                 = "ctrl+q"
save_file            = "ctrl+s"
save_as              = "f5"  
open_file            = "ctrl+o"
save_file_as         = "ctrl+shift+s"   # если используете
select_all           = "ctrl+a"
delete               = "del"
auto_save            = "f6"

# ── перемещение курсора / выделение ───────────────────────────────
extend_selection_right = "shift+right"
extend_selection_left  = "shift+left"
select_to_home         = "shift+home"
select_to_end          = "shift+end"
extend_selection_up    = "shift+pgup"    # ← поддерживается
extend_selection_down  = "shift+pgdn"

# ── новые горячие клавиши (пример) ────────────────────────────────
git_menu     = "f2"          # открывает Git-меню
comment_line = "alt+#"       # закомментировать / раскомментировать строку
go_to_top    = "home"        # курсор в начало файла
go_to_bottom = "end"         # курсор в конец файла
page_up      = "pgup"
page_down    = "pgdn"
toggle_insert_mode = "insert"
find       = "ctrl+f"
find_next  = "f3"
find_and_replace = "f6"
goto_line = "ctrl+g"

# F-клавиши до F12 распознаются так же:
build_project   = "f12"
run_tests       = "f9"

[editor]
use_system_clipboard = true  # Использовать системный буфер обмена (pyperclip)
show_line_numbers = true
#default_new_filename = "my_draft.toml"  # имя файла по умолчанию
tab_size = 4
use_spaces = true
word_wrap = false
auto_indent = true
auto_brackets = true
auto_save_interval = 120  # секунды


[theme]
name = "dark"

[theme.ui]
background = "#252526"
foreground = "#CCCCCC"
accent = "#007ACC"
selection = "#264F78"
inactive_selection = "#3A3D41"
cursor = "#AEAFAD"


[file_icons]
text = "📝"
code = "💻"
python = "🐍"
toml = "❄️"
javascript = "📜"
typescript = "📑"  
php = "📑"  
ruby = "🪀" 
css = "🎨"
html = "🌐"
json = "📊"
yaml = "⚙️"
xml = "📑"
markdown = "📋"
plaintext = "📄"
shell = "💫"
dart = "📱"
go = "📑"
c = "📃"
cpp = "📃"
java = "☕"
julia = "🧮"
rust = "✴️"
csharp = "🪟"
scala = "💎" 
r = "📉"    
swift = "💎"  
dockerfile = "🐳"
terraform = "⚙️"
jenkins = "⚙️"
puppet = "⚙️"
saltstack = "🧊"
git = "🔖"
notebook = "📒"
diff = "📼"
makefile = "⚙️"
ini = "⚙️"
csv = "🎴"
sql = "📊"
graphql = "📈"
kotlin = "📱"
lua = "🔮"
perl = "⚒"
powershell = "⚒"
folder = "📁"
folder_open = "📂"
nix = "❄️"


[syntax_highlighting]

[syntax_highlighting.python]
patterns = [
    # 1. Keywords
    { pattern = "\\b(and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b", color = "keyword" },

    # 2. Decorators with arguments
    { pattern = "@\\w+(?:\\([^)]*?\\))?", color = "decorator" },

    # 3. Strings (including f-strings and triple quotes)
    { pattern = "(?s)(f|r|rf|fr)?('''(\\\\.|[^'])*?'''|\"\"\"(\\\\.|[^\"])*?\"\"\")", color = "string" },
    { pattern = "(?s)(b|rb|br)?('''(\\\\.|[^'])*?'''|\"\"\"(\\\\.|[^\"])*?\"\"\")", color = "string" },
    { pattern = "(f|r|rf|fr|b|br|rb)?(['\"])(?:\\\\\\2|.)*?\\2", color = "string" },

    # 4. Numbers (integers, floats, complex, binary, octal, hexadecimal)
    { pattern = "\\b(?:\\d+\\.\\d+|\\.\\d+|\\d+)(?:e[+-]?\\d+)?j?\\b", color = "literal" },
    { pattern = "\\b0[bB][01_]+\\b", color = "literal" },
    { pattern = "\\b0[oO][0-7_]+\\b", color = "literal" },
    { pattern = "\\b0[xX][0-9a-fA-F_]+\\b", color = "literal" },

    # 5. Comments and docstrings
    { pattern = "#.*$", color = "comment" },
    { pattern = "\"\"\".*?\"\"\"", color = "comment" },
    { pattern = "'''(.*?)'''", color = "comment" },

    # 6. Built-in functions and exceptions
    { pattern = "\\b(ArithmeticError|AssertionError|AttributeError|BaseException|BlockingIOError|BrokenPipeError|BufferError|BytesWarning|ChildProcessError|ConnectionAbortedError|ConnectionError|ConnectionRefusedError|ConnectionResetError|DeprecationWarning|EOFError|Ellipsis|EncodingWarning|EnvironmentError|Exception|FileExistsError|FileNotFoundError|FloatingPointError|FutureWarning|GeneratorExit|IOError|ImportError|ImportWarning|IndentationError|IndexError|InterruptedError|IsADirectoryError|KeyError|KeyboardInterrupt|LookupError|MemoryError|ModuleNotFoundError|NameError|NotADirectoryError|NotImplemented|NotImplementedError|OSError|OverflowError|PendingDeprecationWarning|PermissionError|ProcessLookupError|RecursionError|ReferenceError|ResourceWarning|RuntimeError|RuntimeWarning|StopAsyncIteration|StopIteration|SyntaxError|SyntaxWarning|SystemError|SystemExit|TabError|TimeoutError|TypeError|UnboundLocalError|UnicodeDecodeError|UnicodeEncodeError|UnicodeError|UnicodeTranslateError|UnicodeWarning|UserWarning|ValueError|Warning|ZeroDivisionError|__import__|abs|all|any|ascii|bin|bool|breakpoint|bytearray|bytes|callable|chr|classmethod|compile|complex|copyright|credits|delattr|dict|dir|divmod|enumerate|eval|exec|exit|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|license|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|print|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip)\\b", color = "builtins" },

    # 7. Type annotations (from typing and standard)
    { pattern = "\\b(List|Dict|Tuple|Set|Optional|Union|Any|Callable|TypeVar|Generic|Iterable|Iterator|Sequence|Mapping|MutableMapping|Awaitable|Coroutine|AsyncIterable|NamedTuple|TypedDict|Final|Literal|Annotated|TypeGuard|Self|Protocol|dataclass|field|classmethod|staticmethod)\\b", color = "type" },

    # 8. Regular expressions
    { pattern = "r[\"'].*?[\"']", color = "regexp" },

    # 9. Constants
    { pattern = "\\b(True|False|None|Ellipsis|NotImplemented)\\b", color = "literal" },

    # 10. Special methods
    { pattern = "__(?:init|new|str|repr|enter|exit|getattr|setattr|delattr|getitem|setitem|delitem|iter|next|call|len|contains|add|sub|mul|truediv|floordiv|mod|pow|lshift|rshift|and|or|xor|invert|eq|ne|lt|le|gt|ge|bool|bytes|format|hash|dir|sizeof|getstate|setstate|reduce|reduce_ex|subclasshook|del|doc|name|qualname|module|defaults|kwdefaults|annotations|dict|weakref|slots|class|self|cls)__(?=\\()", color = "magic" },

    # 11. Imports
    { pattern = "\\bimport\\s+\\w+(?:\\.\\w+)*\\b", color = "import" },
    { pattern = "\\bfrom\\s+\\w+(?:\\.\\w+)*\\s+import\\b", color = "import" }
]

[syntax_highlighting.toml]
patterns = [
    { pattern = "^\\s*\\[\\[.*?\\]\\]", color = "keyword" },
    { pattern = "^\\s*\\[.*?\\]", color = "keyword" },
    { pattern = "^\\s*([\\w-]+)\\s*=\\s*", color = "property" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" }, 
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(true|false)\\b", color = "literal" },   
    { pattern = "\\b(\\d+\\.?\\d*|0x[0-9a-fA-F]+)\\b", color = "literal" },
    { pattern = "#.*", color = "comment" },
    { pattern = "\\b(\\w+)\\s*=\\s*(\\[.*?\\])", color = "type" },
    { pattern = "\\b(\\w+)\\s*=\\s*\\{.*?\\}", color = "type" }
]

[syntax_highlighting.javascript]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(let|const|var|function|return|if|else|for|while|do|switch|case|break|continue|try|catch|finally|new|delete|typeof|instanceof|this|class|extends|super|import|export|from|as|async|await|yield)\\b", color = "keyword" },
    { pattern = '`[^`]*`', color = "string" },
    { pattern = "\"[^\"]*\"", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|true|false|null|undefined|NaN|Infinity)\\b", color = "literal" },
    { pattern = "console\\.log", color = "keyword" },
    { pattern = "\\$\\{[^}]*\\}", color = "literal" }
]

[syntax_highlighting.css]
patterns = [
    { pattern = "[\\w#.-]+(?=\\s*\\{)", color = "selector" }, 
    { pattern = "([\\w-]+)(?=:)" , color = "property" },
    { pattern = ":\\s*(.*?);", color = "string" },
    { pattern = "!important", color = "literal" },
    { pattern = "/\\*.*?\\*/", color = "comment" }
]

[syntax_highlighting.html]
patterns = [
    { pattern = "<\\/?[\\w-]+", color = "tag" },
    { pattern = "\\b([\\w-]+)=", color = "attribute" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "<!--.*?-->", color = "comment" }
]

[syntax_highlighting.json]
patterns = [
    { pattern = "\"(\\w+)\"\\s*:", color = "keyword" },
    { pattern = ":\\s*(\".*?\"|[\\d.]+|true|false|null)", color = "string" },
    { pattern = "[\\[\\]{}]", color = "punctuation" }
]

[syntax_highlighting.yaml]
patterns = [
    { pattern = "^\\\\s*[\\\\w-]+(?::\\\\s*)?", color = "keyword" },
    { pattern = ":\\s*(\".*?\"|'.*?')", color = "string" },
    { pattern = "^\\s*-\\s+", color = "punctuation" },
    { pattern = "\\b(true|false|yes|no|on|off|\\d+\\.?\\d*)\\b", color = "literal" },
    { pattern = "#.*", color = "comment" }
]

[syntax_highlighting.markdown]
patterns = [
    { pattern = "^#{1,6}\\s", color = "keyword" },
    { pattern = "\\*{1,2}.*?\\*{1,2}", color = "emphasis" },
    { pattern = "`.*?`", color = "string" },
    { pattern = "\\[.*?\\]\\(.*?\\)", color = "literal" },
    { pattern = "^>\\s.*", color = "comment" }
]

[syntax_highlighting.xml]
patterns = [
    { pattern = "<\\/?[\\w-]+", color = "tag" },
    { pattern = "\\b([\\w-]+)=", color = "attribute" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "<!--.*?-->", color = "comment" }
]

[syntax_highlighting.shell]
patterns = [
    { pattern = "#.*", color = "comment" },
    { pattern = "\\$\\{.*?\\}", color = "literal" },
    { pattern = "\\$\\w+", color = "literal" },
    { pattern = "\".*?\"", color = "string" },
    { pattern = "'.*?'", color = "string" },
    { pattern = "\\b(if|then|else|elif|fi|for|do|done|while|case|esac|echo|exit|export|source|alias)\\b", color = "keyword" }
]

[syntax_highlighting.dart]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(abstract|as|assert|async|await|break|case|catch|class|const|continue|default|deferred|do|dynamic|else|enum|export|extends|external|factory|final|finally|for|get|if|implements|import|in|is|library|new|null|operator|part|rethrow|return|set|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|true|false)\\b", color = "literal" }
]

[syntax_highlighting.go]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go|goto|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|true|false|nil)\\b", color = "literal" }
]

[syntax_highlighting.c]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|namespace|using|template|class|private|protected|public|virtual|friend|inline|new|delete|try|catch|throw|operator|explicit|export|bool|true|false|nullptr)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|NULL)\\b", color = "literal" },
    { pattern = '#include\\s*[<"].*?[>"]', color = "decorator" },
    { pattern = "#\\w+", color = "decorator" }
]

[syntax_highlighting.cpp]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|namespace|using|template|class|private|protected|public|virtual|friend|inline|new|delete|try|catch|throw|operator|explicit|export|bool|true|false|nullptr)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|NULL)\\b", color = "literal" },
    { pattern = '#include\\s*[<"].*?[>"]', color = "decorator" },
    { pattern = "#\\w+", color = "decorator" }
]

[syntax_highlighting.java]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while|true|false|null)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?)\\b", color = "literal" },
    { pattern = "@\\w+", color = "decorator" }
]

[syntax_highlighting.julia]
patterns = [
    { pattern = "#.*$", color = "comment" },
    { pattern = "#=.*?=#", color = "comment" },
    { pattern = "\\b(abstract|baremodule|begin|break|catch|const|continue|do|else|elseif|end|export|false|finally|for|function|global|if|import|in|let|local|macro|module|quote|return|struct|true|try|using|while)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|true|false|nothing|missing|Inf|NaN)\\b", color = "literal" }
]

[syntax_highlighting.rust]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(abstract|alignof|as|async|await|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|trait|true|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|true|false|Some|None)\\b", color = "literal" }
]

[syntax_highlighting.csharp]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(abstract|as|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|async|await|by|descending|dynamic|equals|from|get|global|group|into|join|let|on|orderby|partial|remove|select|set|value|var|where|yield)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|true|false|null)\\b", color = "literal" },
    { pattern = "@\\w+", color = "decorator" }
]

[syntax_highlighting.dockerfile]
patterns = [
    { pattern = "#.*$", color = "comment" },
    { pattern = "^(FROM|MAINTAINER|RUN|CMD|LABEL|EXPOSE|ENV|ADD|COPY|ENTRYPOINT|VOLUME|USER|WORKDIR|ARG|ONBUILD|STOPSIGNAL|HEALTHCHECK|SHELL)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" }
]

[syntax_highlighting.terraform]
patterns = [
    { pattern = "#.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(resource|data|provider|variable|output|module|locals|terraform)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(true|false|null)\\b", color = "literal" },
    { pattern = "\\$\\{.*?\\}", color = "literal" }
]

[syntax_highlighting.jenkins]
patterns = [
    { pattern = "//.*$", color = "comment" },
    { pattern = "/\\*[\\s\\S]*?\\*/", color = "comment" },
    { pattern = "\\b(pipeline|agent|stages|steps|sh|node|stage|environment|parameters|when|parallel|script|post|always|success|failure|unstable|changed|echo|dir|withCredentials|withEnv)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(true|false|null)\\b", color = "literal" }
]

[syntax_highlighting.puppet]
patterns = [
    { pattern = "#.*$", color = "comment" },
    { pattern = "\\b(class|define|node|include|require|contain|inherits|if|elsif|else|case|when|default|and|or|in|true|false|undef)\\b", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\$[a-zA-Z0-9_:]+", color = "literal" },
    { pattern = "=>" , color = "punctuation" }
]

[syntax_highlighting.saltstack]
patterns = [
    { pattern = "#.*$", color = "comment" },
    { pattern = "^\\s*[\\w\\.-]+:", color = "keyword" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(true|false|null|True|False|None)\\b", color = "literal" },
    { pattern = "\\$\\{.*?\\}", color = "literal" },
    { pattern = "\\{\\{.*?\\}\\}", color = "literal" }
]

[syntax_highlighting.git]
patterns = [
    { pattern = "#.*$", color = "comment" },
    { pattern = "\\[(.*?)\\]", color = "keyword" },
    { pattern = "^\\s*[a-zA-Z0-9]+\\s*=", color = "property" },
    { pattern = "=\\s*(.*?)$", color = "string" }
]

[syntax_highlighting.notebook]
patterns = [
    { pattern = "\\b(def|class|for|while|if|else|elif|try|except|finally|with|import|from|as|return|yield|break|continue|pass|raise|assert|del|global|nonlocal|True|False|None)\\b", color = "keyword" },
    { pattern = "#.*$", color = "comment" },
    { pattern = "\"(?:\\\\\"|.)*?\"", color = "string" },
    { pattern = "'(?:\\\\'|.)*?'", color = "string" },
    { pattern = "\\b(\\d+(\\.\\d+)?|True|False|None)\\b", color = "literal" }
]

[supported_formats]
python = ["py", "pyw"]
toml = ["toml","tml","nix"]
javascript = ["js", "mjs", "cjs", "jsx"]
code = ["jl", "dart"]
css = ["css"]
nix = ["nix"]
html = ["html", "htm"]
json = ["json"]
yaml = ["yaml", "yml"]
xml = ["xml"]
markdown = ["md"]
plaintext = ["txt"]
shell = ["sh", "bash", "zsh", "fish", "ksh", "csh", "tcsh", "dash", "ash", "cmd"]
dart = ["dart"]
go = ["go"]
c = ["c", "h"]
cpp = ["cpp", "hpp"]
java = ["java"]
julia = ["jl"]
rust = ["rs"]
csharp = ["cs"]
dockerfile = ["Dockerfile"]
terraform = ["tf"]
jenkins = ["Jenkinsfile"]
puppet = ["pp"]
saltstack = ["sls"]
git = ["gitignore", "gitconfig", "config"]
notebook = ["ipynb"]
typescript = ["ts", "tsx"]  
php = ["php", "phtml", "php3", "php4", "php5"]  
ruby = ["rb", "erb", "rake"]                   
scala = ["scala"] 
r = ["r", "R"]    
swift = ["swift"]     
diff = ["diff", "patch"]
makefile = ["Makefile"]
ini = ["ini"]
csv = ["csv"]
sql = ["sql"]
graphql = ["graphql"]
kotlin = ["kt", "kts"]
lua = ["lua"]
perl = ["pl", "pm"]
powershell = ["ps1"]
fortran = ["f", "F", "f90", "F90", "for"]
